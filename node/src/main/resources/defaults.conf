# Start a stand-alone node.
# In this mode node
# 1. does not connect to any network
# 2. `casper.genesis-ceremony.ceremony-master-mode` = true
# 3. `required-signatures` = 0
# for node to be able to create and approve genesis block if its not available
standalone = false
dev-mode = false

protocol-server {
  # ID of the RChain network.
  # Node shall only accept messages with this `network-id`.
  # This is not Casper construct so it is not in `casper` section.
  # This is used to filter out messages originated from different networks to lower down the load.
  network-id = "testnet"

  # Host name or IP address of this node. Will be used by peers to reach this node, so by default have to be public
  # address.
  # If this attribute is not set then node will try to guess its public IP address.
  # Note: actual protocol server is binded to "0.0.0.0"
  # host = localhost

  # Allow `host` to be non publicly accessible address. Required for private networks installations.
  allow-private-addresses = false

  # Use random ports in case RChain Protocol port and/or Kademlia port are not free.
  use-random-ports = false

  # Support dynamic IP
  dynamic-ip = false

  # Disable UPnP
  no-upnp = false

  # Port for protocol server
  port = 40400

  # Maximum message size that can be received
  grpc-max-recv-message-size = 256K

  # Maximum size of messages that can be received via streams
  # This is effectively max size of a block
  grpc-max-recv-stream-message-size = 256M

  # Number of incoming RChain Protocol message consumers
  # This should be high enough, as BlockMessage consumption can hang waiting for block processing lock and
  # occupy one consumer.
  # The very minimum should be {number of nodes} * {synchrony constraint}, which is enough to consume
  # blocks proposed by peers simultaneously. Taking into account blocks are not the only protocol message,
  # and blocks can be received as well via `requesting missing blocks` routine, it is recommended to
  # make this number high. Upper bounded by the numer of messages (blocks are the biggest of them)
  # node is able to keep in memory. Block size upper bound size is `max-stream-message-size`.
  max-message-consumers = 400

  # whether a node could export the state to other nodes
  disable-state-exporter = false
}

protocol-client {
  # Should be the same as server network ID.
  network-id = ${protocol-server.network-id}

  # Address of RNode to bootstrap from when connecting to a network.
  # This should be provided by bootstrap node operator. You can bootstrap from any network peer.
  # <node-id> is derived from TLS public key used to secure internode communications (see tls.key-path).
  # To manually generate one the following command can be used
  # ```openssl ec -text -in <path-to-tls-key>/node.key.pem | grep pub -A 5 | tail -n +2 | tr -d '\n[:space:]:' | \
  # sed 's/^04//' | keccak-256sum -x -l | tr -d ' -' | tail -c 41```
  bootstrap = "rnode://de6eed5d00cf080fc587eeb412cb31a75fd10358@52.119.8.109?protocol=40400&discovery=40404"

  # Disable the node to start from Last Finalized State, instead it will start from genesis.
  # If this is `true`, when a node without any data connecting to existing network, the node would start from
  # genesis block and validate blocks from scratch. Otherwise, the node would start from last finalized block which
  # can save a lot of time of validating all the history blocks.
  disable-lfs = false

  # Number of connected peers picked randomly for broadcasting and streaming
  batch-max-connections = 20

  # Default timeout for network operations
  network-timeout = 5 seconds

  # Max message size for inbound gRPC messages
  grpc-max-recv-message-size = ${protocol-server.grpc-max-recv-message-size}

  # Chunk size for outbound streamed messages
  grpc-stream-chunk-size = 256K
}

peers-discovery {
  # host name or IP address of this node
  # If this attribute is not set then the node will try to guess its IP address
  # host = localhost

  # Port for Kademlia server
  port = 40404

  # Interval for peers lookup
  lookup-interval = 20 seconds

  # Interval for check for stale connections
  cleanup-interval = 20 minutes

  # Number of connections to check for being active at a time
  # If there are thousands of nodes, we might want to not check all of them each time.
  # One of strategies might be to check all connections with moderately low `check-stale-interval`
  # We implement this by default, so `batch-size` is high
  heartbeat-batch-size = 100

  # Check for first connection loop interval
  init-wait-loop-interval = 1 seconds
}

api-server {
  # Hostname or IP to bind API servers
  host = "0.0.0.0"

  # Port used for external gRPC API, exposes public API endpoints.
  port-grpc-external = 40401

  # Port used for internal gRPC API, exposes propose API and other non public endpoints.
  port-grpc-internal = 40402

  # Maximum size of message that can be received. This is effectively max size of a deploy.
  grpc-max-recv-message-size = 16M

  # Port for HTTP API
  port-http = 40403

    # Port for admin HTTP API
  port-admin-http = 40405

  # Some of API methods are loading blocks into memory, which can lead to memory exhaustion.
  # This puts upper bound on number of blocks that can be loaded via single API call.
  max-blocks-limit = 50

  # Enable reporting API
  enable-reporting = false

  # Sets a custom keepalive time, the delay time for sending next keepalive ping
  keep-alive-time = 2 hours

  # Sets a custom keepalive timeout, the timeout for keepalive ping requests
  keep-alive-timeout = 20 seconds

  # The most aggressive keep-alive time clients are permitted to configure.
  # The server would close the connection if clients exceeding this rate
  permit-keep-alive-time = 5 minutes

  # Sets a custom max connection idle time, connection being idle for longer than which will be gracefully terminated
  max-connection-idle = 1 hours

  # Sets a custom max connection age, connection lasting longer than which will be gracefully terminated
  max-connection-age = 1 hours

  # Sets a custom grace time for the graceful connection termination. Once the max connection age
  # is reached, RPCs have the grace time to complete. RPCs that do not complete in time will be
  # cancelled, allowing the connection to terminate
  max-connection-age-grace = 1 hours
}

storage {
  # Path to data directory. Depends on CLI `profile` option.
  data-dir = ${default-data-dir}
}

tls {
  # "Path to X.509 certificate for TLS. If file does not exist, certificate will be
  # generated from PEM key located at `tls.key-path`.
  certificate-path = ${storage.data-dir}/node.certificate.pem

  # Path to private key for TLS. Elliptic curve secp256r1 key in PEM format is supported.
  # If file does not exist, new key will be generated.
  key-path = ${storage.data-dir}/node.key.pem

  # Use a non blocking secure random instance to generate TLS key
  secure-random-non-blocking = false

  # TODO possibly remove
  custom-certificate-location = false
  custom-key-location = false
}

casper {
  # Block is considered as finalized if its fault tolerance is bigger then this value. For more info
  # https://github.com/rchain/rchain/blob/dev/casper/src/main/scala/coop/rchain/casper/SafetyOracle.scala
  fault-tolerance-threshold = 0.0

  # Base16 encoding of the public key to use for signing a proposed blocks.
  # Can be inferred from the private key for some signature algorithms.
  # validator-public-key =

  # Base16 encoding of the private key to use for signing a proposed blocks.
  # It is not recommended to use in production since private key could be revealed through the process table.
  # validator-private-key =

  # Path to the base16 encoded private key to use for signing a proposed blocks.
  # validator-private-key-path =

  # Shard name written into PoS contract during genesis.
  shard-name = root,

  # ID of the parent shard. For root shard it's `/`. ID of the shard is `{parent-shard-id}/{shard-name}`.
  # So for root named `root` shard ID is `/root`, for its child shard `rootchild` shard ID is `/root/rootchild`.
  parent-shard-id = /

  # Interval of the casper loop to maintain requested blocks and missing dependent blocks
  # in the node runtime, there is a loop which would fetch dependency of the missing dag and maintain
  # requested blocks. See
  # https://github.com/rchain/rchain/blob/43a1dfd90ec16a4a5c3b24e7d7aab8bc160ccb2b/node/src/main/scala/coop/rchain/node/NodeRuntime.scala#L746-L759
  casper-loop-interval = 30 seconds

  # Timeout for the requested blocks
  # all requests sent to request blocks is put into a data structure for maintain.
  requested-blocks-timeout = 240 seconds

  # Finalization is called every `finalization-rate` blocks
  finalization-rate = 1

  # Maximum number of block parents
  max-number-of-parents = 2147483647

  # Maximum depth of block parents. https://github.com/rchain/rchain/pull/2816
  # Limits the depth of secondary parents in regards to the depth of the main parent.
  max-parent-depth = 2147483647

  # Node will request for fork choice tips if the latest FCT is more then this value.
  fork-choice-stale-threshold = 10 minutes

  # Interval for check if fork choice tip is stale
  fork-choice-check-if-stale-interval = 11 minutes

  # Each block in Casper is justified by number of other blocks.
  # Before creating new block node checks if sum stake behind blocks in justificaton
  # is more then `synchrony-constraint-threshold` * {total stake of all other validators in a shard}.
  synchrony-constraint-threshold = 0.67

  # Node is allowed to propose a block only when last finalised block is less then `height-constraint-threshold`
  # behind. This is experimental option.
  height-constraint-threshold = 1000

  # Constraints for block consumption. This is still in codebase but disabled so config has no effect.
  round-robin-dispatcher {
    max-peer-queue-size = 100
    give-up-after-skipped = 0
    drop-peer-after-retries = 0
  }

  # Genesis block variables
  genesis-block-data {
    genesis-data-dir = ${storage.data-dir}/genesis

    # Plain text file consisting of lines of the form `<pk> <stake>`,
    # which defines the bond amounts for each validator at genesis.
    # <pk> is the public key (in base-16 encoding) identifying the validator and <stake>
    # is the amount of Rev they have bonded (an integer).
    bonds-file = ${casper.genesis-block-data.genesis-data-dir}/bonds.txt

    # Plain text file consisting of lines of the form `<algorithm> <pk> <revBalance>`,
    # which defines the Rev wallets that exist at genesis.
    # <algorithm> is the algorithm used to verify signatures when using the wallet (one of ed25519 or secp256k1),
    # <pk> is the public key (in base-16 encoding) identifying the wallet and <revBalance>
    # is the amount of Rev in the wallet.
    wallets-file = ${casper.genesis-block-data.genesis-data-dir}/wallets.txt

    # Minimum bond accepted by the PoS contract in the genesis block.
    bond-minimum = 1

    # Maximum bond accepted by the PoS contract in the genesis block.
    bond-maximum = 9223372036854775807

    # Length of the validation epoch measured in blocks.
    # This is put into PoS contract in the genesis block.
    epoch-length = 10000

    # Length of the quarantine time measured in blocks.
    # This is put into PoS contract in the genesis block.
    quarantine-length = 50000

    # Max number of active validator in a shard. Validator rotation will be enabled if there are
    # extra bond requests then slots available.
    number-of-active-validators = 100

    # TODO remove this
    # Timestamp for the deploys
    # deploy-timestamp = 0
  }

  # Genesis ceremony variables
  genesis-ceremony {
    # Number of signatures from bonded validators required for Ceremony Master to approve the genesis block.
    # For standalone node in testing environment always use `0` so node can approve genesis block and start the
    # one-node network.
    required-signatures = 0

    # Each `approve-interval` Ceremony Master (CM) checks if it have gathered enough signatures to approve
    # the genesis block. If positive, CM broadcasts Approved Block, if negative - broadcast Unapproved Block
    # one more time and keeps waiting for approvals.
    approve-interval = 5 minutes

    # Time window in which BlockApproval messages will be accumulated before checking conditions.
    # TODO remove this as it is effectively just puts lower bound for genesis ceremony duration
    approve-duration = 5 minutes

    # If node has to create genesis block but no bonds file is provided, bonds file with a list of
    # random public keys is generated + private keys corresponding to that keys are stored
    # in `<genesis-path>/<public_key>.sk`
    # This param specifies number of validator identites to generate.
    autogen-shard-size = 5

    # Allow node being a genesis validator
    # If this is `true` and no genesis block available on startup, node enter genesis validator mode.
    genesis-validator-mode = false

    # Allow node being ceremony master
    # If this is `true` and no genesis block available on startup node will start genesis ceremony.
    ceremony-master-mode = ${standalone}
  }
}

# Enable/disable Kamon reporters. Kamon is used for metrics collection / aggregation.
metrics {
  prometheus = false
  # Enable default influxdb reporter
  influxdb = false
  # Our requirement is to send metrics every 500ms to InfluxDB. The default `kamon-influxdb` uses HTTP with a
  # precision of epoch seconds for timestamps. In consequence, metrics are getting overwritten.
  # For that reason we use a custom InfluxDB reporter which sends metrics over UDP with a
  # precision of epoch milliseconds.
  influxdb-udp = false
  zipkin = false
  sigar = false
}
