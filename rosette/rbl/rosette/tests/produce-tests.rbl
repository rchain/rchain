;;; Copyright (c) 2018, RChain Cooperative
;;; Author: Kent Shikama <kent@kentshikama.com>
;;; This file is licensed under the Apache License, version 2.0.
;;;
;;; Tests for the produce method.
;;;
;;; The general pattern for the tests is a Let expression that sets up the mock variables
;;; followed by a call to the actual helper method that is being tested.

;;; tests for fetch-channel-pattern-and-product
(let* [[channel-subspace-table (new RblTable)]
       [data-list [1 2 3 4 5 42]]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [product-patterns ['anything 42]]
       [channel 'foo]

       [index-of-1 0]
       [index-of-42 5]]
  (seq
    ;;; it works when channel-index == channel-position
    (test-form (fetch-channel-pattern-and-product channel-subspace-table channel product-patterns 0 0) ['foo -1])
    ;;; it works with product-patterns[channel-index] == 42
    (test-form (fetch-channel-pattern-and-product channel-subspace-table channel product-patterns 0 1) ['foo index-of-1])
    ;;; it works with product-patterns[channel-index] == 'anything
    (test-form (fetch-channel-pattern-and-product channel-subspace-table channel product-patterns 1 0) ['foo index-of-42])
    ;;; it works when channel-index == channel-position
    (test-form (fetch-channel-pattern-and-product channel-subspace-table channel product-patterns 1 1) ['foo -1])))

;;; tests for fetch-channel-pattern-and-product when data-list is empty
(let* [[channel-subspace-table (new RblTable)]
       [data-list []]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [product-patterns ['anything]]
       [channel 'foo]]
  ;;; returns nothing when there is no data-list
  (test-form (fetch-channel-pattern-and-product channel-subspace-table channel product-patterns 0 1) []))

;;; tests for extract-consume-candidates
(let* [[channel-subspace-table (new RblTable)]
       [reverse-channel-lookup-table (new RblTable)]
       [_ (tbl-add reverse-channel-lookup-table 'foo--bar ['foo 'bar])]

       [data-list [42]]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [data-list []]
       [continuation-struct [['anything 88] 'ctxt-tuple-mock]]
       [continuation-list [continuation-struct]]
       [foobar-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo--bar foobar-subspace)]

       [channel 'bar]
       [product 88]]
  (seq
    ;;; it returns empty when no consume awaiting channels are passed in
    (test-form
      (extract-consume-candidates [] channel-subspace-table channel product reverse-channel-lookup-table) [])
    ;;; it returns the only candidate which is the match of the following product/continuation pair
    ;;; (a) the data index of 42 in foo along with the inserted product 88 and
    ;;; (b) the 0th index continuation waiting at 'foo--bar
    (test-form
      (extract-consume-candidates ['foo--bar] channel-subspace-table channel product
                                  reverse-channel-lookup-table)
      [[[['foo 0] ['bar -1]] ['foo--bar 0]]])))

;;; returns empty when passed empty
(test-form (select-best-consume []) [])
;;; returns first candidate when passed multiple
(let* [[candidate [[['x -1]] ['x 0]]]
       [candidate-another [[['x -1]] ['x 1]]]
       [candidates [candidate candidate-another]]]
  (test-form (select-best-consume candidates) candidate))

;;; tests for delete-product
(let* [[channel-subspace-table (new RblTable)]

       [data-list [42]]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [channel 'foo]
       [product 88]]
  (seq
    ;;; it returns data at appropriate index
    (test-form (delete-product channel-subspace-table channel 0 product) 42)
    ;;; it returns passed in product when index is NOT-STORED
    (test-form (delete-product channel-subspace-table channel -1 product) 88)))

;;; tests for consume-continuation when continuation-list is not emptied
(let* [[channel-subspace-table (new RblTable)]
       [channel-lookup-table (new RblTable)]
       [_ (map ['foo 'bar] (proc [i channel] (tbl-add channel-lookup-table channel ['foo--bar])))]
       [reverse-channel-lookup-table (new RblTable)]
       [_ (tbl-add reverse-channel-lookup-table 'foo--bar ['foo 'bar])]

       [data-list [42]]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [data-list []]
       [continuation-struct [['anything 88] 'ctxt-tuple-mock]]
       [continuation-struct-another [[42 88] 'ctxt-tuple-mock-another]]
       [continuation-list [continuation-struct continuation-struct-another]]
       [foobar-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo--bar foobar-subspace)]

       [channel 'bar]
       [product 88]

       [candidate [[['foo 0] ['bar -1]] ['foo--bar 0]]]]
  (let [[reduction (consume-continuation candidate channel-subspace-table channel-lookup-table
                                         reverse-channel-lookup-table product)]]
    (seq
      (test-form reduction ['ctxt-tuple-mock ['anything 88] [42 88]])
      (test-form (tbl-get channel-subspace-table 'foo--bar) [[] [continuation-struct-another]])
      (test-form (tbl-get reverse-channel-lookup-table 'foo--bar) ['foo 'bar])
      (test-form (tbl-get channel-lookup-table 'foo) ['foo--bar])
      (test-form (tbl-get channel-lookup-table 'bar) ['foo--bar]))))

;;; tests for consume-continuation when continuation-list is emptied
(let* [[channel-subspace-table (new RblTable)]
       [channel-lookup-table (new RblTable)]
       [_ (map ['foo 'bar] (proc [i channel] (tbl-add channel-lookup-table channel ['foo--bar])))]
       [reverse-channel-lookup-table (new RblTable)]
       [_ (tbl-add reverse-channel-lookup-table 'foo--bar ['foo 'bar])]

       [data-list [42]]
       [continuation-list []]
       [foo-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo foo-subspace)]

       [data-list []]
       [continuation-struct [['anything 88] 'ctxt-tuple-mock]]
       [continuation-list [continuation-struct]]
       [foobar-subspace [data-list continuation-list]]
       [_ (tbl-add channel-subspace-table 'foo--bar foobar-subspace)]

       [channel 'bar]
       [product 88]

       [candidate [[['foo 0] ['bar -1]] ['foo--bar 0]]]]
  (let [[reduction (consume-continuation candidate channel-subspace-table channel-lookup-table
                                         reverse-channel-lookup-table product)]]
    (seq
      (test-form reduction ['ctxt-tuple-mock ['anything 88] [42 88]])
      (test-form (tbl-get reverse-channel-lookup-table 'foo--bar) #absent)
      (test-form (tbl-get channel-lookup-table 'foo) [])
      (test-form (tbl-get channel-lookup-table 'bar) []))))

(record-and-reset)
