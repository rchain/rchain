syntax = "proto3";

import "scalapb/scalapb.proto";

option java_package = "coop.rchain.models";

option (scalapb.options) = {
  import: "coop.rchain.models.BitSetBytesMapper.bitSetBytesMapper"
};

message Par {
    repeated Send sends = 1;
    repeated Receive receives = 2;
    repeated Eval evals = 3;
    repeated New news = 4;
    repeated Expr exprs = 5;
    repeated Match matches = 6;
    repeated GPrivate ids = 7;
    int32 freeCount = 8;
    bytes locallyFree = 9 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message Channel {
    oneof channel_instance {
        Par quote = 1;
        Var chanVar = 2;
    }
}

// While we use vars in both positions, when producing the normalized
// representation we need a discipline to track whether a var is a name or a
// process.
// These are DeBruijn levels
message Var {
    message WildcardMsg {}
    oneof var_instance {
        sint32 bound_var = 1;
        sint32 free_var = 2;
        WildcardMsg wildcard = 3;
    }
}

// Upon send, all free variables in data are substituted with their values.
// also if a process is sent, it is auto-quoted.
message Send {
    Channel chan = 1;
    repeated Par data = 2;
    bool persistent = 3;
    int32 freeCount = 4;
    bytes locallyFree = 5 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message ReceiveBind {
    repeated Channel patterns = 1;
    Channel source = 2;
}

// [Par] is an n-arity Pattern.
// It's an error for free Variable to occur more than once in a pattern.
// Don't currently support conditional receive
message Receive {
    repeated ReceiveBind binds = 1;
    Par body = 2;
    bool persistent = 3;
    int32 bindCount = 4;
    int32 freeCount = 5;
    bytes locallyFree = 6 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message Eval {
    Channel channel = 1;
}

// Number of variables bound in the new statement.
// For normalized form, p should not contain solely another new.
// Also for normalized form, the first use should be level+0, next use level+1
// up to level+count for the last used variable.
message New {
    sint32 bindCount = 1;
    Par p = 2;
    bytes locallyFree = 4 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message MatchCase {
    Par pattern = 1;
    Par source = 2;
}

message Match {
    Par target = 1;
    repeated MatchCase cases = 2;
    int32 freeCount = 3;
    bytes locallyFree = 4 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

// Any process may be an operand to an expression.
// Only processes equivalent to a ground process of compatible type will reduce.
message Expr {
    oneof expr_instance {
        bool g_bool = 1;
        sint32 g_int = 2;
        string g_string = 3;
        string g_uri = 4;

        ENot e_not_body = 5;
        ENeg e_neg_body = 6;
        EMult e_mult_body = 7;
        EDiv e_div_body = 8;
        EPlus e_plus_body = 9;
        EMinus e_minus_body = 10;
        ELt e_lt_body = 11;
        ELte e_lte_body = 12;
        EGt e_gt_body = 13;
        EGte e_gte_body = 14;
        EEq e_eq_body = 15;
        ENeq e_neq_body = 16;
        EAnd e_and_body = 17;
        EOr e_or_body = 18;
        EVar e_var_body = 19;

        EList e_list_body = 20;
        ETuple e_tuple_body = 21;
        ESet e_set_body = 22;
        EMap e_map_body = 23;
    }
}

message EList {
    repeated Par ps = 1;
    int32 freeCount = 2;
    bytes locallyFree = 3 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message ETuple {
    repeated Par ps = 1;
    int32 freeCount = 2;
    bytes locallyFree = 3 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message ESet {
    repeated Par ps = 1;
    int32 freeCount = 2;
    bytes locallyFree = 3 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message EMap {
    repeated KeyValuePair kvs = 1;
    int32 freeCount = 2;
    bytes locallyFree = 3 [(scalapb.field).type = "scala.collection.immutable.BitSet"];
}

message KeyValuePair {
    Par key = 1;
    Par value = 2;
}

// A variable used as a var should be bound in a process context, not a name
// context. For example:
// for (@x <- c1; @y <- c2) { z!(x + y) } is fine, but
// for (x <- c1; y <- c2) { z!(x + y) } should raise an error.
message EVar {
    Var v = 1;
}

message ENot {
    Par p = 1;
}

message ENeg {
    Par p = 1;
}

message EMult {
    Par p1 = 1;
    Par p2 = 2;
}

message EDiv {
    Par p1 = 1;
    Par p2 = 2;
}

message EPlus {
    Par p1 = 1;
    Par p2 = 2;
}

message EMinus {
    Par p1 = 1;
    Par p2 = 2;
}

message ELt {
    Par p1 = 1;
    Par p2 = 2;
}

message ELte {
    Par p1 = 1;
    Par p2 = 2;
}

message EGt {
    Par p1 = 1;
    Par p2 = 2;
}

message EGte {
    Par p1 = 1;
    Par p2 = 2;
}

message EEq {
    Par p1 = 1;
    Par p2 = 2;
}

message ENeq {
    Par p1 = 1;
    Par p2 = 2;
}

message EAnd {
    Par p1 = 1;
    Par p2 = 2;
}

message EOr {
    Par p1 = 1;
    Par p2 = 2;
}

// These should only occur as the program is being evaluated. There is no way in
// the grammar to construct them.
message GPrivate {
    string id = 1;
}
