//scalapackage coop.rchain.rholang.collection

new 
  rl(`rho:registry:lookup`), EitherCh, TestSetCh,
  double, divide, divide100by, divide50by, divide10by,
  divide8by, doubleMap, divide10byFlatMap, composeTest,
  test1, test2, test3
in {
  rl!(`rho:id:j6trahbxycumerwpr5qype7j43b7eqh8auebwsa9nn68if47gswh73`, *EitherCh) |
  rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *TestSetCh) |
  for(@(_, Either) <- EitherCh; @(_, TestSet) <- TestSetCh) {
    contract double(@x, ret) = { ret!(2 * x) } |
    contract divide(@x, @y, ret) = {
      if(y == 0) { ret!(("Left", "Div by zero!")) }
      else { ret!(("Right", x / y)) }
    } |
    contract divide100by(@x, ret) = { divide!(100, x, *ret) } |
    contract divide50by(@x, ret) = { divide!(50, x, *ret) } |
    contract divide10by(@x, ret) = { divide!(10, x, *ret) } |
    contract divide8by(@x, ret) = { divide!(8, x, *ret) } |

    contract doubleMap(@either, ret) = {
      new fn in {
        contract fn(ret) = { @Either!("map", either, *double, *ret) } |
        ret!(*fn)
      }
    } |
    doubleMap!(("Right", 3), "RightMapTest") |
    doubleMap!(("Left", "message"), "LeftMapTest") |

    @TestSet!("define",
      "map should transform Right and preserve Left",
      [
        ["RightMapTest", ("Right", 6)],
        ["LeftMapTest", ("Left", "message")]
      ],
      *test1
    ) |

    contract divide10byFlatMap(@either, ret) = {
      new fn in {
        contract fn(ret) = { @Either!("flatMap", either, *divide10by, *ret) } |
        ret!(*fn)
      }
    } |
    divide10byFlatMap!(("Right", 5), "FlatMapTest1") |
    divide10byFlatMap!(("Left", "message"), "FlatMapTest2") |
    divide10byFlatMap!(("Right", 0), "FlatMapTest3") |

    @TestSet!("define",
      "flatMap should transform Right and preserve Left",
      [
        ["FlatMapTest1", ("Right", 2)],
        ["FlatMapTest2", ("Left", "message")],
        ["FlatMapTest3", ("Left", "Div by zero!")]
      ],
      *test2
    ) |

    contract composeTest(@input, @functions, ret) = {
      new fn in {
        contract fn(ret) = { @Either!("compose", input, functions, *ret) } |
        ret!(*fn)
      }
    } |
    composeTest!(5, [*divide10by, *divide8by], "ComposeTest1") |
    composeTest!(15, [*divide10by, *divide8by], "ComposeTest2") |
    composeTest!(5, [*divide100by, *divide8by, *divide10by], "ComposeTest3") |
    composeTest!(5, [*divide50by, *divide10by, *divide8by], "ComposeTest4") |

    @TestSet!("define",
      "compose should sequence Either-valued functions together",
      [
        ["ComposeTest1", ("Right", 4)],
        ["ComposeTest2", ("Left", "Div by zero!")],
        ["ComposeTest3", ("Left", "Div by zero!")],
        ["ComposeTest4", ("Right", 8)],
      ],
      *test3
    )
  }
}
