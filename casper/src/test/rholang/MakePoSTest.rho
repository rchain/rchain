//scalapackage coop.rchain.rholang.proofofstake

//requires MakePoS, MakeMint, TestSet, ListOps, Either

@"pk"!("79d16233dedf8e8e4cc25272b2b98ac096dac9239ade20dcee5987a1c1d101c7") |
@"minimumBond"!(5) |
@"maximumBond"!(100) |
@"initBonds"!({}) |

contract @"bond"(@pos, @publicKey, @sigVerify, @givenBondPurse, @rewardsForwarder, return) = {
  new bond in {
    contract bond(return) = {
      @(pos, "bond")!(publicKey, sigVerify, givenBondPurse, rewardsForwarder, *return)
    } |
    return!(*bond)
  }
} |

contract @"getBonds"(@pos, return) = {
  new getBonds in {
    contract getBonds(return) = { @(pos, "getBonds")!(*return) } |
    return!(*getBonds)
  }
} |

contract @"balance"(@purse, return) = {
  new balance in {
    contract balance(return) = { @(purse, "getBalance")!(*return) } |
    return!(*balance)
  }
} |

@"MakeMint"!("mint") | for(@mint <- @"mint") {
  @(mint, "makePurse")!(0, "posPurse") |
  @(mint, "makePurse")!(50, "bondPurse") |
  @(mint, "makePurse")!(500, "tooBigBondPurse") |
  @(mint, "makePurse")!(1, "tooSmallBondPurse") |
  for(
    @posPurse <- @"posPurse";
    @bondPurse <- @"bondPurse";
    @tooBigBondPurse <- @"tooBigBondPurse";
    @tooSmallBondPurse <- @"tooSmallBondPurse";
    @pk <- @"pk";
    @minimumBond <- @"minimumBond";
    @maximumBond <- @"maximumBond";
    @initBonds <- @"initBonds"
  ) {
    @"MakePoS"!(posPurse, minimumBond, maximumBond, initBonds, "pos") | 
    for(@pos <- @"pos") {
      
      @"balance"!(tooSmallBondPurse, "tooSmallBalance") |
      @"balance"!(tooBigBondPurse, "tooBigBalance") |
      @"bond"!(pos, pk, "ed25519Verify", tooSmallBondPurse, Nil, "tooSmallBond") |
      @"bond"!(pos, pk, "ed25519Verify", tooBigBondPurse, Nil, "tooBigBond") |
      @"TestSet"!(
        "PoS bond should not accept bounds outside the min/max",
        [
          ["tooSmallBond", (false, "Bond less than minimum!")],
          ["tooBigBond", (false, "Bond greater than maximum!")],
          ["tooSmallBalance", 1],
          ["tooBigBalance", 500]
        ]
      ) |

      @"balance"!(bondPurse, "bondPurseBalance") |
      @"bond"!(pos, pk, "ed25519Verify", bondPurse, Nil, "justRightBond") |
      @"getBonds"!(pos, "posBonds") |
      @"TestSet"!(
        "PoS bond should work for correct purses",
        [
          ["bondPurseBalance", 50],
          ["justRightBond", (true, "Bond successful!")],
          ["bondPurseBalance", 0],
          ["posBonds", {pk : (50, "ed25519Verify", Nil)}]
        ]
      )
    }
  }
}
