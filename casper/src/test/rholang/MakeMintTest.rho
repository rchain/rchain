//scalapackage coop.rchain.rholang.mint

//requires MakeMint, TestSet
new
  rl(`rho:registry:lookup`), TestSetCh, MakeMintCh,
  test1, test2, test3, test4, mintACh, mintBCh,
  getBalance, deposit, split, aliceAPurse, aliceBPurse,
  bobAPurse, bobBPurse, aliceAPurseBalance, bobBPurseBalance,
  ccDep1, ccDep2, aliceBPurseBalance, bobAPurseBalance,
  bDep, aDep1, aDep2, failPurse, splitFail, aliceAPurse5Ch,
  aliceAPurse5Balance
in {
  rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *TestSetCh) |
  rl!(`rho:id:exunyijimapk7z43g3bbr69awqdz54kyroj9q43jgu3dh567fxsftx`, *MakeMintCh) |
  for(@(_, TestSet) <- TestSetCh; @(_, MakeMint) <- MakeMintCh) {
    contract getBalance(purse, return) = {
      new getBalance in {
        contract getBalance(return) = {
          purse!("getBalance", *return)
        } |
        return!(*getBalance)
      }
    } |
    contract deposit(dest, @amount, @src, return) = {
      new deposit in {
        contract deposit(return) = {
          dest!("deposit", amount, src, *return)
        } |
        return!(*deposit)
      }
    } |
    contract split(purse, @amount, destCh, return) = {
      new split in {
        contract split(return) = {
          purse!("split", amount, *destCh) |
          for(@value <- destCh) {
            match value {
              [] => { return!(false) }
              _  => { return!(true) }
            } |
            destCh!(value)
          }
        } |
        return!(*split)
      }
    } |
    @MakeMint!(*mintACh) | @MakeMint!(*mintBCh) |
    for(mintA <- mintACh; mintB <- mintBCh) {
      mintA!("makePurse", 100, *aliceAPurse) | mintB!("makePurse", 50, *bobBPurse) |
      for(@aliceAPurse <- aliceAPurse; @bobBPurse <- bobBPurse) {
        getBalance!(aliceAPurse, *aliceAPurseBalance) |
        getBalance!(bobBPurse, *bobBPurseBalance) |
        @TestSet!("define",
          "Purses should be created with the given balance.",
          [
            [*aliceAPurseBalance, 100],
            [*bobBPurseBalance, 50]
          ],
          *test1
        ) |
        
        
        @TestSet!("after", *test1, {
          deposit!(aliceAPurse, 10, bobBPurse, *ccDep1) |
          deposit!(bobBPurse, 10, aliceAPurse, *ccDep2) |
          @TestSet!("define", //cannot deposit tokens across different mints
            "Cross-currency deposits should fail.",
            [
              [*ccDep1, "hanging return"],
              [*ccDep2, "hanging return"],
            ],
            *test2
          )
        }) |
        
        
        @TestSet!("after", *test2, {
          @aliceAPurse!("sprout", *bobAPurse) |
          @bobBPurse!("sprout", *aliceBPurse) |
          for(@aliceBPurse <- aliceBPurse; @bobAPurse <- bobAPurse) {
            getBalance!(aliceBPurse, *aliceBPurseBalance) |
            getBalance!(bobAPurse, *bobAPurseBalance) |
            deposit!(aliceBPurse, 10, bobBPurse, *bDep) |
            deposit!(bobAPurse, 20, aliceAPurse, *aDep1) |
            deposit!(bobAPurse, 30, aliceAPurse, *aDep2) |
            @TestSet!("define",
              "Deposit should work as expected.",
              [
                [*bDep, true], //10 from Bob to Alice
                [*aliceBPurseBalance, 10], //0 + 10 = 10
                [*bobBPurseBalance, 40], // 50 - 10 = 40
                
                [*aDep1, true], //20 from Alice to Bob
                [*bobAPurseBalance, 20], //0 + 20 = 20
                [*aliceAPurseBalance, 80], // 100 - 20 = 80
                
                [*aDep2, true], //30 from Alice to Bob again
                [*bobAPurseBalance, 50], //20 + 30 = 50
                [*aliceAPurseBalance, 50], // 80 - 30 = 50
              ],
              *test3
            )
          } |
          
          @TestSet!("after", *test3, {
            split!(aliceAPurse, 500, *failPurse, *splitFail) |
            @aliceAPurse!("split", 5, *aliceAPurse5Ch) |
            for(@[aliceAPurse5] <- aliceAPurse5Ch){
              aliceAPurse5Ch!([aliceAPurse5]) |
              getBalance!(aliceAPurse5, *aliceAPurse5Balance) |
              @TestSet!("define",
                "Split should work as expected.",
                [
                  [*splitFail, false], //cannot split with more than you have
                  [*aliceAPurse5Balance, 5], //0 + 5 = 5
                  [*aliceAPurseBalance, 45] // 50 - 5 = 45
                ],
                *test4
              )
            }
          })
        })
      }
    }
  }
}
