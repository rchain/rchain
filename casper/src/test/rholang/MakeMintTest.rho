//scalapackage coop.rchain.rholang.mint

//requires MakeMint, RhoSpec
new
  rl(`rho:registry:lookup`),
  stdlog(`rho:io:stdlog`),
  setup,
  test_create_purse, test_cross_currency_deposit, test_deposit, test_split,
  test_deposit_fails_on_overflow,
  test_deposit_is_atomical,
  roguePurse1,
  split, getBalance, deposit
in {
  new RhoSpecCh in {
    rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *RhoSpecCh) |
    for(@(_, RhoSpec) <- RhoSpecCh) {
      @RhoSpec!("testSuite", *setup,
        [
          ("Purses should be created with the given balance", *test_create_purse),
          // ("Cross-currency deposits should fail.", *test_cross_currency_deposit)
          ("Fake purses should not be able to forge payment.", *roguePurse1),
          ("Deposit should work as expected", *test_deposit),
          ("Split should work as expected", *test_split),
          ("Purse deposit is atomical", *test_deposit_is_atomical, 1000),
          ("Deposit should fail on overflow", *test_deposit_fails_on_overflow)
        ])
    }
  } |

  contract setup(retCh) = {
    new MakeMintCh, mintACh, mintBCh in {
      rl!(`rho:id:exunyijimapk7z43g3bbr69awqdz54kyroj9q43jgu3dh567fxsftx`, *MakeMintCh) |
      for(@(_, MakeMint) <- MakeMintCh) {
        @MakeMint!(*mintACh) | @MakeMint!(*mintBCh) |
        for(mintA <- mintACh; mintB <- mintBCh) {
          retCh ! ((*mintA, *mintB))
        }
      }
    }
  } |

  contract test_create_purse(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse, aliceAPurseBalance, bobBPurseBalance in {
      @mintA!("makePurse", 100, *aliceAPurse) |
      @mintB!("makePurse", 50, *bobBPurse) |
      for(aliceAPurse <- aliceAPurse; bobBPurse <- bobBPurse) {
        aliceAPurse!("getBalance", *aliceAPurseBalance) |
        bobBPurse!("getBalance", *bobBPurseBalance) |
        rhoSpec!("assertMany",
          [
            ((100, "== <-", *aliceAPurseBalance), "alice should have the initial balance"),
            ((50, "== <-", *bobBPurseBalance), "bob should have the initial balance")
          ], *ackCh)
      }
    }
  } |

  contract test_cross_currency_deposit(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse, ccDep1, ccDep2 in {
      @mintA!("makePurse", 100, *aliceAPurse) |
      @mintB!("makePurse", 50, *bobBPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobBPurse <- bobBPurse) {
        aliceAPurse!("deposit", 10, *bobBPurse, *ccDep1) |
        bobBPurse!("deposit", 10, *aliceAPurse, *ccDep2) |
        rhoSpec!("assertMany",
          [
            ((false, *ccDep1), "deposit from bob to alice should fail"),
            ((false, *ccDep2), "deposit from alice to bob should fail")
          ], *ackCh)
      }
    }
  } |

  contract test_deposit(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, aliceAPurseBalance,
        bobAPurse, bobAPurseBalance,
        depositSuccess in {
      @mintA!("makePurse", 0, *aliceAPurse) |
      @mintA!("makePurse", 50, *bobAPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobAPurse <- bobAPurse) {
        aliceAPurse!("deposit", 10, *bobAPurse, *depositSuccess) |
        for (@depositResult <- depositSuccess) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          bobAPurse!("getBalance", *bobAPurseBalance) |

          rhoSpec!("assertMany",
            [
              (depositResult, "deposit should succeed"),
              ((10, "== <-", *aliceAPurseBalance), "0 + 10 = 10"),
              ((40, "== <-", *bobAPurseBalance), "50 - 10 = 40"),
            ],
            *ackCh)
        }
      }
    }
  } |

  contract test_split(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, bobAPurse, aliceAPurse5,
        aliceAPurseBalance, aliceAPurse5Ch, aliceAPurse5Balance,
        splitFail, splitResult, failPurse in {
      @mintA!("makePurse", 50, *aliceAPurse) |
      for(aliceAPurse <- aliceAPurse) {
        aliceAPurse!("split", 500, *failPurse, *splitFail) |
        rhoSpec!("assert", (false, "== <-", *splitFail), "cannot split with more what you have") |

        aliceAPurse!("split", 5, *splitResult) |
        for (@[aliceAPurse5] <- splitResult) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          @aliceAPurse5!("getBalance", *aliceAPurse5Balance) |
          rhoSpec!("assertMany",
            [
              ((5, "== <-", *aliceAPurse5Balance), "0 + 5 = 5"),
              ((45, "== <-", *aliceAPurseBalance), "50 - 5 = 45")
            ],
            *ackCh
          )
        }
      }
    }
  } |

  contract test_deposit_is_atomical(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, aliceAPurseBalance,
        bobAPurse, bobAPurseBalance,
        depositSuccess in {
      @mintA!("makePurse", 0, *aliceAPurse) |
      @mintA!("makePurse", 50, *bobAPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobAPurse <- bobAPurse) {
        aliceAPurse!("getBalance", *aliceAPurseBalance) |
        aliceAPurse!("deposit", 10, *bobAPurse, *depositSuccess) |
        bobAPurse!("getBalance", *bobAPurseBalance) |

        for (@aliceFinalBalance <- aliceAPurseBalance; @bobFinalBalance <- bobAPurseBalance) {
          rhoSpec!("assert",
            (50, "==", aliceFinalBalance + bobFinalBalance),
            "The observable sum should be equal to the original sum",
            *ackCh)
          }
        }
      }
    } |

  contract test_deposit_fails_on_overflow(rhoSpec, @(mintA,_), ackCh)= {
    new retCh1, retCh2, purse1, purse2 in {
      @mintA!("makePurse", 1000, *retCh1) |
      @mintA!("makePurse", 9223372036854775807, *retCh2) |
      for(purse1 <- retCh1; purse2 <- retCh2) {
        purse1!("deposit", 9223372036854775807, *purse2, *retCh1) |
        for(@expectedFailure <- retCh1) {
          purse1!("getBalance", *retCh1) |
          purse2!("getBalance", *retCh2) |
          rhoSpec!("assertMany",
            [
              ((false, "==", expectedFailure), "expect failure on overflow"),
              ((1000, "== <-", *retCh1), "purse1 balance should not  change"),
              ((9223372036854775807, "== <-", *retCh2), "purse2 balance should not change")
            ],
            *ackCh)
        }
      } |
      
  contract roguePurse1(rhoSpec, @(*mint1, _), ackCh) = {
    new fakePurse in {
      contract fakePurse(@stolenDecr, @amount, success) = {
        success!(true, "fakeDecr")
      } |

      new let2, let3, depositCh in {  // let @m1 = ...
        mint1!("makePurse", 10, *let2) | for (purse1 <- let2) {
          purse1!("deposit", 5, *fakePurse, *depositCh) | for (@depositOk <- depositCh) {
            purse1!("getBalance", *let3) | for (@bal <- let3) {
              rhoSpec!("assert", (bal, "==", 10), "real purse balance should not increase", *ackCh)
            }
          }
        }
      }
    }
  }
}
