//scalapackage coop.rchain.rholang.unittest

//requires ListOps
contract @"TestSet"(desc, @tests) = {
  new addTests, execTests, testsCh in {
    contract execTests(return) = {
      new combinator in {
        contract combinator(head, @accumulatedValue, return) = {
          new result in {
            head!(*result) |
            for(@r <- result) {
              match [r, accumulatedValue] {
                [true, true] => return!(true)
                _            => return!(false)
              }
            }
          }
        } |
        for(@tests <- testsCh) {
          @("ListOps", "fold")!(tests, true, *combinator, *return)
        }
      }
    } |
    contract addTests(@tests) = {
      new toContract in {
        contract toContract(@test, return) = {
          match test {
            [functionCh, answer] => {
              new tContract in {
                contract tContract(return) = {
                  for (function <- @functionCh) {
                    @functionCh!(*function) | //put back for possible re-use
                    new result in {
                      function!(*result) | for(@r <- result) {
                        return!(r == answer)
                      }
                    }
                  }
                } |
                return!(*tContract)
              }
            }
          }
        } |
        @("ListOps", "map")!(tests, *toContract, *testsCh)
      }
    } |
    addTests!(tests) |
    execTests!(*desc)
  }
} |
contract @("TestSet", "after")(desc, continuation) = {
  for(@result <- desc) {
    if (result) {
      desc!(result) | { *continuation }
    } else {
      desc!(result)
    }
  }
}
