//scalapackage coop.rchain.rholang.mint

//requires MakeMint, RhoSpec
new
  rl(`rho:registry:lookup`),
  stdlog(`rho:io:stdlog`),
  setup,
  test_create_purse, test_cross_currency_deposit, test_deposit, test_split,
  test_overflow_deposit,
  roguePurse1,
  split, getBalance, deposit
in {
  new RhoSpecCh in {
    rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
    for(@(_, RhoSpec) <- RhoSpecCh) {
      @RhoSpec!("testSuite", *setup,
        [
          ("Purses should be created with the given balance", *test_create_purse),
          ("Cross-currency deposits should fail.", *test_cross_currency_deposit),
          ("Fake purses should not be able to forge payment.", *roguePurse1),
          ("Deposit should work as expected", *test_deposit),
          ("Split should work as expected", *test_split),
          ("In case of overflow, no tranfer occurs", *test_overflow_deposit)
        ])
    }
  } |

  contract setup(_, retCh) = {
    new MakeMintCh, mintACh, mintBCh in {
      rl!(`rho:rchain:makeMint`, *MakeMintCh) |
      for (@(_, MakeMint) <- MakeMintCh) {
        @MakeMint!(*mintACh) |
        @MakeMint!(*mintBCh) |
        for (mintA <- mintACh;
             mintB <- mintBCh) {
          retCh!((*mintA, *mintB))
        }
      }
    }
  } |

  contract test_create_purse(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse,
        aliceAPurseBalance, bobBPurseBalance
    in {
      match (100, 50) {
        (aliceAmt, bobAmt) => {
          @mintA!("makePurse", aliceAmt, *aliceAPurse) |
          @mintB!("makePurse", bobAmt, *bobBPurse) |
          for(aliceAPurse <- aliceAPurse; bobBPurse <- bobBPurse) {
            aliceAPurse!("getBalance", *aliceAPurseBalance) |
            bobBPurse!("getBalance", *bobBPurseBalance) |
            rhoSpec!("assertMany",
              [
                ((aliceAmt, "== <-", *aliceAPurseBalance), "alice should have the initial balance"),
                ((bobAmt, "== <-", *bobBPurseBalance), "bob should have the initial balance")
              ], *ackCh)
          }
        }
      }
    }
  } |

  contract test_cross_currency_deposit(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse, ccDep1, ccDep2 in {
      @mintA!("makePurse", 100, *aliceAPurse) |
      @mintB!("makePurse", 50, *bobBPurse) |
      for (aliceAPurse <- aliceAPurse;
           bobBPurse   <- bobBPurse) {
        aliceAPurse!("deposit", 10, *bobBPurse, *ccDep1) |
        bobBPurse!("deposit", 10, *aliceAPurse, *ccDep2) |
        for (@success1 <- ccDep1;
             @success2 <- ccDep2) {
          rhoSpec!("assertMany",
            [
              ((false, "==", success1), "deposit from bob to alice should fail"),
              ((false, "==", success2), "deposit from alice to bob should fail")
            ],
            *ackCh
          )
        }
      }
    }
  } |

  contract test_deposit(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, aliceAPurseBalance,
        bobAPurse, bobAPurseBalance,
        depositSuccess in {
      @mintA!("makePurse", 0, *aliceAPurse) |
      @mintA!("makePurse", 50, *bobAPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobAPurse <- bobAPurse) {
        aliceAPurse!("deposit", 10, *bobAPurse, *depositSuccess) |
        for (@depositResult <- depositSuccess) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          bobAPurse!("getBalance", *bobAPurseBalance) |

          rhoSpec!("assertMany",
            [
              (depositResult, "deposit should succeed"),
              ((10, "== <-", *aliceAPurseBalance), "0 + 10 = 10"),
              ((40, "== <-", *bobAPurseBalance), "50 - 10 = 40"),
            ],
            *ackCh)
        }
      }
    }
  } |

  contract test_split(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, bobAPurse, aliceAPurse5,
        aliceAPurseBalance, aliceAPurse5Ch, aliceAPurse5Balance,
        splitFail, splitResult, failPurse in {
      @mintA!("makePurse", 50, *aliceAPurse) |
      for(aliceAPurse <- aliceAPurse) {
        aliceAPurse!("split", 500, *failPurse, *splitFail) |
        rhoSpec!("assert", (false, "== <-", *splitFail), "cannot split with more what you have") |

        aliceAPurse!("split", 5, *splitResult) |
        for (@[aliceAPurse5] <- splitResult) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          @aliceAPurse5!("getBalance", *aliceAPurse5Balance) |
          rhoSpec!("assertMany",
            [
              ((5, "== <-", *aliceAPurse5Balance), "0 + 5 = 5"),
              ((45, "== <-", *aliceAPurseBalance), "50 - 5 = 45")
            ],
            *ackCh
          )
        }
      }
    }
  } |

  contract roguePurse1(rhoSpec, @(*mint1, _), ackCh) = {
    new fakePurse in {
      contract fakePurse(@"decr", decrCh) = {
        decrCh!("fakeDecr")
      } |
      contract fakePurse(@stolenDecr, @amount, success) = {
        success!(true, "fakeDecr")
      } |

      new let2, let3, depositCh in {  // let @m1 = ...
        mint1!("makePurse", 10, *let2) | for (purse1 <- let2) {
          purse1!("deposit", 5, *fakePurse, *depositCh) | for (@depositOk <- depositCh) {
            purse1!("getBalance", *let3) | for (@bal <- let3) {
              rhoSpec!("assert", (bal, "==", 10), "real purse balance should not increase", *ackCh)
            }
          }
        }
      }
    }
  } |
  // In case of an overflow during a deposit, no funds should be transferred.
  contract test_overflow_deposit(rhoSpec, @(*mint, _), ackCh) = {
    new alicePurseCh, bobPurseCh, successCh,
        initialAlicePurseBalanceCh, initialBobPurseBalanceCh,
        finalAlicePurseBalanceCh, finalBobPurseBalanceCh
    in {
      match (9223372036854775807, 1000) {
        (aliceAmt, bobAmt) => {
          // Alice's purse has maximum balance.
          mint!("makePurse", aliceAmt, *alicePurseCh) |
          mint!("makePurse", bobAmt, *bobPurseCh) |
          for (alicePurse <- alicePurseCh;
               bobPurse   <- bobPurseCh) {
            alicePurse!("getBalance", *initialAlicePurseBalanceCh) |
            bobPurse!("getBalance", *initialBobPurseBalanceCh) |
            for (@initialAlicePurseBalance <- initialAlicePurseBalanceCh;
                 @initialBobPurseBalance   <- initialBobPurseBalanceCh) {
              // Depositing any funds to Alice results in overflow.
              alicePurse!("deposit", 1, *bobPurse, *successCh) |
              for (@false <- successCh) {
                alicePurse!("getBalance", *finalAlicePurseBalanceCh) |
                bobPurse!("getBalance", *finalBobPurseBalanceCh) |
                for (@finalAlicePurseBalance <- finalAlicePurseBalanceCh;
                     @finalBobPurseBalance   <- finalBobPurseBalanceCh) {
                  rhoSpec!("assertMany",
                    [
                      ((aliceAmt, "==", initialAlicePurseBalance), "Alice should have the initial balance"),
                      ((bobAmt, "==", initialBobPurseBalance), "Bob should have the initial balance"),
                      ((finalAlicePurseBalance, "==", initialAlicePurseBalance), "Alice's balance should not change"),
                      ((finalBobPurseBalance, "==", initialBobPurseBalance), "Bob's balance should not change")
                    ],
                    *ackCh
                  )
                }
              }
            }
          }
        }
      }
    }
  }
}

