// Match a list of known valid publicKey -> RevAddress pairs to bind them to variables
match (
    "04f700a417754b775d95421973bdbdadb2d23c8a5af46f1829b1431f5c136e549e8a0d61aa0c793f1a614f8e437711c7758473c6ceb0859ac7e9e07911ca66b5c4".hexToBytes(),
    "11112VYAt8rUGNRRZX3eJdgagaAhtWTK8Js7F7X5iqddMVqyDTtYau",
    "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111".hexToBytes(),
    "1111pdZDG4MZ3eBfaipaD22VXmbFY6PW9ZdGDWdEcXZz4gGxTxgn9",
    "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222".hexToBytes(),
    "11112CXAkc8pV2AMHUSgHGbFkqovgyY9SRja4ZLSpRC9q7qYZx5SVc"
) {
  (
    genesisPubKey,
    genesisRevAddress, // the rev address of a vault instantiated at genesis
    alicePubKey,
    aliceRevAddress, // the rev address of a vault constructed post-genesis
    bobPubKey,
    bobRevAddress // the rev address of a vault constructed post-genesis
  ) => {

    new
      rl(`rho:registry:lookup`),
      RhoSpecCh,
      ListOpsCh,
      getDeployerId(`rho:test:deployerId:make`),
      setup,
      testFindOrCreateGenesisVault,
      testDepositToGenesisCreatedVault,
      testBalanceInGenesisCreatedVault,
      testTransferInGenesisCreatedVault,
      testCreateVaultFail,
      testCreateVault,
      testTransfer,
      testFindOrCreate,
      testTransferToSelf,
      testAmountNegative,
      testInsufficeintFunds,
      testInvalidRevAddress,
      testUnfBoundVault,
      testLogging,
      withVaultAndIdentityOf,
      transfer,
      assertBalances,
      stdlog(`rho:io:stdlog`)
    in {
      rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
      for(@(_, RhoSpec) <- RhoSpecCh) {
        @RhoSpec!("testSuite", *setup,
          [
            ("Create genesis vault with expected balance", *testFindOrCreateGenesisVault),
            ("Return an error for invalid public key", *testCreateVaultFail),
            // ("Create vault and see that it is secured", *testCreateVault),
            // ("Transfer from genesis to Alice", *testTransfer),
            // ("Return the existing wallet when calling testFindOrCreate", *testFindOrCreate),
            // ("Transfer to own account successfully", *testTransferToSelf),
            // ("Fail the tranfer if the amount to transfer is negative", *testAmountNegative),
            // ("Fail the transfer if there are insufficient funds", *testInsufficeintFunds),
            // ("Fail the transfer if the destination addresss is not a valid RevAddress", *testInvalidRevAddress),
            ("Transfer from unforgeable name bound vault", *testUnfBoundVault),
            ("Transfer log entries are recorded in both vault logs", *testLogging)
          ])
      } |

      contract setup(_, ret) = {
        new RevVaultCh in {
          rl!(`rho:rchain:revVault`, *RevVaultCh) |
          for (@(_, RevVault) <- RevVaultCh) {
            ret!(RevVault)
          }
        }
      } |

      contract testFindOrCreateGenesisVault(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, balanceCh in {
          RevVault!("findOrCreate", genesisRevAddress, *genesisVaultCh) |
          for (@(true, genesisVault) <- genesisVaultCh) {
            // so far, access to genesisVault is not secured. This will be changd.
            @genesisVault!("balance", *balanceCh) |
            rhoSpec!("assert", (9000000, "== <-", *balanceCh), "balance is as expected", *ackCh)
          }
        }
      } |

      contract testCreateVaultFail(rhoSpec, RevVault, ackCh) = {
        new e1 in {
          RevVault!("findOrCreate", "EEEE", *e1) |
          rhoSpec!("assertMany",
            [
              (((false, "Invalid address length"), "== <-", *e1), "should be a failure")
            ], *ackCh
          )
        }
      } |

      contract testCreateVault(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, deployerId(`rho:rchain:deployerId`), genesisAuthKeyCh, balanceCh, transferCh in {
          RevVault!("findOrCreate", aliceRevAddress, *aliceVaultCh) |
          //as per `setup`, the deployer is `genesis` and shouldn't be able to access the vault
          RevVault!("deployerAuthKey", *deployerId, *genesisAuthKeyCh) |
          for (@(true, aliceVault) <- aliceVaultCh & genesisAuthKey <- genesisAuthKeyCh) {
            @aliceVault!("balance", *balanceCh) |
            @aliceVault!("transfer", genesisRevAddress, 1, *genesisAuthKey, *transferCh) |
            rhoSpec!("assertMany",
              [
                ((0, "== <-", *balanceCh), "balance should be 0"),
                (((false, "Invalid AuthKey"), "== <-", *transferCh), "transfer should fail")
              ], *ackCh
            )
          }
        }
      } |

      contract testTransfer(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, aliceVaultCh, ret, transferSuccessful  in {
          withVaultAndIdentityOf!(genesisPubKey, *genesisVaultCh) |
          RevVault!("findOrCreate", aliceRevAddress, *aliceVaultCh) |
          for (genesisVault, @genesisVaultKey <- genesisVaultCh & @(true, aliceVault) <- aliceVaultCh) {
            genesisVault!("transfer", aliceRevAddress, 1000, genesisVaultKey, *ret) |
            rhoSpec!("assert", ((true, Nil), "== <-", *ret), "transfer successful", *transferSuccessful) |
            assertBalances!(*transferSuccessful, [(*genesisVault, 8999000), (aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testFindOrCreate(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, aliceVaultCh, now in {
          //the below attempts to create a wallet are going to fetch the ones created in previous tests.
          RevVault!("findOrCreate", genesisRevAddress, *genesisVaultCh) |
          RevVault!("findOrCreate", aliceRevAddress, *aliceVaultCh) |
          for (@(true, g) <- genesisVaultCh & @(true, a) <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(g, 8999000), (a, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testTransferToSelf(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, now, balanceOk, transferResult, transferOk in {
          withVaultAndIdentityOf!(alicePubKey, *aliceVaultCh) |
          for (@aliceVault, @aliceVaultKey <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(aliceVault, 1000)], *rhoSpec, *balanceOk) |
            transfer!(*balanceOk, aliceVault, aliceRevAddress, 1000, aliceVaultKey, *transferResult) |
            rhoSpec!("assert", ((true, Nil), "== <-", *transferResult), "transfer successful", *transferOk) |
            assertBalances!(*transferOk, [(aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testAmountNegative(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, now, balanceOk, transferResult, transferOk in {
          withVaultAndIdentityOf!(alicePubKey, *aliceVaultCh) |
          for (@aliceVault, @aliceVaultKey <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(aliceVault, 1000)], *rhoSpec, *balanceOk) |
            transfer!(*balanceOk, aliceVault, bobRevAddress, -1, aliceVaultKey, *transferResult) |
            rhoSpec!("assert", ((false, "Amount must be positive value"), "== <-", *transferResult), "transfer failed", *transferOk) |
            assertBalances!(*transferOk, [(aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testInsufficeintFunds(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, res, resOk in {
          withVaultAndIdentityOf!(alicePubKey, *aliceVaultCh) |
          for (aliceVault, @aliceVaultKey <- aliceVaultCh) {
            aliceVault!("transfer", bobRevAddress, 9000, aliceVaultKey, *res) |
            rhoSpec!("assert", ((false, "Insufficient funds"), "== <-", *res), "transfer failed", *resOk) |
            assertBalances!(*resOk, [(*aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testInvalidRevAddress(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, res, resOk in {
          withVaultAndIdentityOf!(alicePubKey, *aliceVaultCh) |
          for (aliceVault, @aliceVaultKey <- aliceVaultCh) {
            aliceVault!("transfer", "pretty surely invalid rev address", 1, aliceVaultKey, *res) |
            rhoSpec!("assert", ((false, "Invalid Base58 encoding"), "== <-", *res), "transfer failed", *resOk) |
            assertBalances!(*resOk, [(*aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testUnfBoundVault(rhoSpec, RevVault, ackCh) = {
        new RevAddress(`rho:rev:address`), deployerId(`rho:rchain:deployerId`),
            unf, unfRevAddrCh, unfAuthKeyCh, unfVaultCh,
            genesisVaultCh, initTransferCh, transferCh
        in {
          stdlog!("info", ("start"))|
          withVaultAndIdentityOf!(genesisPubKey, *genesisVaultCh) |
          // Get unforgeable channel REV address
          RevAddress!("fromUnforgeable", *unf, *unfRevAddrCh) |
          for (@unfRevAddress <- unfRevAddrCh; genesisVault, genesisVaultKey <- genesisVaultCh) {
            stdlog!("info", ("create addr"))|
            // Transfer initial funds to unforgeable vault
            genesisVault!("transfer", unfRevAddress, 100, *genesisVaultKey, *initTransferCh) |
            // Teting transfer from unforgeable bound vault
            RevVault!("findOrCreate", unfRevAddress, *unfVaultCh) |
            RevVault!("unforgeableAuthKey", *unf, *unfAuthKeyCh) |
            for (@(true, unfVault) <- unfVaultCh) {
              stdlog!("info", ("create unf suc"))|
              for (unfAuthKey <- unfAuthKeyCh){
                stdlog!("info", ("create auth"))|
                for ( _ <- initTransferCh){
                  stdlog!("info", ("create unf"))|
                  @unfVault!("transfer", genesisRevAddress, 1, *unfAuthKey, *transferCh) |
                  rhoSpec!("assert", ((true, Nil), "== <-", *transferCh), "transfer succeeded", *ackCh)
                }
              }
            }
          }
        }
      } |

      contract testLogging(rhoSpec, RevVault, ackCh) = {
        new
          RevAddress(`rho:rev:address`),
          a, aRevAddrCh, aVaultCh, aEntryCh, aVaultKeyCh,
          b, bRevAddrCh, bVaultCh, bEntryCh, transferCh
        in {
          RevAddress!("fromUnforgeable", *a, *aRevAddrCh) |
          RevAddress!("fromUnforgeable", *b, *bRevAddrCh) |
          for (@aRevAddr <- aRevAddrCh&
               @bRevAddr <- bRevAddrCh) {
            RevVault!("findOrCreate", aRevAddr, *aVaultCh) |
            RevVault!("findOrCreate", bRevAddr, *bVaultCh) |
            for (@(true, *aVault) <- aVaultCh&
                 @(true, *bVault) <- bVaultCh) {
              RevVault!("unforgeableAuthKey", *a, *aVaultKeyCh) |
              for (@aVaultKey <- aVaultKeyCh) {
                // This is the only transfer in a's log and in b's log
                aVault!("transfer", bRevAddr, 0, aVaultKey, *transferCh) |
                for (@(true, _) <- transferCh) {
                  aVault!("readLogEntry", *aEntryCh) |
                  bVault!("readLogEntry", *bEntryCh) |
                  for (@aEntry <- aEntryCh&
                       @bEntry <- bEntryCh) {
                    rhoSpec!("assert",
                      (aEntry == bEntry)
                        and (aEntry.get("to")     == bRevAddr)
                        and (aEntry.get("from")   == aRevAddr)
                        and (aEntry.get("amount") == 0),
                      "transfer successfully logged",
                      *ackCh
                    )
                  }
                }
              }
            }
          }
        }
      } |

      new RevVaultCh in {
        rl!(`rho:rchain:revVault`, *RevVaultCh) |
        for (@(_, RevVault) <- RevVaultCh) {
          contract withVaultAndIdentityOf(@pubKey, ret) = {
            new RevAddress(`rho:rev:address`), revAddrCh, vaultCh, deployerIdCh, authKeyCh in {
              getDeployerId!("deployerId", pubKey, *deployerIdCh) |
              RevAddress!("fromPublicKey", pubKey, *revAddrCh) |
              for (@revAddr <- revAddrCh) {
                @RevVault!("findOrCreate", revAddr, *vaultCh) |
                for (@(true, vault) <- vaultCh & deployerId <- deployerIdCh) {
                  @RevVault!("deployerAuthKey", *deployerId, *authKeyCh) |
                  for (@authKey <- authKeyCh) {
                    ret!(vault, authKey)
                  }
                }
              }
            }
          }
        }
      } |

      contract transfer(when, vault, @address, @amount, authKey, ret) = {
        for (_ <- when) {
          vault!("transfer", address, amount, *authKey, *ret)
        }
      } |

      rl!(`rho:lang:listOps`, *ListOpsCh) |
      for(@(_, ListOps) <- ListOpsCh) {

        contract assertBalances(when, @balances, rhoSpec, ret) = {
          for (_ <- when) {
            new assertBalance in {
              @ListOps!("foreach", balances, *assertBalance, *ret) |

              contract assertBalance(@(vault, expectedBalance), retCh) = {
                new balanceCh in {
                  @vault!("balance", *balanceCh) |
                  rhoSpec!("assert", (expectedBalance, "== <-", *balanceCh), "balance is as expected", *retCh)
                }
              }
            }
          }
        }

      }
    }
  }
}
