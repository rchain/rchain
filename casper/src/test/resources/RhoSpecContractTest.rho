//scalapackage coop.rchain.rholang

new rl(`rho:registry:lookup`),
    RhoSpecCh,
    setupHistoryCh,
    setup, teardown,
    stdlog(`rho:io:stdlog`),
    testSetup, testAssertEquals, testAssertNotEquals, testAssertTrue, testAssertMany,
    testAssertEqualsFromChannel, testAssertManyEqualsFromChannel,
    testAssertEqualsForVariables,  testMultipleAttempts,
    testAssertNotEqualsFromChannel,
    testSetupTeardown
in {
  setupHistoryCh!({"setups":[], "teardowns":[]}) |
  for(@(_, RhoSpec) <- rl!?(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`)) {
  @RhoSpec!("testSuite", *setup, *teardown,
    [
      ("setup runs correctly", *testSetup),
      ("assert equality", *testAssertEquals),
      ("assert non equality", *testAssertNotEquals),
      ("assert boolean conditions", *testAssertTrue),
      ("assert many conditions", *testAssertMany),
      ("assert '== <-'", *testAssertEqualsFromChannel),
      ("assert '!= <-'", *testAssertNotEqualsFromChannel),
      ("assertMany '== <-'", *testAssertManyEqualsFromChannel),
      ("run the test function multiple times", *testMultipleAttempts, 10),
      ("setup and teardown are called for each test", *testSetupTeardown),
    ])
  } |

  contract setup(returnCh, @testName) = {
    for (@setupHistory <- setupHistoryCh) {
      returnCh!("self value") |
      setupHistoryCh!(setupHistory.set("setups", setupHistory.get("setups") ++ [testName]))
    }
  } |

  contract teardown(ackCh, @testName, self) = {
    for (@setupHistory <- setupHistoryCh) {
      ackCh!(Nil) |
      setupHistoryCh!(setupHistory.set("teardowns", setupHistory.get("teardowns") ++ [testName]))
    }
  } |

  contract testSetup(ackCh, rhoSpec, self) = {
    rhoSpec ! (*ackCh, "assert",
      ("self value", "==", *self),
      "self should equal the value returned by testsuite setup",
      )
  } |

  contract testAssertEquals(ackCh, rhoSpec, self) = {
    rhoSpec !? ( "assert", ("abc", "==", "abc"), "strings should be equal");
    rhoSpec ! (*ackCh, "assert", (1, "==", 1), "ints should be equal")
  } |

  contract testAssertNotEquals(ackCh,  rhoSpec, self) = {
    stdlog ! ("info", "testing nonequality") |
    rhoSpec !? ("assert", ("abc", "!=", "xyz"), "strings should be not equal");
    rhoSpec ! ( *ackCh, "assert", (1, "!=", 0), "ints should not be equal")
  } |

  contract testAssertTrue(ackCh, rhoSpec, self) = {
    rhoSpec ! (*ackCh, "assert", true, "boolean assertions should work")
  } |

  contract testAssertMany(ackCh, rhoSpec, self) = {
    rhoSpec ! (*ackCh, "assertMany",
      [
        (true, "assert boolean"),
        ((1, "==", 1), "assert equals")
      ],
      )
  } |

  contract testAssertEqualsFromChannel(ackCh, rhoSpec, self) = {
    new ch in {
      ch ! (1) |
      rhoSpec!(*ackCh, "assert", (1, "== <-", *ch), "assert equals from channel")
    }
  } |

  contract testAssertNotEqualsFromChannel(ackCh, rhoSpec, self) = {
    stdlog ! ("info", "testing nonequality from channel") |
    new ch in {
      ch ! (1) |
      rhoSpec!(*ackCh, "assert", (0, "!= <-", *ch), "assert not equals from channel")
    }
  } |

  contract testAssertEqualsForVariables(ackCh, rhoSpec, self) = {
    new ch1, ch2 in {
      ch1 ! (1) | ch2 ! (1) |
      for (x <- ch1 & y <- ch2) {
        rhoSpec!(*ackCh, "assertMany",
          [
            ((*x, "==", *y), "assert var equals var"),
            ((*x, "==", 1), "assert var equals const"),
            ((1, "==", *x), "assert const equals var"),
          ]
          )
      }
    }
  } |

  contract testAssertManyEqualsFromChannel(ackCh, rhoSpec, self) = {
    new ch1, ch2 in {
      ch1 ! (1) |
      ch2 ! (2) |
      rhoSpec!(*ackCh, "assertMany",
        [
          ((1, "== <-", *ch1), "first assert"),
          ((2, "== <-", *ch2) , "second assert")
        ]
        )
    }
  } |

  contract testMultipleAttempts(ackCh, rhoSpec, self) = {
    rhoSpec!(*ackCh, "assert", true, "should always be successful", )
  } |

  contract testSetupTeardown(ackCh, rhoSpec, self) = {
    for(@setupHistory <- setupHistoryCh) {
      setupHistoryCh!(setupHistory) |
      rhoSpec!(*ackCh, "assertMany",
        [
          ((19, "==", setupHistory.get("setups").length()),
            "setups history should also include this test and also the one repeated 10 times (testMultipleAttempts)"),
          ((18, "==", setupHistory.get("teardowns").length()),
            "teardowns history should not include this test but includes the repeated ones")
        ],
        )
    }
  }
}
