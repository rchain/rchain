// WalletCheck: holds funds until a public key with the given hash is presented,
//     then creates a wallet with that public key and those funds.

// create: makes a wallet check
//
// bytearray hash: the hash of the public key
// Purse purse: the funds to put in the wallet
contract @["WalletCheck", "create"](@hash, @purse) = {
  new doneStore in {
    doneStore!(false) |
    
    // claims the wallet by presenting the preimage of the hash
    //
    // bytearray pubkey
    // name statusOut
    // bytearray sig: signature of [pubKey, statusOut]
    contract @hash(@[pubKey, statusOut], @sig) = {
      
      // Make sure the purse hasn't already been claimed
      for (@done <- doneStore) {
        if (done) {
          doneStore!(done) |
          @statusOut!([false, "Already claimed wallet"])
        } else {

          // Verify signature 
          new verifiedOut in {
            @"secp256k1Verify"!([pubKey, statusOut].toByteArray(), sig, pubKey, *verifiedOut) |
            for (@verified <- verifiedOut) {
              if (verified) {
                new hashOut in {

                  // Check that given pubKey is the preimage of hash
                  @"keccak256Hash"!(pubKey.toByteArray(), *hashOut) |
                  for (@pkHash <- hashOut) {
                    if (pkHash == hash) {
                      new walletOut in {

                        // Create the wallet
                        @"BasicWallet"!(purse, "secp256k1", pubKey, *walletOut) |

                        // Advertise the private name on a forgeable one
                        // TODO: This is completely insecure.  Once the
                        //   registry is done, use that.
                        for (@[wallet] <- walletOut) {
                          @pubKey!!(wallet) |
                        
                          // Return success
                          @statusOut!([true, wallet])
                        } |
                        
                        // All done
                        doneStore!(true)
                      }
                    } else {
                      doneStore!(done) |
                      @statusOut!([false, "Public key is not the preimage of hash"])
                    }
                  }
                }
              } else {
                doneStore!(done) |
                @statusOut!([false, "Signature verification failed"])
              }
            }
          }
        }
      }
    }
  }
}
