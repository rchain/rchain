//scalapackage coop.rchain.rholang.wallet

//assumes standard purse API from MakeMint
contract @"BasicWallet"(@purse, @algorithm, @pk, return) = {
  new cryptoVerifyCh in {
    match algorithm {
      "ed25519" => {
        cryptoVerifyCh!(["ed25519Verify"])
      }
      "secp256k1" => {
        cryptoVerifyCh!(["secp256k1Verify"])
      }
      _ => {
        cryptoVerifyCh!([])
      }
    } |
    for(@maybeCryptoVerify <- cryptoVerifyCh) {
      match maybeCryptoVerify {
        []             => { return!([]) }
        [cryptoVerify] => {
          new basicWallet, verify, nonceCh in {
            nonceCh!(-1) |
            contract verify(@nonce, @amount, @retCh, @sig, return) = {
              for(@prevNonce <- nonceCh) {
                if (nonce == (prevNonce + 1)) {
                  new result in {
                    @cryptoVerify!([nonce, amount, retCh].toByteArray(), sig.hexToBytes(), pk.hexToBytes(), *result) |
                    for(@r <- result) {
                      if (r) { nonceCh!(nonce) | return!(true) }
                      else { nonceCh!(prevNonce) | return!(false) }
                    }
                  }
                } else {
                  nonceCh!(prevNonce) | return!(false)
                }
              }
            } |
            contract @[*basicWallet, "getNonce"](return) = {
              for(@nonce <- nonceCh) {
                nonceCh!(nonce) | return!(nonce)
              }
            } |
            contract @[*basicWallet, "getBalance"](return) = {
              @[purse, "getBalance"]!(*return)
            } |
            contract @[*basicWallet, "deposit"](@amount, @src, success) = {
              @[purse, "deposit"]!(amount, src, *success)
            } |
            contract @[*basicWallet, "transfer"](@amount, @nonce, @sig, destination, status) = {
              new verifyResult in {
                verify!(nonce, amount, *destination, sig, *verifyResult) | for(@verified <- verifyResult) {
                  if (verified) { 
                    new splitResultCh in {
                      @[purse, "split"]!(amount, *splitResultCh) |
                      for(@splitResult  <- splitResultCh) {
                        match splitResult {
                          []        => { status!("Overdraft") }
                          [payment] => { destination!(payment) | status!("Success") }
                        }
                      }
                    }
                  } else { status!("Invalid signature or nonce") }
                }
              }
            } |
            return!([*basicWallet])
          }
        }
      }
    }
  }
}
