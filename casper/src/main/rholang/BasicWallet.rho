//scalapackage coop.rchain.rholang.wallet

//assumes standard purse API from MakeMint

//Registry info:
//  sk: 59ba0d3ff3e690290a78ab0916a90f0c155fdeeb644bb5d4bec9324c743d4ec1
//  pk: d72d0a7c0c9378b4874efbf871ae8089dd81f2ed3c54159fffeaba6e6fca4236
//  user == pk
//  timestamp: 1540214070797
//Resulting unforgable name: Unforgeable(0xce1fd2fa486cdd055a7da9b60f4a403cd579ee78baeaa3e6a186ca72e6b24fce)
//  ==> signature data == 2a3eaa013b0a0d2a0b10feffffffffffffffff010a2a5a280a243a220a20ce1fd2fa486cdd055a7da9b60f4a403cd579ee78baeaa3e6a186ca72e6b24fce1001
//  ==> signature == 8f7275d2d4506e2a8b84330157cecfc697c42f11b2c7261efca47d777d25c82a208077b948408bb5cbbff82242cd1a644496aae157b8650186a8ad93418a0a00
//URI derived from pk == `rho:id:3yicxut5xtx5tnmnneta7actof4yse3xangw4awzt8c8owqmddgyms`
new
  BasicWallet, rs(`rho:registry:insertSigned:ed25519`), uriOut
in {
  contract BasicWallet(purse, @algorithm, @pk, return) = {
    new cryptoVerifyCh in {
      match algorithm {
        "ed25519" => {
          cryptoVerifyCh!(["ed25519Verify"])
        }
        "secp256k1" => {
          cryptoVerifyCh!(["secp256k1Verify"])
        }
        _ => {
          cryptoVerifyCh!([])
        }
      } |
      for(@maybeCryptoVerify <- cryptoVerifyCh) {
        match maybeCryptoVerify {
          []             => { return!([]) }
          [cryptoVerify] => {
            new basicWallet, verify, nonceCh in {
              nonceCh!(-1) |
              contract verify(@nonce, @amount, @retCh, @sig, return) = {
                for(@prevNonce <- nonceCh) {
                  if (nonce == (prevNonce + 1)) {
                    new result, hashOut in {
                      @"blake2b256Hash"!([nonce, amount, retCh].toByteArray(), *hashOut) |
                      for(@hash <- hashOut) {
                        @cryptoVerify!(hash, sig.hexToBytes(), pk.hexToBytes(), *result) |
                        for(@r <- result) {
                          if (r) { nonceCh!(nonce) | return!(true) }
                          else { nonceCh!(prevNonce) | return!(false) }
                        }
                      }
                    }
                  } else {
                    nonceCh!(prevNonce) | return!(false)
                  }
                }
              } |
              contract basicWallet(@"getNonce", return) = {
                for(@nonce <- nonceCh) {
                  nonceCh!(nonce) | return!(nonce)
                }
              } |
              contract basicWallet(@"getBalance", return) = {
                purse!("getBalance", *return)
              } |
              contract basicWallet(@"deposit", @amount, @src, success) = {
                purse!("deposit", amount, src, *success)
              } |
              contract basicWallet(@"transfer", @amount, @nonce, @sig, destination, status) = {
                new verifyResult in {
                  verify!(nonce, amount, *destination, sig, *verifyResult) | for(@verified <- verifyResult) {
                    if (verified) { 
                      new splitResultCh in {
                        purse!("split", amount, *splitResultCh) |
                        for(@splitResult  <- splitResultCh) {
                          match splitResult {
                            []        => { status!("Overdraft") }
                            [payment] => { destination!(payment) | status!("Success") }
                          }
                        }
                      }
                    } else { status!("Invalid signature or nonce") }
                  }
                }
              } |
              return!([bundle+{*basicWallet}])
            }
          }
        }
      }
    }
  } |
  rs!(
    "d72d0a7c0c9378b4874efbf871ae8089dd81f2ed3c54159fffeaba6e6fca4236".hexToBytes(), 
    (9223372036854775807, bundle+{*BasicWallet}), 
    "8f7275d2d4506e2a8b84330157cecfc697c42f11b2c7261efca47d777d25c82a208077b948408bb5cbbff82242cd1a644496aae157b8650186a8ad93418a0a00".hexToBytes(), 
    *uriOut
  )
}
