//scalapackage coop.rchain.rholang.collection

//Requires ListOps
//Represents Either[A, B] as ("Left", A) or ("Right", B)

//Registry info:
//  sk: 7545b56525751bf79daa6cf3ee5757632ea6f37bfa61e93aafc4449d8510df9b
//  pk: 89a6d9c47f360e8ce145f8fe3c773786dc86bd0e70d19643d02b0eb126473c55
//  user == pk
//  timestamp: 1539794228064
//Resulting unforgable name: Either == Unforgeable(0x9521551b4a8ae2cf0ba83aaf6996652b81d6a83d70985bc6f16ac6eb35f2f2dd)
//  ==> signature data == 2a3eaa013b0a0d2a0b10feffffffffffffffff010a2a5a280a243a220a209521551b4a8ae2cf0ba83aaf6996652b81d6a83d70985bc6f16ac6eb35f2f2dd1001
//  ==> signature == 29c68a1d8e792eeaf88158cfcb9a6038ebdfea81c7193025c41f3f3b6731e53c3d593b8d773df11caee97d5933623eb9fa60992cab75b770cacfb873f6182c0a
//URI derived from pk == `rho:id:j6trahbxycumerwpr5qype7j43b7eqh8auebwsa9nn68if47gswh73`
new Either, rs(`rho:registry:insertSigned:ed25519`), uriOut, rl(`rho:registry:lookup`), ListOpsCh in {
  rl!(`rho:id:dputnspi15oxxnyymjrpu7rkaok3bjkiwq84z7cqcrx4ktqfpyapn4`, *ListOpsCh) |
  for(@(_, ListOps) <- ListOpsCh) {
    //Right-biased flatMap; f must also return an Either
    contract Either(@"flatMap", @either, f, return) = {
      match either {
        ("Right", value) => { f!(value, *return) }
        ("Left", _)      => { return!(either) }
      }
    } |

    //Right-biased map to transform an Either
    contract Either(@"map", @either, f, return) = {
      match either {
        ("Right", value) => {
          new mappedResultCh in {
            f!(value, *mappedResultCh) |
            for(@mappedResult <- mappedResultCh) {
              return!(("Right", mappedResult))
            }
          }
        }
        ("Left", _) => return!(either)
      }
    } |

    //Composes a list of functions returning Either into a
    //single result by using flatMap. Similar to following Scala code:
    //for {
    //  r0 <- Right(input)
    //  r1 <- f1(r0)
    //  r2 <- f2(r1)
    //  ...
    //} yield fn
    contract Either(@"compose", @input, @functions, return) = {
      new combinator in {
        contract combinator(@head, @accumulatedValue, return) = {
          Either!("flatMap", accumulatedValue, head, *return)
        } |
        @ListOps!("fold", functions, ("Right", input), *combinator, *return)
      }
    }
  } |
  
  rs!(
    "89a6d9c47f360e8ce145f8fe3c773786dc86bd0e70d19643d02b0eb126473c55".hexToBytes(), 
    (9223372036854775807, bundle+{*Either}), 
    "29c68a1d8e792eeaf88158cfcb9a6038ebdfea81c7193025c41f3f3b6731e53c3d593b8d773df11caee97d5933623eb9fa60992cab75b770cacfb873f6182c0a".hexToBytes(), 
    *uriOut
  )
}
