/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = 867c21c6a3245865444d80e49cac08a1c11e23b35965b566bbe9f49bb9897511
 2.  |            | given              | timestamp = 1559156082324
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 040126690519dc9b0f52876cb13458e15697794dd87d7c6477707c7efa4cce8a36b634eab5056bd4e3ba385ab14a638e4ac7d3b3e4968da3d66933fc04bc7038b5
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x95fcdae5d4db7cf5aa0022bf6dba3f7c21b506fed8f3f4698a570d048ea758bd)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x95fcdae5d4db7cf5aa0022bf6dba3f7c21b506fed8f3f4698a570d048ea758bd) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a2095fcdae5d4db7cf5aa0022bf6dba3f7c21b506fed8f3f4698a570d048ea758bd1001
 8.  | 7, 1,      | secp256k1          | sig = 3045022100dc97997d235773957dc6610491441707c64f9f23efeee6fb6ba8ac04003cd1d302201aa4cfd144dfc866d7c92673dddaa86436609c4df61a8a512ac2dd34e131b3ee
 9.  | 4,         | registry           | uri = rho:id:6fzorimqngeedepkrizgiqms6zjt76zjeciktt1eifequy4osz35ks
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new
  ListOps,
  rs(`rho:registry:insertSigned:secp256k1`),
  uriOut,
  deployerID(`rho:rchain:deployerId`)
in {
  contract ListOps(@"prepend", @head, @tail, return) = {
    return!([head] ++ tail)
  } |

  contract ListOps(@"append", @list, @element, return) = {
    return!(list ++ [element])
  } |

  // A fold over the list which breaks early if a condition is met.
  // Both the condition and combinator are combined into a single
  // function which returns a [boolean, value] pair.
  // Use cases: see get and indexOf
  new loop in {
    contract loop(@accumulatedValue, @lst, combinatorAndCondition, return) = {
      match lst {
        [head ...tail] => {
          new result in {
            combinatorAndCondition!(head, accumulatedValue, *result) |
            for (@done, @newValue <- result) {
              if (done){ return!(done, newValue) }
              else     { loop!(newValue, tail, *combinatorAndCondition, *return)   }
            }
          }
        }
        _ => { return!(false, accumulatedValue) }
      }
    } | 
    contract ListOps(@"partialFold", @list, @start, combinatorAndCondition, return) = {
      loop!(start, list, *combinatorAndCondition, *return)
    }
  } |

  // A fold over the list which breaks early if a condition is met.
  // Both the condition and combinator are are combined into a single
  // function which returns a [boolean, value] pair.
  // Use cases: see get and indexOf
  new loop in {
    contract loop(@accumulatedValue, @lst, combinatorAndCondition, @state, return) = {
      match lst {
        [head ...tail] => {
          new result in {
            combinatorAndCondition!(state, head, accumulatedValue, *result) |
            for (@done, @newValue <- result) {
              if (done){ return!(done, newValue) }
              else     { loop!(newValue, tail, *combinatorAndCondition, state, *return)   }
            }
          }
        }
        _ => { return!(false, accumulatedValue) }
      }
    } | 
    contract ListOps(@"partialFoldClean", @list, @start, combinatorAndCondition, @state, return) = {
      loop!(start, list, *combinatorAndCondition, state, *return)
    }
  } |

  contract ListOps(@"fold", @list, @start, combinator, return) = {
    new combinatorAndCondition in {
      contract combinatorAndCondition(@head, @accumulatedValue, return) = {
        new result in {
          combinator!(head, accumulatedValue, *result) |
          for(@r <- result){ return!(false, r) }
        }
      } |
      new result in {
        ListOps!("partialFold", list, start, *combinatorAndCondition, *result) |
        for(_, @value <- result) {
          return!(value)
        }
      }
    }
  } |

  new combinatorAndCondition in {
    contract combinatorAndCondition(@(combinator, state), @head, @accumulatedValue, return) = {
      new result in {
        @combinator!(state, head, accumulatedValue, *result) |
        for(@r <- result){ return!(false, r) }
      }
    } |
    contract ListOps(@"foldClean", @list, @start, combinator, @state, return) = {
      new result in {
        ListOps!("partialFoldClean", list, start, *combinatorAndCondition, (*combinator, state), *result) |
        for(_, @value <- result) {
          return!(value)
        }
      }
    }
  } |

  new prepend in {
    contract prepend(_, @head, @tail, return) = {
      return!([head] ++ tail)
    } |
    contract ListOps(@"reverse", @list, return) = {
      ListOps!("foldClean", list, [], *prepend, Nil, *return)
    }
  } |

  contract ListOps(@"map", @list, function, return) = {
    new combinator in {
      contract combinator(@head, @accumulatedValue, return) = {
        new mappedHead in {
          function!(head, *mappedHead) |
          for(@x <- mappedHead) {
            return!(accumulatedValue ++ [x])
          }
        }
      } |
      ListOps!("fold", list, [], *combinator, *return)
    }
  } |

  new combinator in {
    contract combinator(@(function, state), @head, @accumulatedValue, return) = {
      new mappedHead in {
        @function!(state, head, *mappedHead) |
        for(@x <- mappedHead) {
          return!(accumulatedValue ++ [x])
        }
      }
    } |
    contract ListOps(@"mapClean", @list, function, @state, return) = {
      ListOps!("foldClean", list, [], *combinator, (*function, state), *return)
    }
  } |

  new getOutput in {
    contract getOutput(name, ret)  = { for(@result <- name){ ret!(result) } } |
    contract ListOps(@"parMap", @list, function, return) = {
      new namesListCh, startProcess in {
        contract startProcess(@x, ret) = { new outCh in { function!(x, *outCh) | ret!(*outCh) } } |
        // map each element to a name listening for the result of the function
        ListOps!("map", list, *startProcess, *namesListCh) |
        for(@namesList <- namesListCh) {
          // map each name to its result
          ListOps!("map", namesList, *getOutput, *return)
        }
      }
    }
  } |

  new getOutput, startProcess in {
    contract getOutput(_, name, ret)  = { for(@result <- name){ ret!(result) } } |
    contract startProcess(@(function, state), @x, ret) = {
        @function!(state, x, *ret)
    } |
    contract ListOps(@"parMapClean", @list, function, @state, return) = {
      new namesListCh in {
        // map each element to a name listening for the result of the function
        ListOps!("mapClean", list, *startProcess, (*function, state), *namesListCh) |
        for(@namesList <- namesListCh) {
          // map each name to its result
          ListOps!("mapClean", namesList, *getOutput, Nil, *return)
        }
      }
    }
  } |

  new mapLoop in {
    contract mapLoop(@l, @count, function, collect, startCount)= {
      match l {
        [hd ...tl] => {
          function!(hd, *collect) | 
          mapLoop!(tl, count + 1, *function, *collect, *startCount)
        }
        _  => { startCount!(count) }
      }
    } |

    contract ListOps(@"unorderedParMap", @list, function, return) = {
      new collect, startCount, completeCount, accCh in {
        // Spawn processes, each computing one element
        // also processes listening for the result
        // add a result to our accumulating list
        contract collect(@result) = {
          for(@sc <- startCount) {
            for (@cc <- completeCount) {
              for (@acc <- accCh) {
                startCount!(sc) |
                if (sc == cc + 1) { // all started processes completed!
                  return!([result] ++ acc)
                } else {            // still waiting on some
                  completeCount!(cc + 1) |
                  accCh!([result] ++ acc)
                }
              }
            }
          }
        } |
        match list {
          [] => { return!([]) }
          _  => { mapLoop!(list, 0, *function, *collect, *startCount) | completeCount!(0) | accCh!([]) }
        }
      }
    }
  } |

  new mapLoop in {
    contract mapLoop(@l, @count, function, @state, collect, startCount)= {
      match l {
        [hd ...tl] => {
          function!(state, hd, *collect) | 
          mapLoop!(tl, count + 1, *function, state, *collect, *startCount)
        }
        _  => { startCount!(count) }
      }
    } |

    contract ListOps(@"unorderedParMapClean", @list, function, @state, return) = {
      new collect, startCount, completeCount, accCh in {
        // Spawn processes, each computing one element
        // also processes listening for the result
        // add a result to our accumulating list
        contract collect(@result) = {
          for(@sc <- startCount) {
            for (@cc <- completeCount) {
              for (@acc <- accCh) {
                startCount!(sc) |
                if (sc == cc + 1) { // all started processes completed!
                  return!([result] ++ acc)
                } else {            // still waiting on some
                  completeCount!(cc + 1) |
                  accCh!([result] ++ acc)
                }
              }
            }
          }
        } |
        match list {
          [] => { return!([]) }
          _  => { mapLoop!(list, 0, *function, state, *collect, *startCount) | completeCount!(0) | accCh!([]) }
        }
      }
    }
  } |

  contract ListOps(@"foreach", @list, proc, isDone) = {
    new combinator, nilReturn in {
      contract combinator(@head, @accumulatedValue, return) = {
        // Need return flag from `proc` in order to guarantee execution order
        new isDone in { proc!(head, *isDone) | for(_ <- isDone){ return!(Nil) } }
      } |
      ListOps!("fold", list, Nil, *combinator, *nilReturn) | for(_ <- nilReturn){ isDone!(true) }
    }
  } |

  new combinator in {
    contract combinator(@(proc, state), @head, @accumulatedValue, return) = {
      // Need return flag from `proc` in order to guarantee execution order
      new isDone in { @proc!(state, head, *isDone) | for(_ <- isDone){ return!(Nil) } }
    } |
    contract ListOps(@"foreachClean", @list, proc, @state, isDone) = {
      new nilReturn in {
        ListOps!("foldClean", list, Nil, *combinator, (*proc, state), *nilReturn) | for(_ <- nilReturn){ isDone!(true) }
      }
    }
  } |

  new combinatorAndCondition in {
    contract combinatorAndCondition(@value, @head, @accumulatedValue, return) = {
      return!(head == value, accumulatedValue + 1)
    } |
    contract ListOps(@"indexOf", @list, @value, return) = {
      new result in {
        ListOps!("partialFoldClean", list, -1, *combinatorAndCondition, value, *result) |
        for(@valueFound, @i <- result) {
          if (valueFound) { return!(i)  }
          else            { return!(-1) }
        }
      }
    }
  } |

  new loop in {
    contract loop(@pair, @acc, return) = {
      match pair {
        ([h1 ...t1], [h2 ...t2]) => {
          loop!((t1, t2), acc ++ [(h1, h2)], *return)
        }
        _ => {
          return!(acc)
        }
      }
    } |
    contract ListOps(@"zip", @list1, @list2, return) = {
      loop!((list1, list2), [], *return)
    }
  } |

  new loop in {
    contract loop(@start, @i, @list, return) = {
      if(i < start) {
        return!(list)
      } else {
        loop!(start, i - 1, [i] ++ list, *return)
      }
    } |
    contract ListOps(@"range", @start, @end, return) = {
      loop!(start, end - 1, [], *return)
    }
  } |

  contract ListOps(@"forall", @list, predicate, returnCh) = {
    new combine, resultCh in {
      ListOps!("partialFold", list, true, *combine, *resultCh) |
      contract combine(@item, @acc, accResultCh) = {
        new predResultCh in {
          predicate!(item, *predResultCh) |
          for (@isSatisfied <- predResultCh) {
            accResultCh!(not isSatisfied, isSatisfied)
          }
        }
      } |

      for (_, @result <- resultCh) {
        returnCh!(result)
      }
    }
  } |

  new combine in {
    contract combine(@(predicate, state), @item, @acc, accResultCh) = {
      new predResultCh in {
        @predicate!(state, item, *predResultCh) |
        for (@isSatisfied <- predResultCh) {
          accResultCh!(not isSatisfied, isSatisfied)
        }
      }
    } |
    contract ListOps(@"forallClean", @list, predicate, @state, returnCh) = {
      new resultCh in {
        ListOps!("partialFoldClean", list, true, *combine, (*predicate, state), *resultCh) |

        for (_, @result <- resultCh) {
          returnCh!(result)
        }
      }
    }
  } |

  contract ListOps(@"exists", @list, predicate, returnCh) = {
    new combine, resultCh in {
      ListOps!("partialFold", list, false, *combine, *resultCh) |
      contract combine(@item, @acc, accResultCh) = {
        new predResultCh in {
          predicate!(item, *predResultCh) |
          for (@isSatisfied <- predResultCh) {
            accResultCh!(isSatisfied, isSatisfied)
          }
        }
      } |

      for (_, @result <- resultCh) {
        returnCh!(result)
      }
    }
  } |

  new combine in {
    contract combine(@(predicate, state), @item, @acc, accResultCh) = {
      new predResultCh in {
        @predicate!(state, item, *predResultCh) |
        for (@isSatisfied <- predResultCh) {
          accResultCh!(isSatisfied, isSatisfied)
        }
      }
    } |
    contract ListOps(@"existsClean", @list, predicate, @state, returnCh) = {
      new resultCh in {
        ListOps!("partialFoldClean", list, false, *combine, (*predicate, state), *resultCh) |

        for (_, @result <- resultCh) {
          returnCh!(result)
        }
      }
    }
  } |

  new sum in {
    contract sum(_, @n, @acc, resultCh) = { resultCh!(n + acc) } |
    contract ListOps(@"sum", @list, returnCh) = {
      ListOps!("foldClean", list, 0, *sum, Nil, *returnCh)
    }
  } |

  contract ListOps(@"filter", @list, predicate, returnCh) = {
    new reverseCh, accumulate in {
      ListOps!("reverse", list, *reverseCh) |
      for (@reversed <- reverseCh) {
        ListOps!("fold", reversed, [], *accumulate, *returnCh) |
        contract accumulate(@x, @acc, resultCh) = {
          new predicateResultCh in {
            predicate!(x, *predicateResultCh) |
            for (@matchesPredicate <- predicateResultCh) {
              if (matchesPredicate) {
                resultCh!([x] ++ acc)
              } else {
                resultCh!(acc)
              }
            }
          }
        }
      }
    }
  } |

  new accumulate in {
    contract accumulate(@(predicate, state), @x, @acc, resultCh) = {
      new predicateResultCh in {
        @predicate!(state, x, *predicateResultCh) |
        for (@matchesPredicate <- predicateResultCh) {
          if (matchesPredicate) {
            resultCh!([x] ++ acc)
          } else {
            resultCh!(acc)
          }
        }
      }
    } |
    contract ListOps(@"filterClean", @list, predicate, @state, returnCh) = {
      new reverseCh in {
        ListOps!("reverse", list, *reverseCh) |
        for (@reversed <- reverseCh) {
          ListOps!("foldClean", reversed, [], *accumulate, (*predicate, state), *returnCh)
        }
      }
    }
  } |

  rs!(
    (9223372036854775807, bundle+{*ListOps}),
    *deployerID,
    *uriOut
  )
}
