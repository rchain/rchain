/*
 The table below describes the required computations and their dependencies
 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = de19d53f28d4cdee74bad062342d8486a90a652055f3de4b2efa5eb2fccc9d53
 2.  |            | given              | timestamp = 1559156452968
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 0470256c078e105d2958b9cf66f2161d83368f483c0219790277fb726a459be7f56a9a48bbecf72bcaed6a3515bd0a144faf6a6a8de8f6c9b3b7dff297eb371f28
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x10d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e11)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x10d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e11) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a2010d4824180800daef356857cffca4f51471960b92711df0fd3c3425401149e111001
 8.  | 7, 1,      | secp256k1          | sig = 304402202fa3b242149821b91b35b058faa3943efdd5ce938cb8c6873a4cb5b2694ed53202200a7a443b29411e659806b1c8e1583eec1e0404b218d43f45fef6a3c418326649
 9.  | 4,         | registry           | uri = rho:id:asysrwfgzf8bf7sxkiowp4b3tcsy4f8ombi3w96ysox4u3qdmn1wbc
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new
  MakeMint, rs(`rho:registry:insertSigned:secp256k1`), uriOut,
  rl(`rho:registry:lookup`), NonNegativeNumberCh
in {
  rl!(`rho:lang:nonNegativeNumber`, *NonNegativeNumberCh) |
  for(@(_, NonNegativeNumber) <- NonNegativeNumberCh) {
    contract MakeMint(return) = {
      new thisMint, internalMakePurse, decr in {
        contract thisMint(@"makePurse", @init, return) = {
          new balanceCh in {
            @NonNegativeNumber!(init, *balanceCh) |
            for(@balance <- balanceCh) {
              internalMakePurse!(balance, *return)
            }
          }
        } |
        contract internalMakePurse(balance, return) = {
          //balance must be a name that NonNegativeNumber contract is listening on
          new thisPurse, logStore in {
            logStore!(Nil) |
            new letCh in { // let thisDecr = ...
              letCh!(bundle0{bundle0{*thisPurse}|*decr}) |
              for (thisDecr <- letCh) {
                // Checks mint and either decreases the balance of this purse by the given amount and returns true or
                // doesn't not decrease and returns false.
                contract thisPurse(@=*thisDecr, @amount, return) = {
                  new success, thisPurseDecrCh, decrCh,
                      bd(`rho:block:data`), bdCh
                  in {
                    // Checks that this purse has been provided with the correct decr.
                    decrCh!(bundle0{*decr}) |
                    thisPurse!("decr", *thisPurseDecrCh) |
                    for (@thisPurseDecr <- thisPurseDecrCh;
                         @decrBundle    <- decrCh) {
                      for (logCh <<- logStore) {
                        if (thisPurseDecr == decrBundle) {
                          // Correct mint.
                          // Calls "sub" method on balance in the NonNegativeNumber contract.
                          balance!("sub", amount, *success) |
                          for (@subOk <- success) {
                            return!(subOk) |
                            if (Nil != *logCh) {
                              bd!(*bdCh) |
                              for (@blockNumber, @timestamp, @sender <- bdCh) {
                                logCh!(["*decr", amount, subOk, blockNumber, timestamp, sender])
                              }
                            }
                          }
                        } else {
                          // Incorrect mint.
                          return!(false) |
                          if (Nil != *logCh) {
                            bd!(*bdCh) |
                            for (@blockNumber, @timestamp, @sender <- bdCh) {
                              logCh!(["*decr", amount, false, blockNumber, timestamp, sender])
                            }
                          }
                        }
                      }
                    }
                  }
                } |
                // Used to compare mints. The name decr cannot be exposed, but is needed to check equality with other mints.
                contract thisPurse(@"decr", return) = {
                  return!(bundle0{*decr})
                }
              }
            } |
            contract thisPurse(@"getBalance", return) = { balance!("value", *return) } |
            contract thisPurse(@"sprout", return) = { thisMint!("makePurse", 0, *return) } |
            contract thisPurse(@"split", @amount, return) = {
              new destPurseCh, successCh in {
                thisPurse!("sprout", *destPurseCh) |
                for (@destPurse <- destPurseCh) {
                  @destPurse!("deposit", amount, *thisPurse, *successCh) |
                  for (@success <- successCh) {
                    if (success) {
                      return!([destPurse])
                    } else {
                      return!([])
                    }
                  }
                }
              }
            } |
            contract thisPurse(@"deposit", @amount, @src, success) = {
              new result, addSuccessCh, thisDecrCh, srcDecrCh in {
                // Checks if mints match.
                thisPurse!("decr", *thisDecrCh) |
                @src!("decr", *srcDecrCh) |
                for (@thisDecr <- thisDecrCh;
                     @srcDecr  <- srcDecrCh) {
                  for (logCh <<- logStore) {
                    new bd(`rho:block:data`), bdCh in {
                      if (thisDecr == srcDecr) {
                        // Adds amount to this purse if same mint.
                        // Checks balance of this purse after adding amount to it to make sure an overflow did not occur.
                        balance!("add", amount, *addSuccessCh) |
                        for (@addSuccess <- addSuccessCh) {
                          if (addSuccess) {
                            // No overflow occurred.
                            @src!(bundle0{bundle0{src}|*decr}, amount, *result) | //call src decr function.
                            for (@decrSuccess <- result) {
                              if (decrSuccess) {
                                // Proper authority to subtract amount from src, amount subtracted from src.
                                success!(true)
                              } else {
                                // Insufficient funds in src purse.
                                // The amount must now be subtracted from this purse.
                                new subCh in {
                                  balance!("sub", amount, *subCh) |
                                  for (_ <- subCh) {
                                    success!(false)
                                  }
                                }
                              }
                            }
                          } else {
                            // Failed to add funds to this purse due to overflow or negative amount.
                            success!(false)
                          }
                        }
                      } else {
                        // Mint mismatch. No transfer occurs.
                        success!(false)
                      }
                    }
                  }
                }
              }
            } |
            return!(bundle+{*thisPurse})
          }
        } |
        return!(bundle+{*thisMint})
      }
    }
  } |
  rs!(
    "0470256c078e105d2958b9cf66f2161d83368f483c0219790277fb726a459be7f56a9a48bbecf72bcaed6a3515bd0a144faf6a6a8de8f6c9b3b7dff297eb371f28".hexToBytes(),
    (9223372036854775807, bundle+{*MakeMint}),
    "304402202fa3b242149821b91b35b058faa3943efdd5ce938cb8c6873a4cb5b2694ed53202200a7a443b29411e659806b1c8e1583eec1e0404b218d43f45fef6a3c418326649".hexToBytes(),
    *uriOut
  )
}