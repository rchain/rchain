// The table below describes the required computations and their dependencies
//
// No. | Dependency | Computation method | Result
// ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
// 1.  |            | given              | sk = be8ae000e4d2f29c73f792705314d71b6c0d56d7c640c6b4df9fabf90518c623
// 2.  |            | given              | timestamp = 1551879405043
// 3.  |            | lastNonce          | nonce = 9223372036854775807
// 4.  | 1,         | ed25519            | pk = f59e613088fd7e2e8a371b5115701f3a4f53f35ea6f60433923153ee7fbf83fd
// 5.  | 4, 2,      | genIds             | uname = Unforgeable(0x5df3b04a7cc9aaa9dad1afa7b9bc9b1df9d6ccc76c5dff3c4d2d89b1ba6a3e8b)
// 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0x5df3b04a7cc9aaa9dad1afa7b9bc9b1df9d6ccc76c5dff3c4d2d89b1ba6a3e8b) })
// 7.  | 6,         | protobuf           | toSign = 2a3eaa013b0a0d2a0b10feffffffffffffffff010a2a5a280a243a220a205df3b04a7cc9aaa9dad1afa7b9bc9b1df9d6ccc76c5dff3c4d2d89b1ba6a3e8b1001
// 8.  | 7, 1,      | ed25519            | sig = cd16cb789f128767d2d1224b931d0d5d47dce130266c72839d09d38bc9070a365234e0d9cce4a04e7ac4a1648db1b2ec1ba55751d0ead2c465dbfb55a5d13f01
// 9.  | 4,         | registry           | uri = rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z
// ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
new
  RevVault, rs(`rho:registry:insertSigned:ed25519`), uriOut,
  rl(`rho:registry:lookup`), RevAddress(`rho:rev:address`), MakeMintCh, AuthKeyCh, EitherCh,
  _getIdentity,
  _makeVault,
  _newVault,
  _getOrCreate,
  _revVault,
  stdout(`rho:io:stdout`)
in {
  rl!(`rho:id:exunyijimapk7z43g3bbr69awqdz54kyroj9q43jgu3dh567fxsftx`, *MakeMintCh) |
  rl!(`rho:id:4njqcsc65mt8xrfx9nsz7je7oucgywgd1tj1n1gjtw3ndsophyisro`, *AuthKeyCh) |
  rl!(`rho:id:j6trahbxycumerwpr5qype7j43b7eqh8auebwsa9nn68if47gswh73`, *EitherCh) |
  for(@(_, MakeMint) <- MakeMintCh; @(_, AuthKey) <- AuthKeyCh; @(_, Either) <- EitherCh) {

    new mintCh, vaultMapStore in {
      vaultMapStore!({}) |
      @MakeMint!(*mintCh) |
      for (mint <- mintCh) {

        contract RevVault(@"deployerAuthKey", ret) = {

          new deployerPubKeyBytesCh in {
            _getIdentity!(*deployerPubKeyBytesCh) |
            for (@deployerPubKeyBytes <- deployerPubKeyBytesCh) {

              new RevAddress(`rho:rev:address`), revAddrCh in {
                RevAddress!("fromPublicKey", deployerPubKeyBytes, *revAddrCh)|
                for (@deployerRevAddress <- revAddrCh) {

                  @AuthKey!("make", (*_revVault, deployerRevAddress), *ret)
                }
              }
            }
          }
        } |

        contract _getIdentity(retCh) = {
          new getDeployData(`rho:deploy:params`), ch in {
            getDeployData ! (*ch) |
            for (_, _, @userId, _ <- ch) {
              retCh ! (userId)
            }
          }
        } |

        //FIXME remove this, create standard vaults instead and do a `_deposit` to them somehow
        contract RevVault(@"findOrCreateGenesisVault", @ownerRevAddress, @initialAmount, ret) = {
          new findOrCreateGenesisVault in {
            _getOrCreate!(ownerRevAddress, *findOrCreateGenesisVault, *ret) |
            for (retCh <- findOrCreateGenesisVault) {

              _makeVault!(ownerRevAddress, initialAmount, *retCh)
            }
          }
        } |

        contract RevVault(@"findOrCreate", @ownerRevAddress, ret) = {

          new createVault in {
            _getOrCreate!(ownerRevAddress, *createVault, *ret) |
            for (retCh <- createVault) {

              _makeVault!(ownerRevAddress, 0, *retCh)
            }
          }
        } |

        contract _getOrCreate(@revAddress, constructor, retCh) = {
          new revAddressValidCh, revAddressValidEitherCh, getOrCreate in {
            RevAddress!("validate", revAddress, *revAddressValidCh) |
            @Either!("fromNillableError <-", *revAddressValidCh, *revAddressValidEitherCh) |
            @Either!("flatMap <-", *revAddressValidEitherCh, *getOrCreate, *retCh) |
            for (_, ret <- getOrCreate; @vaultMap <- vaultMapStore) {
              match vaultMap.get(revAddress) {
                Nil => {
                  new resCh in {
                    constructor!(*resCh) |
                    for (@eitherVault <- resCh) {
                      match eitherVault {
                        (true, vault) => vaultMapStore!(vaultMap.set(revAddress, vault))
                        (false,  _    ) => vaultMapStore!(vaultMap)
                      } |
                      ret!(eitherVault)
                    }
                  }
                }
                value => {
                  vaultMapStore!(vaultMap) | ret!((true, value))
                }
              }
            }
          }
        } |

        contract _makeVault(@ownerRevAddress, @initialAmount, ret) = {

          new revAddrCh, eitherRevAddrCh, purseCh, eitherPurseCh in {
            @Either!("fromNillable", ownerRevAddress, "Required `revAddress` parameter was Nil", *eitherRevAddrCh) |
            mint!("makePurse", initialAmount, *purseCh) |
            @Either!("fromNillable <-", *purseCh, "Couldn't create purse", *eitherPurseCh) |
            @Either!("map2 <-", *eitherRevAddrCh, *eitherPurseCh, *_newVault, *ret)
          }

        } |

        contract _newVault(@ownRevAddress, purse, ret) = {
          new revVault in {

            ret!(bundle+{*revVault}) |

            contract revVault(@"balance", ret) = {
              purse!("getBalance", *ret)
            } |

            contract revVault(@"transfer", @revAddress, @amount, authKey, ret) = {

              new
                revAddressValid, revAddressValidEither, amountNonNegative,
                authKeyValidCh, authKeyValidEitherCh,
                parametersOkCh, parametersAndAuthOkCh,
                split, eitherPurseCh, doDeposit
              in {
                RevAddress!("validate", revAddress, *revAddressValid) |
                @Either!("fromNillableError <-", *revAddressValid, *revAddressValidEither) |

                @Either!("fromBoolean", amount >= 0, "Amount must be non-negative", *amountNonNegative) |

                @AuthKey!("check", *authKey, (*_revVault, ownRevAddress), *authKeyValidCh) |
                @Either!("fromBoolean <-", *authKeyValidCh, "Invalid AuthKey", *authKeyValidEitherCh) |

                @Either!("productR <-", *revAddressValidEither, *amountNonNegative, *parametersOkCh) |
                @Either!("productR <-", *parametersOkCh, *authKeyValidEitherCh, *parametersAndAuthOkCh) |

                @Either!("flatMap <-", *parametersAndAuthOkCh, *split, *eitherPurseCh) |
                for (_, retCh <- split) {
                  new amountPurseCh in {
                    purse!("split", amount, *amountPurseCh) |
                    @Either!("fromSingletonList <-", *amountPurseCh, "Insufficient funds", *retCh)
                  }
                } |

                @Either!("flatMap <-", *eitherPurseCh, *doDeposit, *ret) |
                for (@p, retCh <- doDeposit) {
                  @{revAddress | bundle0{*_revVault}}!("_deposit", p, *retCh)
                }
              }

            } |

            contract @{ownRevAddress | bundle0{*_revVault}}(@"_deposit", depositPurse, retCh) = {

              new amountCh, depositSuccessCh in {
                depositPurse!("getBalance", *amountCh) |
                for (@amount <- amountCh) {

                  purse!("deposit", amount, *depositPurse, *depositSuccessCh) |
                  @Either!("fromBoolean <-", *depositSuccessCh, "BUG FOUND: purse deposit failed", *retCh)
                }
              }
            }
          }
        } |

        new mkCoopVault in {
          contract mkCoopVault(@pk, @initialAmount) = {
            new makeVaultCh, addressCh, ret in {
              RevAddress!("fromPublicKey", pk.hexToBytes(), *addressCh) |
              for( @address <- addressCh) {
                _getOrCreate!(address, *makeVaultCh, Nil) |
                for (ch <- makeVaultCh) {
                  _makeVault!(address, initialAmount, *ch)
                }
              }
            }
          } |

          mkCoopVault!("d407b6f7dce3b2c17b68a9299f51ad9f0de7e7212437deac393922231a712986", 9223372036854775807) |
          mkCoopVault!("0f4286a44125158b3c3eadb075cf0d41feb10bffb7365e523f99426641772348", 9223372036854775807) |
          mkCoopVault!("748e1fcb5b3763fd45158338f1974b6b9762e1a266e021dc45641d521161215c", 9223372036854775807) |
          mkCoopVault!("349b1465e1ee14548cf29e2edff7bc41da9eae8c47b3b59d7bb7ce08010f0b7d", 9223372036854775807)
        } |

        rs!(
          "f59e613088fd7e2e8a371b5115701f3a4f53f35ea6f60433923153ee7fbf83fd".hexToBytes(),
          (9223372036854775807, bundle+{*RevVault}),
          "cd16cb789f128767d2d1224b931d0d5d47dce130266c72839d09d38bc9070a365234e0d9cce4a04e7ac4a1648db1b2ec1ba55751d0ead2c465dbfb55a5d13f01".hexToBytes(),
          *uriOut
        )

      }
    }
  }
}
