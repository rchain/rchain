new _registryStore,
    lookupCh,
    bootstrapLookup(`rho:registry:lookup`),
    insertArbitraryCh,
    bootstrapInsertArbitrary(`rho:registry:insertArbitrary`),
    insertSignedCh,
    bootstrapInsertSigned(`rho:registry:insertSigned:secp256k1`),
    buildUri,
    ops(`rho:registry:ops`),
    secpVerify(`rho:crypto:secp256k1Verify`),
    blake2b256(`rho:crypto:blake2b256Hash`),
    TreeHashMap
in {
  // TreeHashMap is defined here because the registry uses it internally.
  // We can't define it in another file like MakeMint or NonNegativeNumber because
  // that method assumes the registry already exists.
  //
  // Rholang map desiderata: speedy insert & lookup,  no conflicts on lookup, no conflicts on inserts to different keys
  // This implementation: O(log n) insert & lookup; also provides O(1) lookup when it is known that the value at a key exists.
  // Conflict analysis
  //   Lookup
  //     When looking up a value, only peeks are used, so lookups will not conflict.
  //   Insert
  //     When inserting, only peeks are used on existing nodes (except the last
  //     shared one in the path), while newly created nodes have a different name.
  //     So there's conflict only if the keys share a common prefix that hadn't
  //     already been populated.
  // Usage
  // new o(`rho:io:stdout`), mapCh in {
  //   o!("Initializing map") |
  //   // Use 3 * 8 = 24 bits of parallelization
  //   TreeHashMap!("init", 3, *mapCh) |
  //   for (@map <- mapCh) {
  //     o!("Map initialized, setting") |
  //     new ret1, ret2, ret3, ret4, ret5, ret6, ret7 in {
  //       TreeHashMap!("set", map, "some key", "some val", *ret1) |
  //       TreeHashMap!("set", map, "monkey", "some other val", *ret2) |
  //       TreeHashMap!("set", map, "donkey", Nil, *ret3) |
  //       for (_ <- ret1; _ <- ret2; _ <- ret3) {
  //         o!("Value set, getting") |
  //         TreeHashMap!("get", map, "some key", *ret1) |             // "some val"
  //         TreeHashMap!("fastUnsafeGet", map, "monkey", *ret2) |     // "some other val"
  //         TreeHashMap!("get", map, "some unused key", *ret3) |      // Nil
  //         TreeHashMap!("fastUnsafeGet", map, "donkey", *ret4) |     // Nil
  //         TreeHashMap!("contains", map, "donkey", *ret5) |          // true
  //         TreeHashMap!("contains", map, "monkey", *ret6) |          // true
  //         TreeHashMap!("contains", map, "some unused key", *ret7) | // false
  //         for (@val1 <- ret1; @val2 <- ret2; @val3 <- ret3; @val4 <- ret4; @val5 <- ret5; @val6 <- ret6; @val7 <- ret7) {
  //           o!(["Got these from the map: ", val1, val2, val3, val4, val5, val6, val7])
  //         }
  //       }
  //     }
  //   }
  // }
  new
    MakeNode,
    ByteArrayToNybbleList,
    TreeHashMapSetter,
    TreeHashMapGetter,
    TreeHashMapContains,
    TreeHashMapUpdater,
    powersCh,
    storeToken,
    nodeGet
  in {
    match [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536] {
      powers => {
        // Initializes `node` with `initVal`
        contract MakeNode(@initVal, @node) = {
          @[node, *storeToken]!(initVal)
        } |
        // Peeks the value stored on `node` and returns it on `ret`
        contract nodeGet(@node, ret) = {
          for (@val <<- @[node, *storeToken]) {
            ret!(val)
          }
        } |
        // Converts the byte array `ba` into a nybble list and returns it on `ret`
        contract ByteArrayToNybbleList(@ba, @n, @len, @acc, ret) = {
          if (n == len) {
            ret!(acc)
          } else {
            ByteArrayToNybbleList!(ba, n + 1, len, acc ++ [ ba.nth(n) % 16, ba.nth(n) / 16 ], *ret)
          }
        } |
        // Initializes the TreeHashMap with given `depth` and returns it on `ret`
        contract TreeHashMap(@"init", @depth, ret) = {
          new map in {
            MakeNode!(0, (*map, [])) |
            @(*map, "depth")!!(depth) |
            ret!(*map)
          }
        } |
        // Intrnal, recursive TreeHashMap get method
        contract TreeHashMapGetter(@map, @nybList, @n, @len, @suffix, ret) = {
          // Look up the value of the node at (map, nybList.slice(0, len))
          new valCh in {
            nodeGet!((map, nybList.slice(0, n)), *valCh) |
            for (@val <- valCh) {
              if (n == len) {
                ret!(val.get(suffix))
              } else {
                // Otherwise check if the rest of the path exists.
                // Bit k set means node k exists.
                // nybList.nth(n) is the node number
                // val & powers.nth(nybList.nth(n)) is nonzero if the node exists
                // (val / powers.nth(nybList.nth(n))) % 2 is 1 if the node exists
                if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                  ret!(Nil)
                } else {
                  TreeHashMapGetter!(map, nybList, n + 1, len, suffix, *ret)
                }
              }
            }
          }
        } |
        // TreeHashMap get method
        // Retrieves the value stored on the node with `key` path prefix in `map`
        contract TreeHashMap(@"get", @map, @key, ret) = {
          new
            hashCh,
            nybListCh,
            keccak256Hash(`rho:crypto:keccak256Hash`)
          in {
            // Hash the key to get a 256-bit array
            keccak256Hash!(key.toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              for (@depth <<- @(map, "depth")) {
                // Get the bit list
                ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
                for (@nybList <- nybListCh) {
                  TreeHashMapGetter!(map, nybList, 0, 2 * depth, hash.slice(depth, 32), *ret)
                }
              }
            }
          }
        } |
        // Doesn't walk the path, just tries to fetch it directly.
        // Will hang if there's no key with that 64-bit prefix.
        // Returns Nil like "get" does if there is some other key with
        // the same prefix but no value there.
        contract TreeHashMap(@"fastUnsafeGet", @map, @key, ret) = {
          new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
            // Hash the key to get a 256-bit array
            keccak256Hash!(key.toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              for(@depth <<- @(map, "depth")) {
                // Get the bit list
                ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
                for (@nybList <- nybListCh) {
                  new restCh, valCh in {
                    nodeGet!((map, nybList), *restCh) |
                    for (@rest <- restCh) {
                      ret!(rest.get(hash.slice(depth, 32)))
                    }
                  }
                }
              }
            }
          }
        } |
        // Internal, recursive TreeHashMap set method
        contract TreeHashMapSetter(@map, @nybList, @n, @len, @newVal, @suffix, ret) = {
          // Set the value of the node at (map, nybList.slice(0, len))
          new valCh, restCh in {
            match (map, nybList.slice(0, n)) {
              node => {
                for (@val <<- @[node, *storeToken]) {
                  if (n == len) {
                    // finished walking the path
                    // acquire the lock on this node
                    for (@val <- @[node, *storeToken]) {
                      // set the node to newVal
                      if (val == 0) {
                        // Release the lock
                        @[node, *storeToken]!({suffix: newVal}) |
                        // Return
                        ret!(Nil)
                      }
                      else {
                        // Release the lock
                        @[node, *storeToken]!(val.set(suffix, newVal)) |
                        // Return
                        ret!(Nil)
                      }
                    }
                  } else {
                    // Otherwise make the rest of the path exist.
                    // Bit k set means child node k exists.
                    if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                      // Child node missing
                      // Acquire the lock
                      for (@val <- @[node, *storeToken]) {
                        // Re-test value
                        if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                          // Child node still missing
                          // Create node, set node to 0
                          MakeNode!(0, (map, nybList.slice(0, n + 1))) |
                          // Update current node to val | (1 << nybList.nth(n))
                          match nybList.nth(n) {
                            bit => {
                              // val | (1 << bit)
                              // Bitwise operators would be really nice to have!
                              // Release the lock
                              @[node, *storeToken]!((val % powers.nth(bit)) +
                                (val / powers.nth(bit + 1)) * powers.nth(bit + 1) +
                                powers.nth(bit))
                            }
                          } |
                          // Child node now exists, loop
                          TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                        } else {
                          // Child node created between reads
                          // Release lock
                          @[node, *storeToken]!(val) |
                          // Loop
                          TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                        }
                      }
                    } else {
                      // child node exists, try next depth
                      TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                    }
                  }
                }
              }
            }
          }
        } |
        // TreeHashMap set method
        // Sets the value of the node with `key` path prefix in `map` to `newVal`
        contract TreeHashMap(@"set", @map, @key, @newVal, ret) = {
          new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
            // Hash the key to get a 256-bit array
            keccak256Hash!(key.toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              for (@depth <<- @(map, "depth")) {
                // Get the bit list
                ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
                for (@nybList <- nybListCh) {
                  TreeHashMapSetter!(map, nybList, 0, 2 * depth, newVal, hash.slice(depth, 32), *ret)
                }
              }
            }
          }
        } |
        // Internal, recursive TreeHashMap contains method
        contract TreeHashMapContains(@map, @nybList, @n, @len, @suffix, ret) = {
          // Check if the value of the node at (map, nybList.slice(0, len)) contains suffix
          new valCh in {
            // read the value at @[(map, nybList.slice(0, n)), *storeToken]
            nodeGet!((map, nybList.slice(0, n)), *valCh) |
            for (@val <- valCh) {
              if (n == len) {
                // we have walked the entire path
                // return result
                ret!(val.contains(suffix))
              } else {
                // not finished walking the path
                // node does not exist if (val / powers.nth(nybList.nth(n))) % 2 == 1
                // return false
                if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                  ret!(false)
                } else {
                  // child node exists, check next depth
                  TreeHashMapContains!(map, nybList, n + 1, len, suffix, *ret)
                }
              }
            }
          }
        } |
        // TreeHashMap contains method
        // Checks if the node with `key` path prefix in `map` exists and returns true or false on `ret`
        contract TreeHashMap(@"contains", @map, @key, ret) = {
          new
            hashCh,
            nybListCh,
            keccak256Hash(`rho:crypto:keccak256Hash`)
          in {
            // Hash the key to get a 256-bit array
            keccak256Hash!(key.toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              for (@depth <<- @(map, "depth")) {
                // Get the bit list
                ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
                for (@nybList <- nybListCh) {
                  TreeHashMapContains!(map, nybList, 0, 2 * depth, hash.slice(depth, 32), *ret)
                }
              }
            }
          }
        } |
        // Internal, recursive TreeHashMap update method
        contract TreeHashMapUpdater(@map, @nybList, @n, @len, update, @suffix, ret) = {
          // Update the value of the node at (map, nybList.slice(0, len))
          match (map, nybList.slice(0, n)) {
            node => {
              // peek @val on node at (map, nybList.slice(0, n))
              for (@val <<- @[node, *storeToken]) {
                if (n == len) {
                  // if at the end of the path
                  if (val == 0) {
                    // if there's nothing here
                    // return Nil
                    ret!(Nil)
                  } else {
                    // else there's somthing here
                    new resultCh in {
                      // acquire the lock on this node
                      for (@val <- @[node, *storeToken]) {
                        // update the current value with val.get(suffix)
                        update!(val.get(suffix), *resultCh) |
                        for (@newVal <- resultCh) {
                          // release the lock
                          @[node, *storeToken]!(val.set(suffix, newVal)) |
                          // and return Nil
                          ret!(Nil)
                        }
                      }
                    }
                  }
                } else {
                  // else try to continue walking the path
                  // bit k set means child node k exists
                  if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                    // if the path doesn't exist, there's no value to update
                    // return Nil
                    ret!(Nil)
                  } else {
                    // child node exists, try next depth
                    TreeHashMapUpdater!(map, nybList, n + 1, len, *update, suffix, *ret)
                  }
                }
              }
            }
          }
        } |
        // TreeHashMap update method
        // Updates the value stored on the node with `key` path prefix in `map` with `update`
        contract TreeHashMap(@"update", @map, @key, update, ret) = {
          new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
            // Hash the key to get a 256-bit array
            keccak256Hash!(key.toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              for (@depth <<- @(map, "depth")) {
                // Get the bit list
                ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
                for (@nybList <- nybListCh) {
                  TreeHashMapUpdater!(map, nybList, 0, 2 * depth, *update, hash.slice(depth, 32), *ret)
                }
              }
            }
          }
        }
      }
    }
  } |
  // Use 4 * 8 = 32-bit paths to leaf nodes.
  TreeHashMap!("init", 4, *_registryStore) |
  new ack in {
    // Store write-only `TreeHashMap` bundle on the node with prefix ``rho:lang:treeHashMap``
    for (@map <<- _registryStore) {
      TreeHashMap!("set", map, `rho:lang:treeHashMap`, bundle+{*TreeHashMap}, *ack)
    } |
    // Wait for the set to finish, then register `lookupCh` as the uri/shorthand lookup channel
    for (_ <- ack) {
      bootstrapLookup!(*lookupCh) | // this will work only once
      for (lookup <- lookupCh) {
        contract lookup(@uriOrShorthand, ret) = {
          match {
            `rho:lang:either` : `rho:id:qrh6mgfp5z6orgchgszyxnuonanz7hw3amgrprqtciia6astt66ypn`,
            `rho:lang:listOps` : `rho:id:6fzorimqngeedepkrizgiqms6zjt76zjeciktt1eifequy4osz35ks`,
            `rho:lang:nonNegativeNumber` : `rho:id:hxyadh1ffypra47ry9mk6b8r1i33ar1w9wjsez4khfe9huzrfcytx9`,
            `rho:rchain:authKey` : `rho:id:1qw5ehmq1x49dey4eadr1h4ncm361w3536asho7dr38iyookwcsp6i`,
            `rho:rchain:makeMint` : `rho:id:asysrwfgzf8bf7sxkiowp4b3tcsy4f8ombi3w96ysox4u3qdmn1wbc`,
            `rho:rchain:pos` : `rho:id:m3xk7h8r54dtqtwsrnxqzhe81baswey66nzw6m533nyd45ptyoybqr`,
            `rho:rchain:revVault` : `rho:id:6zcfqnwnaqcwpeyuysx1rm48ndr6sgsbbgjuwf45i5nor3io7dr76j`,
            `rho:rchain:multiSigRevVault` : `rho:id:b9s6j3xeobgset4ndn64hje64grfcj7a43eekb3fh43yso5ujiecfn`
          } {
            shorthands => {
              for (@map <<- _registryStore) {
                TreeHashMap!("get", map, shorthands.getOrElse(uriOrShorthand, uriOrShorthand), *ret)
              }
            }
          }
        }
      }
    }
  } |
  // Registers `insertArbitraryCh` as an insertArbitrary channel for the registry
  bootstrapInsertArbitrary!(*insertArbitraryCh) | // this will work only once
  for (insertArbitrary <- insertArbitraryCh) {
    // Generates uri and seed to store and access `data` in the registry, returns the generated uri on `ret`
    contract insertArbitrary(@data, ret) = {
      new
        seed,
        uriCh
      in {
        ops!("buildUri", *seed.toByteArray(), *uriCh) |
        for (@uri <- uriCh) {
          for (@map <<- _registryStore) {
            new ack in {
              TreeHashMap!("set", map, uri, data, *ack) |
              for (_ <- ack) {
                ret!(uri)
              }
            }
          }
        }
      }
    }
  } |
  // Registers `insertSignedCh` as an insertSigned channel in the registry
  bootstrapInsertSigned!(*insertSignedCh) | // this will work only once
  for (insertSigned <- insertSignedCh) {
    // Verifies signature and inserts data into registry
    contract insertSigned(@pubKeyBytes, @value, @sig, ret) = {
      match value {
        (nonce, data) => {
          new
            uriCh,
            hashCh,
            verifyCh
          in {
            blake2b256!((nonce, data).toByteArray(), *hashCh) |
            for (@hash <- hashCh) {
              secpVerify!(hash, sig, pubKeyBytes, *verifyCh) |
              for (@verified <- verifyCh) {
                if (verified) {
                  // if verified, build the uri from `pubKeyBytes` and try to set `value` in the registry
                  ops!("buildUri", pubKeyBytes, *uriCh) |
                  for (@uri <- uriCh) {
                    for (@map <<- _registryStore) {
                      new responseCh in {
                        TreeHashMap!("get", map, uri, *responseCh) |
                        for (@response <- responseCh) {
                          match response {
                            // Nothing previously stored at this node
                            Nil => {
                              new ack in {
                                TreeHashMap!("set", map, uri, (nonce, data), *ack) |
                                for (_ <- ack) {
                                  ret!(uri)
                                }
                              }
                            }
                            // Data exists at this node, the new nonce must exceed the old nonce in order to set the new data
                            (oldNonce, _) => {
                              if (nonce > oldNonce) {
                                new ack in {
                                  TreeHashMap!("set", map, uri, (nonce, data), *ack) |
                                  for (_ <- ack) {
                                    // New data set, return uri
                                    ret!(uri)
                                  }
                                }
                              } else {
                                // `nonce` was not large enough, nothing is changed
                                ret!(Nil)
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  // not verified, nothing is changed
                  ret!(Nil)
                }
              }
            }
          }
        }
      }
    }
  }
}
