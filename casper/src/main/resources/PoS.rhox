// Rholang macro parameters:
// minimumBond - the minimum bond allowed by the PoS
// maximumBond - the maximum bond allowed by PoS
// initialBonds - the initial bonds map

/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = a9585a0687761139ab3587a4938fb5ab9fcba675c79fefba889859674046d4a5
 2.  |            | given              | timestamp = 1559156420651
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a20a32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b1001
 8.  | 7, 1,      | secp256k1          | sig = 3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f
 9.  | 4,         | registry           | uri = rho:id:m3xk7h8r54dtqtwsrnxqzhe81baswey66nzw6m533nyd45ptyoybqr
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new  PoS,
    registryLookup(`rho:registry:lookup`),
    revAddressOps(`rho:rev:address`),
    revVaultCh,
    getUser,
    getCurrentUserAddress,
    getCurrentUserVault,
    getMVar,
    runMVar,
    deposit,
    rs(`rho:registry:insertSigned:secp256k1`),
    uriOut,
    stdout(`rho:io:stdout`) in {
  registryLookup!(`rho:rchain:revVault`, *revVaultCh) |

  for(@(_, RevVault) <- revVaultCh) {
    new posRevAddressCh in {

      getCurrentUserAddress!(*posRevAddressCh) |
      for(@posRevAddress <- posRevAddressCh) {
        new bondsCh, posVaultCh in {
          @RevVault!("findOrCreate", posRevAddress, *posVaultCh) |
          for (@(true, _) <- posVaultCh) {

            bondsCh!($$initialBonds$$) |
            contract PoS (@"getBonds", returnCh) = {
              getMVar!(*bondsCh, *returnCh)
            } |

            contract PoS (@"bond", @amount, returnCh) = {
              new userCh, depositCh, processCh in {
                runMVar!(*bondsCh, *processCh, *returnCh) |

                getUser!(*userCh) |
                for(@bonds, resultCh <- processCh;
                    @userPk <- userCh) {
                  if (bonds.contains(userPk)) {
                    resultCh!(bonds, (false, "Public key is already bonded."))
                  } else if (amount < $$minimumBond$$) {
                    resultCh!(bonds, (false, "Bond is less than minimum!"))
                  } else if (amount > $$maximumBond$$) {
                    resultCh!(bonds, (false, "Bond is greater than maximum!"))
                  } else {
                    deposit!(userPk, amount, *depositCh) |
                    for(@depositResult <- depositCh) {
                      match depositResult {
                        (true, _) => {
                          resultCh!(
                            bonds.set(userPk,(amount, bonds.size() + 1)),
                            depositResult)
                        }

                        (false, errorMsg) => {
                          resultCh!(bonds, (false, "Bond deposit failed: " ++ errorMsg))
                        }
                      }
                    }
                  }
                }
              }
            } |

            contract PoS (@"pay", @amount, returnCh) = {
              stdout!("started-PoS.pay") | new vaultCh, transferCh, userCh in {
                getUser!(*userCh) |

                for(@userPk <- userCh) {
                  deposit!(userPk, amount, *returnCh)
                }
              }
            } |

            contract PoS(@"slash", @blockHash, return) = {
              new userCh, invalidBlocksCh, getInvalidBlocks(`rho:casper:invalidBlocks`) in {
                getInvalidBlocks!(*invalidBlocksCh) |
                getUser!(*userCh) |
                for (@invalidBlocks <- invalidBlocksCh; @bonds <- bondsCh; @userPk <- userCh) {
                  new toBeSlashed in {
                    toBeSlashed!(invalidBlocks.getOrElse(blockHash, userPk)) |
                    for (@validator <- toBeSlashed) {
                      // TODO: Transfer to coop wallet instead of just simply setting bonds to 0
                      bondsCh!(bonds.set(validator, (0, bonds.get(validator).nth(1)))) |
                      return!(true)
                    }
                  }
                }
              }
            } |

            contract PoS(@"closeBlock", ackCh) = {
              new blockDataCh, getBlockData(`rho:block:data`), stdout(`rho:io:stdout`) in {
                getBlockData!(*blockDataCh) |
                for (_, @blockNumber <- blockDataCh) {
                  if (blockNumber % 1000 == 0) {
                    stdout!("TODO: a validator change should happen")
                  } |
                  ackCh!(Nil)
                }
              }
            }
          }
        } |

        contract deposit (@fromUserPk, @amount, returnCh) = {
          new vaultCh,
              revAddressCh,
              authKeyCh in {
            @RevVault!("deployerAuthKey", *authKeyCh) |
            for (@authKey <- authKeyCh) {
              revAddressOps!("fromPublicKey", fromUserPk, *revAddressCh) |
              for (@fromRevAddress <- revAddressCh) {
                @RevVault!("findOrCreate", fromRevAddress, *vaultCh) |
                for (@(true, fromVault) <- vaultCh) {
                  @fromVault!("transfer", posRevAddress, amount, authKey, *returnCh)
                }
              }
            }
          }
        }
      } |

      contract getMVar(varCh, returnCh) = {
        for (@v <- varCh) {
          varCh!(v) |
          returnCh!(v)
        }
      } |
      contract runMVar(varCh, processCh, returnCh) = {
        new resultCh in {
          for (@v <- varCh) {
            processCh!(v, *resultCh) |
            for (@newV, @result <- resultCh) {
              varCh!(newV) |
              returnCh!(result)
            }
          }
        }
      } |

      contract getUser (returnCh) = {
        new parametersCh, getParameters(`rho:deploy:params`) in {
          getParameters!(*parametersCh) |
          for (_, _, @userPk, _ <- parametersCh) {
            returnCh!(userPk)
          }
        }
      } |

      contract getCurrentUserAddress(returnCh) = {
        new userCh in {
          getUser!(*userCh) |
          for (@userPk <- userCh) {
            revAddressOps!("fromPublicKey", userPk, *returnCh)
          }
        }
      } |

      contract getCurrentUserVault(returnCh) = {
        new revAddressCh in {
          getCurrentUserAddress!(*revAddressCh) |
          for (@revAddress <- revAddressCh) {
            @RevVault!("findOrCreate", revAddress, *returnCh)
          }
        }
      }
    } |
    rs!("047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f".hexToBytes(),
    (9223372036854775807, bundle+{*PoS}),
    "3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f".hexToBytes(),
    *uriOut)
  }
}
