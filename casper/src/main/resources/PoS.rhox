// Rholang macro parameters:
// minimumBond - the minimum bond allowed by the PoS
// maximumBond - the maximum bond allowed by PoS
// initialBonds - the initial bonds map
// epochLength - the length of the validation epoch in blocks
// quarantineLength - the length of the quarantine time in blocks

/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = a9585a0687761139ab3587a4938fb5ab9fcba675c79fefba889859674046d4a5
 2.  |            | given              | timestamp = 1559156420651
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0xa32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a20a32c1649f1700469f125ea85f9c2a220072e593ae617213782d738e389639d3b1001
 8.  | 7, 1,      | secp256k1          | sig = 3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f
 9.  | 4,         | registry           | uri = rho:id:m3xk7h8r54dtqtwsrnxqzhe81baswey66nzw6m533nyd45ptyoybqr
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */
new PoS,
    registryLookup(`rho:registry:lookup`),
    revAddressOps(`rho:rev:address`),
    revVaultCh, listOpsCh,
    getUser,
    getCurrentUserAddress,
    pickActiveValidators,
    getMVar,
    runMVar,
    fst,
    deposit, distributeRewards,
    perActiveValidatorPosVaultsCh,
    transferFromBlockSender,
    rs(`rho:registry:insertSigned:secp256k1`),
    posId(`rho:rchain:deployerId`),
    uriOut in {
  registryLookup!(`rho:rchain:revVault`, *revVaultCh) |
  registryLookup!(`rho:lang:listOps`, *listOpsCh) |

  for(@(_, RevVault) <- revVaultCh;
      @(_, ListOps) <- listOpsCh) {
    new posRevAddressCh, posAuthKeyCh, posVaultCh, initialActiveCh in {

      @RevVault!("deployerAuthKey", *posId, *posAuthKeyCh) |
      getCurrentUserAddress!(*posId, *posRevAddressCh) |

      new rangeCh, makeVault in {
        contract makeVault(_, returnCh) = {
          new unf, revAddressCh, vaultCh in {
            revAddressOps!("fromUnforgeable", *unf, *revAddressCh) |
            for (@revAddress <- revAddressCh) {
              @RevVault!("findOrCreate", revAddress, *vaultCh) |
              for (@(true, vault) <- vaultCh) {
                returnCh!((*unf, revAddress, vault))
              }
            }
          }
        } |

        @ListOps!("range", 0, $$numberOfActiveValidators$$, *rangeCh) |
        for (@range <- rangeCh) {
          @ListOps!("parMap", range, *makeVault, *perActiveValidatorPosVaultsCh)
        }
      } |
      
      for(@posRevAddress <- posRevAddressCh;
          @posAuthKey <- posAuthKeyCh) {

        @RevVault!("findOrCreate", posRevAddress, *posVaultCh) |
        pickActiveValidators!($$initialBonds$$, {}, *initialActiveCh) |

        for (@(true, posVault) <- posVaultCh;
             @initialActive <- initialActiveCh) {
          new stateCh in {
            // State structure:
            // pendingRewards : Map[PublickKey, Int] - are accummulated by calling "chargeDeploy"
            // committedRewards : Map[PublickKey, Int] - are moved from pendingRewards at each closeBlock
            // activeValidators : List[PublicKey] - the active validators
            // withdrawers : Map[PublicKey, Int] - the validators willing to withdraw and the blocknumber when their quarantine ends
            //                                     This is the beggining of the next epoch after their withdrawal + quarantineLength
            // allBonds : Map[PublickKey, Int] - each validator stake
            stateCh!({
              "pendingRewards":{},
              "committedRewards":{},
              "activeValidators":initialActive,
              "withdrawers":{},
              "randomImages":{},
              "randomNumbers":{},
              "allBonds":$$initialBonds$$
            }) |

            contract PoS (@"getBonds", returnCh) = {
              new tmpCh in {
                getMVar!(*stateCh, *tmpCh) |
                for (@state <- tmpCh) {
                  returnCh!(state.get("allBonds"))
                }
              }
            } |

            contract PoS (@"getActiveValidators", returnCh) = {
              new tmpCh in {
                getMVar!(*stateCh, *tmpCh) |
                for (@state <- tmpCh) {
                  returnCh!(state.get("activeValidators"))
                }
              }
            } |

            contract PoS (@"getActiveValidatorVaults", returnCh) = {
              for(@vaults <<- perActiveValidatorPosVaultsCh) {
                returnCh!(vaults)
              }
            } |

            /**
             * Returns a Map[PublidKey, Int] containing the rewards accumulated for each validator.
             * The returned map contains only the committed rewards after the last closeBlock
             */
            contract PoS (@"getRewards", returnCh) = {
              new tmpCh in {
                getMVar!(*stateCh, *tmpCh) |
                for (@state <- tmpCh) {
                  returnCh!(state.get("committedRewards"))
                }
              }
            } |

            contract PoS (@"bond", @deployerId, @amount, returnCh) = {
              new userCh, depositCh, processCh in {
                runMVar!(*stateCh, *processCh, *returnCh) |
                getUser!(deployerId, *userCh) |
                for(@state, resultCh <- processCh;
                    @userPk <- userCh) {
                  if (state.get("allBonds").contains(userPk)) {
                    resultCh!(state, (false, "Public key is already bonded."))
                  } else if (amount < $$minimumBond$$) {
                    resultCh!(state, (false, "Bond is less than minimum!"))
                  } else if (amount > $$maximumBond$$) {
                    resultCh!(state, (false, "Bond is greater than maximum!"))
                  } else {
                    deposit!(deployerId, amount, state.get("activeValidators"), *depositCh) |
                    for(@depositResult <- depositCh) {
                      match depositResult {
                        (true, _) => {
                          resultCh!(
                            state.set(
                              "allBonds",
                              state.get("allBonds").set(userPk,amount)),
                            depositResult
                          )
                        }
                        (false, errorMsg) => {
                          resultCh!(state, (false, "Bond deposit failed: " ++ errorMsg))
                        }
                      }
                    }
                  }
                }
              }
            } |

            contract PoS (@"withdraw", @deployerId, returnCh) = {
              new userCh, processCh,
                  getBlockData(`rho:block:data`),
                  blockDataCh
              in {
                runMVar!(*stateCh, *processCh, *returnCh) |

                getBlockData!(*blockDataCh) |
                getUser!(deployerId, *userCh) |
                for(@state, resultCh <- processCh;
                    @userPk <- userCh;
                    _, @blockNumber, _ <- blockDataCh) {
                  if (state.get("allBonds").contains(userPk)) {
                    // the withdwal is in effect starting from the next epoch
                    resultCh!(
                      state.set("withdrawers",
                                state.get("withdrawers")
                                     .set(userPk,
                                       $$quarantineLength$$ + $$epochLength$$ * (1 + blockNumber / $$epochLength$$))),
                      (true, Nil))
                  } else {
                    resultCh!(state, (false, "User is not bonded"))
                  }
                }
              }
            } |

            new currentDeployerData in {
              contract PoS (@"chargeDeploy", @deployerId, @amount, return) = {
                new depositCh, tmpCh in {
                  getMVar!(*stateCh, *tmpCh) |
                  for (@state <- tmpCh) {
                    deposit!(deployerId, amount, state.get("activeValidators"), *depositCh) |
                    for(@depositResult <- depositCh){
                      match depositResult {
                        (true, _) => {
                          currentDeployerData!((deployerId, amount)) |
                          return!(depositResult)
                        }
                        (_, errorMessage) => {
                          return!((false, "Deploy payment failed: " ++ errorMessage))
                        }
                      }
                    }
                  }
                }
              } |

              contract transferFromBlockSender(@deployerRevAddress, @refundAmount, returnCh) = {
                new getBlockData(`rho:block:data`),
                    blockDataCh,
                    indexSender,
                    unfAuthKeyCh,
                    tmpCh in {
                  getMVar!(*stateCh, *tmpCh) |
                  getBlockData!(*blockDataCh) |
                  for (@state <- tmpCh; _, _, @sender <- blockDataCh) {
                    @ListOps!("indexOf", state.get("activeValidators"), sender, *indexSender) |
                    for (@idx <- indexSender) {
                      for (@vaults <<- perActiveValidatorPosVaultsCh) {
                        if (idx == -1) {
                          returnCh!((false, "Sender is not an active validator"))
                        } else {
                          match vaults.nth(idx) {
                            (unf, _, activeValidatorVault) => {
                              @RevVault!("unforgeableAuthKey", unf, *unfAuthKeyCh) |
                              for (@authKey <- unfAuthKeyCh) {
                                @activeValidatorVault!("transfer", deployerRevAddress, refundAmount, authKey, *returnCh)
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } |

              // Note: under no circumstances should this method be merged as is.
              //       this method, along with "chargeDeploy", "closeBlock", and "slash"
              //       must be made private, as they're only used in the protocol.
              contract PoS (@"refundDeploy", @refundAmount, return) = {
                for(@(deployerId, initialPaymentAmount) <- currentDeployerData){
                  new revAddressCh in {
                    revAddressOps!("fromDeployerId", deployerId, *revAddressCh) |
                    for(@deployerRevAddress <- revAddressCh){
                      new transferCh in {
                        transferFromBlockSender!(deployerRevAddress, refundAmount, *transferCh) |
                        for(@transferResult <- transferCh){
                          match transferResult {
                            (true, _) => {
                              new processRefundCh in {
                                runMVar!(*stateCh, *processRefundCh, *return) |
                                for(@state, refundResultCh <- processRefundCh){
                                  new newPendingCh in {
                                    distributeRewards!(
                                      initialPaymentAmount - refundAmount,
                                      state.get("activeValidators"),
                                      state.get("allBonds"),
                                      state.get("pendingRewards"),
                                      *newPendingCh) |
                                    for(@newPending <- newPendingCh){
                                      refundResultCh!(
                                        state.set("pendingRewards", newPending),
                                        (true, Nil)
                                      )
                                    }
                                  }
                                }
                              }
                            }
                            (_, errorMessage) => {
                              return!((false, "(Bug found) Deploy refund failed: " ++ errorMessage))
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } |

            contract PoS(@"slash", @deployerId, @blockHash, returnCh) = {
              new userCh, invalidBlocksCh, doSlashCh,
                  getInvalidBlocks(`rho:casper:invalidBlocks`) in {
                getInvalidBlocks!(*invalidBlocksCh) |
                getUser!(deployerId, *userCh) |

                runMVar!(*stateCh, *doSlashCh, *returnCh) |
                for (@invalidBlocks <- invalidBlocksCh;
                     @userPk <- userCh;
                     @state, slashResultCh <- doSlashCh) {
                  new toBeSlashed in {
                    toBeSlashed!(invalidBlocks.getOrElse(blockHash, userPk)) |
                    for (@validator <- toBeSlashed) {
                      // TODO: Transfer to coop wallet instead of just simply setting bonds to 0
                      slashResultCh!(
                        state.set("pendingRewards",
                                  state.get("pendingRewards").set(validator, 0))
                             .set("committedRewards",
                                  state.get("committedRewards").set(validator, 0))
                             .set("allBonds",
                                  state.get("allBonds").set(validator, 0)),
                        true)
                    }
                  }
                }
              }
            } |

            contract PoS(@"closeBlock", ackCh) = {
              new accumulateDeposits,
                  commitRewards,
                  removeQuarantinedWithdrawers,
                  payValidators
              in {
                new blockDataCh, mvarProcessCh,
                    getBlockData(`rho:block:data`),
                    accDepositsDoneCh,
                    commitRewardsCh,
                    newValidatorsCh, removeQuarantinedCh, paymentDoneCh
                in {
                  getBlockData!(*blockDataCh) |

                  runMVar!(*stateCh, *mvarProcessCh, *ackCh) |
                  for(_, @blockNumber, _ <- blockDataCh;
                      @state, mvarResultCh <- mvarProcessCh) {

                    // Only commit rewards and pick active validators if there is actually an epoch change.
                    if (blockNumber % $$epochLength$$ == 0) {

                      // Before choosing new active validators and paying out any withdrawers,
                      // deposits have to be accumulated into one vault for now.
                      accumulateDeposits!(posRevAddress, *accDepositsDoneCh) |

                      commitRewards!(
                        state.get("pendingRewards"),
                        state.get("committedRewards"),
                        *commitRewardsCh)
                    } |

                    for (@committedRewards <- commitRewardsCh) {

                      pickActiveValidators!(
                        state.get("allBonds"),
                        state.get("withdrawers"),
                        *newValidatorsCh) |

                      removeQuarantinedWithdrawers!(
                        blockNumber,
                        state.get("allBonds"),
                        state.get("withdrawers"),
                        committedRewards,
                        *removeQuarantinedCh)
                    } |

                    for(@newValidators <- newValidatorsCh;
                        @(payments, newBonds, newWithdrawers, newRewards) <- removeQuarantinedCh;
                        _ <- accDepositsDoneCh) {

                      payValidators!(payments, *paymentDoneCh) |

                      for (_ <- paymentDoneCh) {
                        mvarResultCh!(
                          {
                            "pendingRewards":{},
                            "committedRewards":newRewards,
                            "activeValidators":newValidators,
                            "withdrawers":newWithdrawers,
                            "allBonds":newBonds,
                            "randomImages":{},
                            "randomNumbers":{},
                          },
                          Nil)
                      }
                    }
                  }
                } |

                new moveFunds in {
                  contract moveFunds(@(unf, _, vault), returnCh) = {
                    new balanceCh, unfAuthKeyCh, transferDoneCh in {
                      @vault!("balance", *balanceCh) |
                      for (@balance <- balanceCh) {
                        if (balance > 0) {
                          @RevVault!("unforgeableAuthKey", unf, *unfAuthKeyCh) |
                          for (@authKey <- unfAuthKeyCh) {
                            @vault!("transfer", posRevAddress, balance, authKey, *transferDoneCh) |
                            for (@(true, Nil) <- transferDoneCh) {
                              returnCh!(true)
                            }
                          }
                        } else {
                          returnCh!(true)
                        }
                      }
                    }
                  } |

                  contract accumulateDeposits(destRevAddress, ackCh) = {
                    for(@vaults <<- perActiveValidatorPosVaultsCh) {
                      @ListOps!("parMap", vaults, *moveFunds, *ackCh)
                    }
                  }
                } |

                new payValidator in {
                  contract payValidator (@(pk, amount), returnCh) = {
                    new vaultCh, revAddressCh in {
                      revAddressOps!("fromPublicKey", pk, *revAddressCh) |
                      for (@toRevAddress <- revAddressCh) {
                        @posVault!("transfer", toRevAddress, amount, posAuthKey, *returnCh)
                      }
                    }
                  } |
                  contract payValidators(@payments, ackCh) = {
                    @ListOps!("unorderedParMap", payments, *payValidator, *ackCh)
                  }
                } |

                new commitReward in {
                  contract commitReward(@(pk, pending), @acc, resultCh) = {
                    resultCh!(acc.set(pk, acc.getOrElse(pk, 0) + pending))
                  } |
                  contract commitRewards(@pendingRewards, @rewards, newRewardsCh) = {
                    @ListOps!("fold", pendingRewards.toList(), rewards, *commitReward, *newRewardsCh)
                  }
                } |

                contract removeQuarantinedWithdrawers(@currentBlockNumber, @allBonds, @withdrawers, @rewards, returnCh) = {
                  new quarantinedValidatorsCh,
                      validatorsToWithdrawListCh,
                      isQuarantineFinished,
                      notWithdrawn,
                      newBondsListCh,
                      newWithdrawersListCh,
                      newRewardsListCh,
                      paymentsCh, computePay
                  in {
                    @ListOps!("filter", withdrawers.toList(), *isQuarantineFinished, *quarantinedValidatorsCh) |
                    for (@quarantinedValidators <- quarantinedValidatorsCh) {
                      @ListOps!("map", quarantinedValidators, *fst, *validatorsToWithdrawListCh) |
                      for (@validatorsToWithdrawList <- validatorsToWithdrawListCh) {
                        @ListOps!("map", validatorsToWithdrawList, *computePay, *paymentsCh) |
                        contract computePay(@pk, resultCh) = {
                          resultCh!((pk, allBonds.get(pk) + rewards.getOrElse(pk, 0)))
                        } |

                        match validatorsToWithdrawList.toSet() {
                          validatorsToWithdrawSet => {
                            @ListOps!("filter", allBonds.toList(), *notWithdrawn, *newBondsListCh) |
                            @ListOps!("filter", withdrawers.toList(), *notWithdrawn, *newWithdrawersListCh) |
                            @ListOps!("filter", rewards.toList(), *notWithdrawn, *newRewardsListCh) |

                            for (@newWithdrawersList <- newWithdrawersListCh;
                                 @newBondsList <- newBondsListCh;
                                 @newRewardsList <- newRewardsListCh;
                                 @payments <- paymentsCh) {
                              returnCh!((payments, newBondsList.toMap(), newWithdrawersList.toMap(), newRewardsList.toMap()))
                            } |

                            contract notWithdrawn(@(pk, _), resultCh) = { resultCh!(not validatorsToWithdrawSet.contains(pk))}
                          }
                        }
                      }
                    } |

                    contract isQuarantineFinished(@(_, blockNumber), resultCh) = {
                      resultCh!(blockNumber >= currentBlockNumber)
                    }
                  }
                }
              }
            } |

            contract PoS(@"commitRandomImage", @deployerId, @hash, ackCh) = {
              new userCh, mvarCh in {
                getUser!(deployerId, *userCh) |

                runMVar!(*stateCh, *mvarCh, *ackCh) |
                for (@validator <- userCh;
                     @state, resultCh <- mvarCh) {
                  if (state.get("randomImages").contains(validator)) {
                    resultCh!(state, (false, "Image already committed"))
                  }
                  else {
                    resultCh!(
                      state.set("randomImages",
                               state.get("randomImages").set(validator, hash)),
                      true)
                  }
               }
             }
            } |

            contract PoS(@"revealRandom", @deployerId, @random, ackCh) = {
              new userCh, mvarCh, computeHash(`rho:crypto:keccak256Hash`), hashCh in {
                getUser!(deployerId, *userCh) |

                runMVar!(*stateCh, *mvarCh, *ackCh) |
                computeHash!(random, *hashCh) |
                for (@validator <- userCh;
                     @state, resultCh <- mvarCh;
                     @hash <- hashCh) {
                  if (state.get("randomImages").contains(validator)) {
                    if (hash == state.get("randomImages").get(validator))
                    {
                      resultCh!(
                        state.set("randomNumbers",
                          state.get("randomNumbers").set(validator, random)),
                        true)
                    } else
                    {
                      resultCh!(state, (false, "Previously committed image doesn't match the random number"))
                    }
                  }
                  else {
                      resultCh! (state, (false, "Previously committed random image not found"))
                  }
               }
             }
            }
          }
        } |

        contract deposit (@deployerId, @amount, @activeValidators, returnCh) = {
          new vaultCh,
              revAddressCh,
              indexSender,
              getBlockData(`rho:block:data`), blockDataCh,
              authKeyCh in {
            @RevVault!("deployerAuthKey", deployerId, *authKeyCh) |
            revAddressOps!("fromDeployerId", deployerId, *revAddressCh) |
            for (@authKey <- authKeyCh; @fromRevAddress <- revAddressCh) {
              @RevVault!("findOrCreate", fromRevAddress, *vaultCh) |
              getBlockData!(*blockDataCh) |
              for (@(true, fromVault) <- vaultCh; _, _, @sender <- blockDataCh) {
                @ListOps!("indexOf", activeValidators, sender, *indexSender) |
                for (@idx <- indexSender) {
                  for (@vaults <<- perActiveValidatorPosVaultsCh) {
                    if (idx == -1) {
                      returnCh!((false, "Sender is not an active validator"))
                    } else {
                      match vaults.nth(idx) {
                        (_, activeValidatorVault, _) => {
                          @fromVault!("transfer", activeValidatorVault, amount, authKey, *returnCh)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } |

        contract distributeRewards(@amount, @activeValidators, @bonds, @originalRewards, returnCh) = {
          new computeSum, totalActiveStakeCh,
              computeDelta, rewardsDeltaCh,
              computeMergeMap in {
            @ListOps!("fold", activeValidators, 0, *computeSum, *totalActiveStakeCh) |
            contract computeSum(@pk, @acc, resultCh) = {
              resultCh!(acc + bonds.get(pk))
            } |

            for(@totalActiveStake <- totalActiveStakeCh) {
              @ListOps!("fold", activeValidators, {}, *computeDelta, *rewardsDeltaCh) |
              contract computeDelta(@pk, @acc, resultCh) = {
                resultCh!(acc.set(pk, (amount * bonds.get(pk)) / totalActiveStake))
              }
            } |

            for (@rewardsDelta <- rewardsDeltaCh) {

              @ListOps!("fold", rewardsDelta.toList(), originalRewards, *computeMergeMap, *returnCh) |
              contract computeMergeMap(@(pk, rewardDelta), @acc, resultCh) = {
                resultCh!(acc.set(pk, acc.getOrElse(pk, 0) + rewardDelta))
              }
            }
          }
        }
      } |

      contract getMVar(varCh, returnCh) = {
        for (@v <- varCh) {
          varCh!(v) |
          returnCh!(v)
        }
      } |
      contract runMVar(varCh, processCh, returnCh) = {
        new resultCh in {
          for (@v <- varCh) {
            processCh!(v, *resultCh) |
            for (@newV, @result <- resultCh) {
              varCh!(newV) |
              returnCh!(result)
            }
          }
        }
      } |

      contract fst(@(first, _), resultCh) = {
        resultCh!(first)
      } |

      contract getUser (@deployerId, returnCh) = {
        new deployerIdOps(`rho:rchain:deployerId:ops`) in {
          deployerIdOps!("pubKeyBytes", deployerId, *returnCh)
        }
      } |

      contract getCurrentUserAddress(@deployerId, returnCh) = {
        new userCh in {
          getUser!(deployerId, *userCh) |
          for (@userPk <- userCh) {
            revAddressOps!("fromPublicKey", userPk, *returnCh)
          }
        }
      } |

      contract pickActiveValidators(@allBonds, @withdrawers, returnCh) = {
        new availableValidatorsCh, isAvailable, pksCh in {
          @ListOps!("filter", allBonds.toList(), *isAvailable, *availableValidatorsCh) |
          contract isAvailable(@(pk, _), resultCh) = { resultCh!(not withdrawers.contains(pk))} |

          for (@availableValidators <- availableValidatorsCh) {
            @ListOps!("map", availableValidators, *fst, *pksCh) |
            for (@pks <- pksCh) {
              // TODO: Randomly select 100 active validators once we have on-chain randomness
              returnCh!(pks.take($$numberOfActiveValidators$$))
            }
          }
        }
      }
    } |
    rs!("047b43d6548b72813b89ac1b9f9ca67624a8b372feedd71d4e2da036384a3e1236812227e524e6f237cde5f80dbb921cac12e6500791e9a9ed1254a745a816fe1f".hexToBytes(),
    (9223372036854775807, bundle+{*PoS}),
    "3044022054ff4bae3984252b116e41e28d98bb5533eaa39aec2729228159166e2784f641022066a0fd99e7ea33df812fab095cbe61250f9548bce6da3ec4c6a90c741b94087f".hexToBytes(),
    *uriOut)
  }
}
