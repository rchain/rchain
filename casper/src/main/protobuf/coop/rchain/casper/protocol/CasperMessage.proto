syntax = "proto3";
package coop.rchain.casper.protocol;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "coop.rchain.casper.protocol"
  flat_package: true
};

//-----------------------------------
//just a stub until we start using the real Rholang proto definitions

//simulation of bang
message Produce {
  int32 id = 1;
}

//simulation of for
message Consume {
  int32 id = 1;
  Resource continuation = 2;
}

//simulation of Nil
message Stopped { }

//simulation of process
message Resource {
  oneof resourceClass {
    Produce produceResource = 1;
    Consume consumeResource = 2;
    Stopped stoppedResource = 3;
  }
}

message Bond {
  bytes validator = 1;
  int32 stake     = 2;
}

message Deploy {
  bytes    user     = 1; //public key
  int32    nonce    = 2; //for uniqueness
  Resource resource = 3; //resource to deploy
  bytes    sig      = 4; //sigature of (hash(resource) + nonce) using private key
}

service DeployService {
  rpc DoDeploy(Deploy) returns (DeployServiceResponse) {}
}
message DeployServiceResponse {
  bool success = 1;
}

message Justification {
  bytes validator       = 1;
  bytes latestBlockHash = 2;
}

message RChainState {
  repeated Resource resources = 1; //represents random things in the tuplespace
  
  //Internals of what will be the "blessed" PoS contract 
  //(which will be part of the tuplespace in the real implementation).
  repeated Bond bonds        = 2;
  int64         blockNumber  = 3;
}

message ResourceDiff {
  repeated Resource effected = 1; 
}

message BondDiff {
  Bond added = 1;
}

message UnbondDiff {
  bytes validatorRemoved = 1;
}

message Diff {
  oneof diffClass {
    ResourceDiff rdiff = 1;
    BondDiff     bdiff = 2;
    UnbondDiff   udiff = 3;
  }
}

//------------------------------------

message Header {
  repeated bytes parentsHashList = 1; //list of parent block hashes
  bytes postStateHash      = 2;
  bytes newCodeHash        = 3;
  bytes commReductionsHash = 4;
}

message Body {
  RChainState     postState      = 1; //will remove sending an explicit postState when history/rollback in tuplespace works
  repeated Deploy newCode        = 2; //new rholang code that was added to the state before processing
  repeated Diff   commReductions = 3; //the comm. rule reductions that occurred to obtain the post-state
}

//TODO: add fields for arbitrary data
message BlockMessage {
  bytes                  blockHash      = 1; //obtained by hashing the information in the header
  Header                 header         = 2;
  Body                   body           = 3;
  repeated Justification justifications = 4; // map of all validators to latest blocks based on current view
  bytes                  sender         = 5; //public key of the validator that created the block
  bytes                  sig            = 6; //signature generated by signing `hash(justification) + blockHash`.
}
