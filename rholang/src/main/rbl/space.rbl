;; -*- mode: Lisp;-*- 
;; Filename:    space.rbl 
;; Authors:     luciusmeredith                                                    
;; Creation:    Thu Feb 23 18:57:26 2017 
;; Copyright:   See site license
;; Description: Basic Linda pattern
;; ------------------------------------------------------------------------

;;; TODO: Add tag for whether persistent
;;; TODO: Translate match in compiler
(add '**wildcard** 'wildcard) ;; TODO: Add wildcard token in Rosette implementation and swap out #niv

(add 'p (method [x] (seq (prim-print x) (display #\\n))))

(defOprn append)
(defPure Tuple (append item) (reverse [item & (reverse (self))]))

(defOprn string-length<)
(defOprn string-length>=)
(defPure String (string-length< other) (< (string-length (self)) (string-length other)))
(defPure String (string-length>= other) (not (string-length< (self) other)))

(defOprn symbol-length<)
(defOprn symbol-length>=)
(defPure Symbol (symbol-length< other) (string-length< (->string (self)) (->string other)))
(defPure Symbol (symbol-length>= other) (string-length>= (->string (self)) (->string other)))

;;; Deletes element at position i in Tuple
(defOprn delete-i)
(defPure Tuple (delete-i p)
    (concat (prim-sub-object (self) 0 p)
        (prim-sub-object (self) (fx+ p 1)
                 (fx- (prim-size (self)) (fx+ p 1)))))

(defOprn replace-i)
(defPure Tuple (replace-i p item)
    (concat
        (prim-sub-object (self) 0 p)
        [item]
        (prim-sub-object (self) (fx+ p 1)
                 (fx- (prim-size (self)) (fx+ p 1)))))

(defOprn symbol-list-concat)
(defPure Tuple (symbol-list-concat) (->symbol (fold (self) (proc [e acc k] (k (string-concat acc (->string e)))) "")))

(defOprn flatten)
(defPure Tuple (flatten) (fold (self) (proc [e acc k] (k (tuple-concat e acc))) []))

(defOprn twoZip)
(defPure Tuple (twoZip) (fold (self) (proc [[x y] acc k] (let [[[xs ys] acc]] (k [[x & xs] [y & ys]]))) [[] []]))

(defOprn length)
(defPure Tuple (length) (count (self) (proc [x] #t)))

(defOprn filter-niv)
(defPure Tuple (filter-niv) (filter (self) (proc [x] (not (niv? x)))))

(defOprn tbl-unique-append)
(defPure RblTable (tbl-unique-append key value)
    (let [[current_value (tbl-get (self) key)]]
        (if (= current_value #absent)
            (tbl-add (self) key [value])
            (if (type? current_value Tuple)
                (tbl-add (self) key (remove-duplicates (append current_value value)))
                (RuntimeError (self) "Value " current_value " at key " key " not a Tuple")
            )
        )
    )
)

;;; TODO: Implement match? for other data structures
(defOprn match?)
(defPure Tuple (match? other) (= (self) other))

(defOprn get)
(defPure RblTable (get key)
    (tbl-get (self) (->symbol key))
)

(defOprn getOrElse)
(defPure RblTable (getOrElse & keys/elseValue)
    (let*
        [
            ;;; TODO: Find way to deconstruct without reversing
            [[elseValue & reverse_keys] (reverse keys/elseValue)]
            [unreversed_keys (reverse reverse_keys)]
            [final_value
                (fold unreversed_keys
                    (proc [key acc k]
                        ;;; TODO: (null? key) is a proxy for checking if the unreversed_keys have exhausted.
                        ;;; We need to handle when key is null.
                        (if (null? key)
                            acc
                            (if (type? acc RblTable)
                                (let [[value (tbl-get acc (->symbol key))]]
                                    (if (= #absent value) elseValue (k value))
                                )
                                elseValue
                            )
                        )
                    )
                    (self))]
        ]
        final_value
    )
)

(defOprn insert)
(defPure RblTable (insert & keys/value)
    ;;; Inserts (new RblTable) if a lookup is #absent when looping through keys
    (let*
        [
            ;;; TODO: Find way to deconstruct without reversing
            [[value & reverse_keys] (reverse keys/value)]
            [[[last_key] remaining_reverse_keys] (if (= (length reverse_keys) 1) [reverse_keys []] [[(head reverse_keys)] (tail reverse_keys)])]
            [unreversed_keys (reverse remaining_reverse_keys)]
            [final_tbl
                (if (null? unreversed_keys)
                    (self)
                    (fold
                        unreversed_keys
                        (proc [key acc k]
                            (if (null? key)
                                acc
                                (k
                                    (let
                                        [[value (tbl-get acc (->symbol key))]]
                                        (if (= #absent value)
                                            (let [[newTbl (new RblTable)]]
                                                (seq
                                                    (tbl-add acc (->symbol key) newTbl)
                                                    newTbl
                                                )
                                            )
                                            value
                                        )
                                    )
                                )
                            )
                        )
                        (self)))]
        ]
        (seq
            (tbl-add final_tbl (->symbol last_key) value)
            final_tbl
        )
    )
)


(defOprn insertMany)
(defPure RblTable (insertMany & keys/vals)
   (iterate loop [[[k v & r] keys/vals]]
       (seq (tbl-add (self) (->symbol k) v)
           (if (null? r)
               (self)
               (loop r))))
)


(defOprn consume)
(defOprn produce)
(defOprn unify?)
(defOprn match?)
(defOprn production?)

(defActor NameSpace (slots& chart (new RblTable) channel_lookup_table (new RblTable) reverse_channel_lookup_table (new RblTable) unification_ptrn_lookup_table (new RblTable))
    ;;; TODO: We currently do not support prologue style unification (bidirectional) pattern matching
    ;;; Potential implementation: (if (type? ptrn candidate) (seq (update) ((proc [ptrn] ptrn) candidate)) (seq (update) #niv)) )
    (pure (unify? ptrn candidate) #t)
    (pure (match? ptrn candidate) (if (type? ptrn Symbol) #t (type? ptrn candidate)))
    ;;; storedValue is the tuple [data continuation]
    (pure (production? storedValue) (not (null? (head storedValue))))
)

(defOprn tuplespace-tbl-get-or-create)
(defPure RblTable (tuplespace-tbl-get-or-create channel)
    (let [[subspace (tbl-get (self) channel)]]
        (if (absent? subspace)
            (seq
                (tbl-add (self) channel (new RblTable))
                (tbl-get (self) channel)
            )
            subspace
        )
    )
)

(defRMethod NameSpace (consume ctxt-tuple & location)
    ;;; by making this a reflective method - RMethod - we gain access to the awaiting continuation
    ;;; bound to the formal parameter ctxt
(let* [
    [[ctxt [code env]] ctxt-tuple]
    [[channels unification_ptrns product_ptrns persistent] location]
        ;;; the channel and the pattern of incoming messages to look for are destructured and bound
    [_ (seq
        (print (->symbol "DEBUG: Calling consume("))
        (print channels)
        (print (->symbol ", "))
        (print unification_ptrns)
        (print (->symbol ", "))
        (print product_ptrns)
        (print (->symbol ")"))
        (p "")
        )]
    [channels_concatenated (symbol-list-concat channels)]
    [unification_ptrns_concatenated (symbol-list-concat unification_ptrns)]
    [expanded_channel_groups
        (seq
            (map channels (proc [i channel] (tbl-unique-append channel_lookup_table channel channel)))
            (map channels (proc [i channel] (sort (tbl-get channel_lookup_table channel) symbol-length< symbol-length>=)))
        )
    ]
    [subspace_groups
        (map expanded_channel_groups (proc [i expanded_channel_group]
            (map expanded_channel_group (proc [j expanded_channel] (tuplespace-tbl-get-or-create chart expanded_channel)))))]
        ;;; the incoming messages associated with the channel are collected in a subtable (subspace)
        ;;; in this sense we can see that the semantic framework supports a compositional
        ;;; topic/subtopic/subsubtopic/â€¦ structuring technique that unifies message passing
        ;;; with content delivery primitives
        ;;; the channel name becomes the topic, and the pattern structure becomes
        ;;; the subtopic tree
        ;;; this also unifies with the URL view of resource access
    [subspace_groups_keys (map subspace_groups (proc [i subspace_group]
        (map subspace_group (proc [j subspace] (names subspace)))))]
    [candidates
        (map subspace_groups_keys (proc [i subspace_group_keys]
            (map subspace_group_keys (proc [j subspace_keys]
                (let*
                    [
                        [[extractions misses]
                            (fold subspace_keys
                                (proc [subspace_key acc k]
                                    (let [[[hits misses] acc]
                                        [binding (any (tbl-get unification_ptrn_lookup_table (->symbol subspace_key)) (proc [subspace_key_component] (unify? NameSpace (tuple-safe-nth unification_ptrns i) subspace_key_component)))]]
                                (if (niv? binding)
                                    (k [hits [subspace_key & misses]])
                                    (k [[[subspace_key binding] & hits] misses])))) [[] []])]
                            ;;; note that this is generic in the unify? and miss? predicates
                            ;;; matching could be unification (as it is in SpecialK) or it could be
                            ;;; a number of other special purpose protocols
                            ;;; the price for this genericity is performance
                            ;;; there is decent research showing that there are hashing disciplines
                            ;;; that could provide a better than reasonable approximation of unification

                            ;;; Returns [[[[[[channel_key binding] hits...] misses] another channel key ...]
                            ;;; another expanded channel ...] another expanded channel group ...]
                            ;;; TODO: Should return a list of bindings not #t or #f

                        [[data_group continuation_group]
                            (fold extractions
                                (proc [[unification_ptrn binding] acc k]
                                    (let* [[[data_group continuation_group] acc]
                                            [stored_value (tbl-get (tuple-safe-nth (tuple-safe-nth subspace_groups i) j) unification_ptrn)]
                                            [[data_struct continuations_struct] stored_value]]
                                    (if (production? NameSpace stored_value)
                                        (k [[[[unification_ptrn binding] data_struct] & data_group] continuation_group])
                                        (k [data_group [[unification_ptrn continuations_struct] & continuation_group]])))) [[] []])]
                            ;;; this divides the hits into those matches that are data and
                            ;;; those matches that are continuations
                            ;;; and the rest of the code sends data to the awaiting continuation
                            ;;; and appends the continuation to those matches that are currently
                            ;;; data starved
                            ;;; this is a much more fine-grained view of excluded middle

                            ;;; Returns [[[ [[[channel_key binding] data] [channel_key continuations]]
                            ;;; another channel key ...] another expanded channel ...] another expanded channel group ...]
                    ]
                    (let
                        [
                            [production_results
                                (map data_group (proc [m [[unification_ptrn binding] data_struct]]
                                    (map data_struct (proc [n product]
                                        (if (match? NameSpace (tuple-safe-nth product_ptrns i) product)
                                            [
                                                [(tuple-safe-nth channels i) (tuple-safe-nth (tuple-safe-nth subspace_groups i) j)]
                                                [(tuple-safe-nth unification_ptrns i) [unification_ptrn binding]]
                                                ["product" (tuple-safe-nth product_ptrns i) [n product]]
                                            ]
                                        )))))
                            ]
                            [consummation_results
                                (map continuation_group (proc [m [unification_ptrn continuations_struct]]
                                    (map continuations_struct (proc [n [product_ptrns_struct ctxt_triple]]
                                        (map product_ptrns_struct (proc [o [product_ptrn product]]
                                            (if (match? NameSpace (tuple-safe-nth product_ptrns i) product)
                                                [
                                                    [(tuple-safe-nth channels i) (tuple-safe-nth (tuple-safe-nth subspace_groups i) j)]
                                                    [(tuple-safe-nth unification_ptrns i) [unification_ptrn binding]]
                                                    ["continuation" (tuple-safe-nth product_ptrns i) [n o product]]
                                                ]
                                            )))))))
                            ]
                        ]
                        (tuple-concat (flatten production_results) (flatten (flatten consummation_results)))
                    )
                )
                ))))]
                            ;;; continuations_struct looks like [ [ [product_ptrn product] [product_ptrn #absent] ...] [ctxt code persistent]]

    ;;; Value function
    ;;;
    ;;; For each channel, chooses the product to match with.
    ;;; The input is a list of list of potential candidates. From each inner list, a candidate is chosen.
    ;;; Since the channels will be ordered by length, taking the head will always match the singletons first and then longer candidates.
    [reductions
        (let
            [[prefiltered_reductions (map candidates (proc [i channel_struct_group] (head (flatten channel_struct_group))))]]
            (if (any prefiltered_reductions (proc [channel] (null? channel))) [] prefiltered_reductions)
        )
    ]

    [_
        (seq
            (print "About to print reductions")
            (print reductions)
            (display #\\n)
        )]


    ;;; For each channel returned from value function, return the bindings and products and consume/delete it
    ;;; TODO: Return bindings and ptrn so they can be returned with ctxt-rtn
    [bindings_and_products
        (map reductions (proc [i channel]
            (let [[[[_ subspace] [_ [unification_ptrn binding]] [type _ product_info]] channel]]
                (if (= type "product")
                    (let*
                        [
                            [[data_struct continuations_struct] (tbl-get subspace unification_ptrn)]
                            [[n product] product_info]
                            [updated_data_struct (delete-i data_struct n)]
                        ]
                        (seq
                            (tbl-add subspace unification_ptrn [updated_data_struct continuations_struct])
                            [binding product]
                        )
                    )
                    ;;; (= type "continuation")
                    (let*
                        [
                            [[data_struct continuations_struct] (tbl-get subspace unification_ptrn)]
                            [[n o product] product_info]
                            [[product_ptrns_struct ctxt_triple] (tuple-safe-nth continuations_struct n)]
                            [[product_ptrn _] (tuple-safe-nth product_ptrns_struct o)]
                            [updated_product_ptrns_struct (replace-i product_ptrns_struct o [product_ptrn #absent])]
                            [updated_continuations_struct (replace-i continuations_struct n [updated_product_ptrns_struct ctxt_triple])]
                        ]
                        (seq
                            (tbl-add subspace unification_ptrn [data_struct updated_continuations_struct])
                            [binding product]
                        )
                    )))))]]

    (seq
        (if (null? bindings_and_products)
            ;;; If continuation was not consumed by a matching product (value function returned none), store it and suspend
            (seq
                (p "DEBUG: Waiting for data")
                (let*
                    [
                        [subspace (tuplespace-tbl-get-or-create chart channels_concatenated)]
                        [stored_value (tbl-get subspace unification_ptrns_concatenated)]
                        [new_product_ptrns_struct (map product_ptrns (proc [i product_ptrn] [product_ptrn #absent]))]
                    ]
                    (seq
                        (map channels (proc [i channel] (tbl-unique-append channel_lookup_table channel channels_concatenated)))
                        (tbl-add reverse_channel_lookup_table channels_concatenated channels)
                        (tbl-add unification_ptrn_lookup_table unification_ptrns_concatenated unification_ptrns)
                        (if (= #absent stored_value)
                            (tbl-add subspace unification_ptrns_concatenated [[] [[new_product_ptrns_struct [ctxt [code env] persistent]]]])
                            (let [[[data_struct continuations_struct] stored_value]]
                                (tbl-add subspace unification_ptrns_concatenated [data_struct (append continuations_struct [new_product_ptrns_struct [ctxt [code env] persistent]])])))))
                (update!)
            )
            (seq
                (p "DEBUG: Consume call got matched")
                (ctxt-rtn ctxt (twoZip bindings_and_products))
                (if persistent
                    (seq
                        (p "About to re-post continuation")
                        (update!)
                        (run-with-env code env)
                    )
                    (update!)
                )
            ))
        )))

;;; This code is mostly dual to the consumer code and so all the comments
;;; there apply in the corresponding code sites.
;;; Unlike consume, produce only takes in a single channel and does not suspend.

;;; TODO: Implement product stealing from consumes to allow for other consumes to be filled
(defRMethod NameSpace (produce ctxt-tuple & production)
(let* [
    [[ctxt _] ctxt-tuple]
    [[channel unification_ptrn product] production]
    [_
        (seq
                (print (->symbol "DEBUG: Calling produce("))
                (print channel)
                (print (->symbol ", "))
                (print unification_ptrn)
                (print (->symbol ", "))
                (print product)
                (print (->symbol ")"))
                (p "")

        )]

    [expanded_channels
        (seq
            (tbl-unique-append channel_lookup_table channel channel)
            (tbl-get channel_lookup_table channel)
        )
    ]
    [current_channel_positions
        (map expanded_channels (proc [i expanded_channel]
            (let [[channel_list (tbl-get reverse_channel_lookup_table expanded_channel)]]
                (if (= channel_list #absent)
                    0
                    (position channel_list channel)))))]
    [subspaces (map expanded_channels (proc [i channel] (tuplespace-tbl-get-or-create chart channel)))]
    [subspace_group_keys (map subspaces (proc [i subspace] (names subspace)))]
    [_
       (seq
           (print "About to print subspace_group_keys")
           (print subspace_group_keys)
           (display #\\n)
       )
    ]
    [candidates
        (map subspace_group_keys (proc [i subspace_keys]
            (let*
            [
                [[extractions remainder]
                    (fold subspace_keys
                        (proc [subspace_key acc k]
                            (let [[[hits misses] acc]
                                [binding (unify? NameSpace unification_ptrn subspace_key)]]
                            (if (niv? binding)
                                (k [hits [subspace_key & misses]])
                                (k [[[subspace_key binding] & hits] misses]))
                            )
                        ) [[] []])]
                           [_
                               (seq
                                   (print "About to print extractions")
                                   (print extractions)
                                   (display #\\n)
                               )
                           ]
                [[data_group continuation_group]
                    (fold extractions
                        (proc [[unification_ptrn binding] acc k]
                            (let* [[[data_group continuation_group] acc]
                                    [stored_value (tbl-get (tuple-safe-nth subspaces i) unification_ptrn)]
                                    [[data_struct continuation_struct] stored_value]]
                            (if (production? NameSpace stored_value)
                                (k [[] continuation_group])
                                (k [data_group [[[unification_ptrn binding] continuation_struct] & continuation_group]])))) [[] []])
                ]
            ]
            (map continuation_group (proc [m [[unification_ptrn binding] continuations_struct]]
                (map continuations_struct (proc [n [product_ptrns_struct ctxt_triple]]
                    (let*
                        [
                            [channel_position (tuple-safe-nth current_channel_positions i)]
                                ;;; TODO: This assumes that the channel cannot be in multiple positions in the consume, which is not necessarily true.
                            [[product_ptrn stored_product] (tuple-safe-nth product_ptrns_struct channel_position)]
                        ]
                        (if (match? NameSpace product_ptrn product)
                            [
                                [channel (tuple-safe-nth subspaces i)]
                                [unification_ptrn unification_ptrn]
                                [product [n channel_position product_ptrn]]
                            ]
                        )
                    ))))))))]

   [_
       (seq
           (print "About to print candidates")
           (print candidates)
           (display #\\n)
       )
   ]

    ;;; Value function
    ;;;
    ;;; Chooses the consume to be filled out of all potential consumes that can be filled.
    ;;; The current policy is to fill consumes that are almost filled and then fill the consume with the least number of channels.
    ;;; Since the channels will be ordered by length, taking the head will always take the singletons first and then longer candidates.
    [reduction
        (let*
            [
                [flattened_candidates (flatten (flatten candidates))] ;;; TODO: Refactor to (flattenN candidates 3) or (apply 3 flatten candidates)
                [filled_candidates (map flattened_candidates (proc [i candidate]
                    (let*
                        [
                            [[[channel subspace] [_ unification_ptrn] [_ product_info]] candidate]
                            [[data_struct continuations_struct] (tbl-get subspace unification_ptrn)]
                            [[n o product_ptrn] product_info]
                            [[product_ptrns_struct ctxt_triple] (tuple-safe-nth continuations_struct n)]
                            [updated_product_ptrns_struct (replace-i product_ptrns_struct o [product_ptrn product])]
                        ]
                        (if (all updated_product_ptrns_struct (proc [[product_ptrn product]] (not (= product #absent))))
                            candidate
                        ))))
                ]
            ]
            (if (all filled_candidates (proc [candidate] (niv? candidate)))
                (head flattened_candidates)
                (head (filter-niv filled_candidates)))
         )
    ]
    [_
        (seq
            (print "About to print reduction")
            (print reduction)
            (display #\\n)
        )]
    ]
    (seq
        (if (null? reduction)
            ;;; If product was not consumed by a matching continuation above, store it directly
            (let*
                [
                    [subspace (tuplespace-tbl-get-or-create chart channel)]
                    [stored_value (tbl-get subspace unification_ptrn)]
                ]
                (seq
                    (p "DEBUG: No consumes were filled. Storing product.")
                    (tbl-add unification_ptrn_lookup_table (->symbol unification_ptrn) [unification_ptrn])
                    (if (= #absent stored_value)
                        (tbl-add subspace unification_ptrn [[product] []])
                        (let [[[data_struct continuation_struct] (tbl-get subspace unification_ptrn)]]
                            (tbl-add subspace unification_ptrn [(append data_struct product) continuation_struct])))
                    (ctxt-rtn ctxt product)
                    (update!)))

            ;;; If product was consumed, fill consume
            (let*
                [
                    [[[_ subspace] [_ unification_ptrn] [_ product_info]] reduction]
                    [[data_struct continuations_struct] (tbl-get subspace unification_ptrn)]
                    [[n o product_ptrn] product_info]
                    [[product_ptrns_struct [consume_ctxt [consume_code consume_env] consume_persistent]] (tuple-safe-nth continuations_struct n)]
                    [updated_product_ptrns_struct (replace-i product_ptrns_struct o [product_ptrn product])] ;;; TODO: Eventually store binding
                ]

                ;;; If all product patterns are filled, send ctxt-rtn
                (if (all updated_product_ptrns_struct (proc [[product_ptrn product]] (not (= product #absent))))
                    (seq
                        ;;; TODO: Replace dummy bindings
                        (p "DEBUG: A consume was fully filled. Sending all products.")
                        (ctxt-rtn consume_ctxt [(newN Tuple (length updated_product_ptrns_struct) #t) (map updated_product_ptrns_struct (proc [j [product_ptrn product]] product))])
                        (let [[updated_continuations_struct (delete-i continuations_struct n)]]
                            (tbl-add subspace unification_ptrn [data_struct updated_continuations_struct])
                        )
                        (ctxt-rtn ctxt product)
                        (if consume_persistent
                            (seq
                                (p "About to re-post continuation")
                                (update!)
                                (run-with-env consume_code consume_env)
                            )
                            (update!)
                        )
                    )
                    (let [[updated_continuations_struct (replace-i continuations_struct n [updated_product_ptrns_struct [consume_ctxt [consume_code consume_env] consume_persistent]])]]
                        (seq
                            (p "DEBUG: A consume was partially filled.")
                            (tbl-add subspace unification_ptrn [data_struct updated_continuations_struct])
                            (ctxt-rtn ctxt product)
                            (update!)
                        )
                    )
                )
            )
        )
    )))

(define t (new NameSpace))