-- Top level contract declaration
DContr. Contr ::= Proc1 ;

-- Processes
PNil.     Proc4 ::= "Nil" ;
PValue.   Proc4 ::= Value;
PDrop.    Proc3 ::= "*" Chan ;
PInject.  Proc3 ::= "#" Chan ;
PLift.    Proc2 ::= Chan "!" "(" [Proc] ")" ;
PFoldL.   Proc1 ::= "sum" "(" Bind "/:" Bind ")" "{" Proc "}" ;
PFoldR.   Proc1 ::= "total" "(" Bind ":\\" Bind ")" "{" Proc "}" ;
PInput.   Proc1 ::= "for" "(" [Bind] ")" "{" Proc "}" ;
PChoice.  Proc1 ::= "select" "{" [CBranch] "}" ;
PMatch.   Proc1 ::= "match" Proc "with" [PMBranch] ;
PNew.     Proc1 ::= "new" [Var] "in" Proc1 ;
PPrint.   Proc1 ::= "print" "(" Proc ")" ;
PConstr.  Proc1 ::= Var "(" [Proc] ")" ;
PContr.   Proc1 ::= "contract" Var "(" [CPattern] ")" "=" "{" Proc "}" ;
PPar.     Proc  ::= Proc "|" Proc1 ;
separator nonempty Proc "," ;
_. Proc  ::= Proc1 ;
_. Proc1 ::= Proc2 ;
_. Proc2 ::= Proc3 ;
_. Proc3 ::= Proc4 ;
_. Proc4 ::= "{" Proc "}" ;

-- Channels
CVar.    Chan ::= Var ;
CQuote.  Chan ::= "@" Proc3 ;

-- Variable binding
InputBind.     Bind ::= CPattern "<-" Chan ;
CondInputBind. Bind ::= CPattern "<-" Chan "if" Proc ;
separator nonempty Bind ";" ;

-- Pattern match branches
PatternMatch. PMBranch ::= PPattern "=>" "{" Proc "}" ;
separator nonempty PMBranch "" ; 

-- Choice branch
Choice. CBranch ::= "case" [Bind] "=>" "{" Proc "}" ;
separator nonempty CBranch "" ;

-- Quantity
QTrue.    RhoBool   ::= "true" ;
QFalse.   RhoBool   ::= "false" ;
QBool.    Quantity7 ::= RhoBool ;
QInt.     Quantity7 ::= Integer ;
QDouble.  Quantity7 ::= Double ;
QString.  Quantity7 ::= String;
QVar.     Quantity7 ::= Var;
QMap.     Quantity7 ::= "Map()" ;
QDot.     Quantity6 ::= Quantity7 "." Var "(" [Quantity] ")" ;
QNeg.     Quantity5 ::= "-" Quantity6 ;
QMult.    Quantity4 ::= Quantity4 "*" Quantity5 ;
QDiv.     Quantity4 ::= Quantity4 "/" Quantity5 ;
QAdd.     Quantity3 ::= Quantity3 "+" Quantity4 ;
QMinus.   Quantity3 ::= Quantity3 "-" Quantity4 ;
QLt.      Quantity2 ::= Quantity2 "<" Quantity3 ;
QLte.     Quantity2 ::= Quantity2 "<=" Quantity3 ;
QGt.      Quantity2 ::= Quantity2 ">" Quantity3 ;
QGte.     Quantity2 ::= Quantity2 ">=" Quantity3 ;
QEq.      Quantity1 ::= Quantity1 "==" Quantity2 ;
QNeq.     Quantity1 ::= Quantity1 "!=" Quantity2 ;
_. Quantity  ::= Quantity1 ;
_. Quantity1 ::= Quantity2 ;
_. Quantity2 ::= Quantity3 ;
_. Quantity3 ::= Quantity4 ;
_. Quantity4 ::= Quantity5 ;
_. Quantity5 ::= Quantity6 ;
_. Quantity6 ::= Quantity7 ;
_. Quantity7 ::= "(" Quantity ")" ;
separator Quantity "," ;

-- Values
VQuant.   Value   ::= Quantity ;
EChar.    Value   ::= Char ;
ETuple.   Value   ::= "[" [Proc] "]" ;

-- EStruct.  Entity   ::= Struct ;
-- ECollect. Entity   ::= Collect ;
-- StructConstr. Struct ::= Var "{" [Proc] "}" ;
-- CString. Collect ::= String ;
-- EDate.    Entity   ::= Datetime ;
-- CArray.  Collect ::= Array ;
-- CList.   Collect ::= List ;

-- Variable patterns
VarPtVar.  VarPattern ::= Var ;
VarPtWild. VarPattern ::= "_" ;
separator VarPattern "," ;

-- Process patterns
PPtVal.    PPattern4 ::= ValPattern ;
PPtVar.    PPattern4 ::= VarPattern ;
PPtNil.    PPattern4 ::= "Nil" ;
PPtDrop.   PPattern3 ::= "*" CPattern ;
PPtInject. PPattern3 ::= "#" CPattern ;
PPtOutput. PPattern2 ::= CPattern "!" "(" [PPattern] ")" ;
PPtInput.  PPattern1 ::= "for" "(" [PatternBind] ")" "{" PPattern "}" ;
PPtMatch.  PPattern1 ::= "match" PPattern "with" [PatternPatternMatch] ;
PPtNew.    PPattern1 ::= "new" [VarPattern] "in" PPattern1 ;
PPtConstr. PPattern1 ::= Var "(" [PPattern] ")" ;
PPtSet.    PPattern1 ::= "Set" "(" [PPattern] ")" ;
PPtTuple.  PPattern1 ::= "Tuple" "(" [PPattern] ")" ;
PPtStruct. PPattern1 ::= Var "(" [PPattern] ")" ;
PPtMap.    PPattern1 ::= "Map" "(" [ ValPairPattern ] ")" ;
PPtPar.    PPattern  ::= PPattern "|" PPattern1 ;
separator PPattern "," ;
coercions PPattern 4 ;

-- Channel patterns
CPtVar.    CPattern ::= VarPattern ;
CValPtrn.  CPattern ::= ValPattern ;
CPtQuote.  CPattern ::= "@" PPattern3 ;
separator CPattern "," ;

-- Bind pattern
PtBind.   PatternBind ::= CPattern "<-" CPattern ;
separator nonempty PatternBind ";" ;

-- Pattern match branch pattern
PtBranch. PatternPatternMatch ::= PPattern "=>" "{" PPattern "}" ;
separator nonempty PatternPatternMatch "" ;

-- Value patterns

-- We only allow for constants in pattern matches
-- unlike for Procs which can have arbitrary operations
VPtStruct. ValPattern ::= Var "{" [PPattern] "}" ;
VPtTuple. ValPattern ::= "Tuple" "{" [PPattern] "}" ;
VPtSet. ValPattern ::= "Set" "{" [PPattern] "}" ;
VPtPair. ValPairPattern ::= PPattern "=>" PPattern ;
VPtMap. ValPattern ::= "Map" "{" [ ValPairPattern ] "}" ;
VPtTrue. ValPattern ::= "true" ;
VPtFalse. ValPattern ::= "false" ;
VPtInt. ValPattern ::= Integer ;
VPtDbl. ValPattern ::= Double ;
VPtNegInt. ValPattern ::= "-" Integer;
VPtNegDbl. ValPattern ::= "-" Double;
VPtStr. ValPattern ::= String ;
--VPtString. ValPattern ::=  ;
--VPtArray.  ValPattern ::=  ;
--VPtList.   ValPattern ::=  ;
separator nonempty ValPattern "," ;
separator nonempty ValPairPattern "," ;

-- Names and variables
token Name (upper (letter | digit | '_' | '\'' | '-' )*) ;
token Var (lower (letter | digit | '_' | '\'' | '-')*) ;

separator nonempty Var "," ;
separator nonempty Name "," ;

comment "//" ;
comment "/*" "*/" ;
