// -*- Java -*- This Cup file was machine-generated by BNFC
package coop.rchain.syntax.rholang;

parser code {:
  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal coop.rchain.syntax.rholang.Absyn.Contr Contr;
nonterminal coop.rchain.syntax.rholang.Absyn.Proc Proc4;
nonterminal coop.rchain.syntax.rholang.Absyn.Proc Proc3;
nonterminal coop.rchain.syntax.rholang.Absyn.Proc Proc2;
nonterminal coop.rchain.syntax.rholang.Absyn.Proc Proc1;
nonterminal coop.rchain.syntax.rholang.Absyn.Proc Proc;
nonterminal coop.rchain.syntax.rholang.Absyn.ListProc ListProc;
nonterminal coop.rchain.syntax.rholang.Absyn.Chan Chan;
nonterminal coop.rchain.syntax.rholang.Absyn.Bind Bind;
nonterminal coop.rchain.syntax.rholang.Absyn.ListBind ListBind;
nonterminal coop.rchain.syntax.rholang.Absyn.PMBranch PMBranch;
nonterminal coop.rchain.syntax.rholang.Absyn.ListPMBranch ListPMBranch;
nonterminal coop.rchain.syntax.rholang.Absyn.CBranch CBranch;
nonterminal coop.rchain.syntax.rholang.Absyn.ListCBranch ListCBranch;
nonterminal coop.rchain.syntax.rholang.Absyn.RhoBool RhoBool;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity7;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity6;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity5;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity4;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity3;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity2;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity1;
nonterminal coop.rchain.syntax.rholang.Absyn.Quantity Quantity;
nonterminal coop.rchain.syntax.rholang.Absyn.ListQuantity ListQuantity;
nonterminal coop.rchain.syntax.rholang.Absyn.Value Value;
nonterminal coop.rchain.syntax.rholang.Absyn.VarPattern VarPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.ListVarPattern ListVarPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.PPattern PPattern4;
nonterminal coop.rchain.syntax.rholang.Absyn.PPattern PPattern3;
nonterminal coop.rchain.syntax.rholang.Absyn.PPattern PPattern2;
nonterminal coop.rchain.syntax.rholang.Absyn.PPattern PPattern1;
nonterminal coop.rchain.syntax.rholang.Absyn.PPattern PPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.ListPPattern ListPPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.CPattern CPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.ListCPattern ListCPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.PatternBind PatternBind;
nonterminal coop.rchain.syntax.rholang.Absyn.ListPatternBind ListPatternBind;
nonterminal coop.rchain.syntax.rholang.Absyn.PatternPatternMatch PatternPatternMatch;
nonterminal coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch ListPatternPatternMatch;
nonterminal coop.rchain.syntax.rholang.Absyn.ValPattern ValPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.ListValPattern ListValPattern;
nonterminal coop.rchain.syntax.rholang.Absyn.ListVar ListVar;
nonterminal coop.rchain.syntax.rholang.Absyn.ListName ListName;

terminal _SYMB_0;    //   *
terminal _SYMB_1;    //   #
terminal _SYMB_2;    //   !
terminal _SYMB_3;    //   (
terminal _SYMB_4;    //   )
terminal _SYMB_5;    //   /:
terminal _SYMB_6;    //   {
terminal _SYMB_7;    //   }
terminal _SYMB_8;    //   :\
terminal _SYMB_9;    //   =
terminal _SYMB_10;    //   |
terminal _SYMB_11;    //   ,
terminal _SYMB_12;    //   @
terminal _SYMB_13;    //   <-
terminal _SYMB_14;    //   ;
terminal _SYMB_15;    //   =>
terminal _SYMB_16;    //   Map()
terminal _SYMB_17;    //   .
terminal _SYMB_18;    //   -
terminal _SYMB_19;    //   /
terminal _SYMB_20;    //   +
terminal _SYMB_21;    //   <
terminal _SYMB_22;    //   <=
terminal _SYMB_23;    //   >
terminal _SYMB_24;    //   >=
terminal _SYMB_25;    //   ==
terminal _SYMB_26;    //   !=
terminal _SYMB_27;    //   [
terminal _SYMB_28;    //   ]
terminal _SYMB_29;    //   _
terminal _SYMB_30;    //   Nil
terminal _SYMB_31;    //   case
terminal _SYMB_32;    //   contract
terminal _SYMB_33;    //   false
terminal _SYMB_34;    //   for
terminal _SYMB_35;    //   if
terminal _SYMB_36;    //   in
terminal _SYMB_37;    //   match
terminal _SYMB_38;    //   new
terminal _SYMB_39;    //   print
terminal _SYMB_40;    //   select
terminal _SYMB_41;    //   sum
terminal _SYMB_42;    //   total
terminal _SYMB_43;    //   true
terminal _SYMB_44;    //   with

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String Name;
terminal String Var;


start with Contr;


Contr ::= Proc1:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_1); :} 
;
Proc4 ::= _SYMB_30  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); :} 
  | Value:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); :}
  | _SYMB_6 Proc:p_2 _SYMB_7  {: RESULT = p_2; :}
;
Proc3 ::= _SYMB_0 Chan:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); :} 
  | _SYMB_1 Chan:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); :}
  | Proc4:p_1  {: RESULT = p_1; :}
;
Proc2 ::= Chan:p_1 _SYMB_2 _SYMB_3 ListProc:p_4 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); :} 
  | Proc3:p_1  {: RESULT = p_1; :}
;
Proc1 ::= _SYMB_41 _SYMB_3 Bind:p_3 _SYMB_5 Bind:p_5 _SYMB_4 _SYMB_6 Proc:p_8 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); :} 
  | _SYMB_42 _SYMB_3 Bind:p_3 _SYMB_8 Bind:p_5 _SYMB_4 _SYMB_6 Proc:p_8 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); :}
  | _SYMB_34 _SYMB_3 ListBind:p_3 _SYMB_4 _SYMB_6 Proc:p_6 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); :}
  | _SYMB_40 _SYMB_6 ListCBranch:p_3 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); :}
  | _SYMB_37 Proc:p_2 _SYMB_44 ListPMBranch:p_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); :}
  | _SYMB_38 ListVar:p_2 _SYMB_36 Proc1:p_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); :}
  | _SYMB_39 _SYMB_3 Proc:p_3 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPrint(p_3); :}
  | Var:p_1 _SYMB_3 ListProc:p_3 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); :}
  | _SYMB_32 Var:p_2 _SYMB_3 ListCPattern:p_4 _SYMB_4 _SYMB_9 _SYMB_6 Proc:p_8 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PContr(p_2,p_4,p_8); :}
  | Proc2:p_1  {: RESULT = p_1; :}
;
Proc ::= Proc:p_1 _SYMB_10 Proc1:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); :} 
  | Proc1:p_1  {: RESULT = p_1; :}
;
ListProc ::= Proc:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); :} 
  | Proc:p_1 _SYMB_11 ListProc:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Chan ::= Var:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); :} 
  | _SYMB_12 Proc3:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); :}
;
Bind ::= CPattern:p_1 _SYMB_13 Chan:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); :} 
  | CPattern:p_1 _SYMB_13 Chan:p_3 _SYMB_35 Proc:p_5  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); :}
;
ListBind ::= Bind:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); :} 
  | Bind:p_1 _SYMB_14 ListBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PMBranch ::= PPattern:p_1 _SYMB_15 _SYMB_6 Proc:p_4 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); :} 
;
ListPMBranch ::= PMBranch:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); :} 
  | PMBranch:p_1 ListPMBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
CBranch ::= _SYMB_31 ListBind:p_2 _SYMB_15 _SYMB_6 Proc:p_5 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); :} 
;
ListCBranch ::= CBranch:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); :} 
  | CBranch:p_1 ListCBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
RhoBool ::= _SYMB_43  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); :} 
  | _SYMB_33  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); :}
;
Quantity7 ::= RhoBool:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); :}
  | _STRING_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QString(p_1); :}
  | Var:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QVar(p_1); :}
  | _SYMB_16  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QMap(); :}
  | _SYMB_3 Quantity:p_2 _SYMB_4  {: RESULT = p_2; :}
;
Quantity6 ::= Quantity7:p_1 _SYMB_17 Var:p_3 _SYMB_3 ListQuantity:p_5 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QDot(p_1,p_3,p_5); :} 
  | Quantity7:p_1  {: RESULT = p_1; :}
;
Quantity5 ::= _SYMB_18 Quantity6:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QNeg(p_2); :} 
  | Quantity6:p_1  {: RESULT = p_1; :}
;
Quantity4 ::= Quantity4:p_1 _SYMB_0 Quantity5:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QMult(p_1,p_3); :} 
  | Quantity4:p_1 _SYMB_19 Quantity5:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QDiv(p_1,p_3); :}
  | Quantity5:p_1  {: RESULT = p_1; :}
;
Quantity3 ::= Quantity3:p_1 _SYMB_20 Quantity4:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QAdd(p_1,p_3); :} 
  | Quantity3:p_1 _SYMB_18 Quantity4:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QMinus(p_1,p_3); :}
  | Quantity4:p_1  {: RESULT = p_1; :}
;
Quantity2 ::= Quantity2:p_1 _SYMB_21 Quantity3:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QLt(p_1,p_3); :} 
  | Quantity2:p_1 _SYMB_22 Quantity3:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QLte(p_1,p_3); :}
  | Quantity2:p_1 _SYMB_23 Quantity3:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QGt(p_1,p_3); :}
  | Quantity2:p_1 _SYMB_24 Quantity3:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QGte(p_1,p_3); :}
  | Quantity3:p_1  {: RESULT = p_1; :}
;
Quantity1 ::= Quantity1:p_1 _SYMB_25 Quantity2:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QEq(p_1,p_3); :} 
  | Quantity1:p_1 _SYMB_26 Quantity2:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.QNeq(p_1,p_3); :}
  | Quantity2:p_1  {: RESULT = p_1; :}
;
Quantity ::= Quantity1:p_1  {: RESULT = p_1; :} 
;
ListQuantity ::=  /* empty */  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); :} 
  | Quantity:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); RESULT.addLast(p_1); :}
  | Quantity:p_1 _SYMB_11 ListQuantity:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Value ::= Quantity:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); :} 
  | _CHAR_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); :}
  | _SYMB_27 ListProc:p_2 _SYMB_28  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); :}
;
VarPattern ::= Var:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); :} 
  | _SYMB_29  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); :}
;
ListVarPattern ::=  /* empty */  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); :} 
  | VarPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); :}
  | VarPattern:p_1 _SYMB_11 ListVarPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PPattern4 ::= VarPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); :} 
  | _SYMB_30  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); :}
  | ValPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); :}
  | _SYMB_3 PPattern:p_2 _SYMB_4  {: RESULT = p_2; :}
;
PPattern3 ::= _SYMB_0 CPattern:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); :} 
  | _SYMB_1 CPattern:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); :}
  | PPattern4:p_1  {: RESULT = p_1; :}
;
PPattern2 ::= CPattern:p_1 _SYMB_2 _SYMB_3 ListPPattern:p_4 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); :} 
  | PPattern3:p_1  {: RESULT = p_1; :}
;
PPattern1 ::= _SYMB_34 _SYMB_3 ListPatternBind:p_3 _SYMB_4 _SYMB_6 PPattern:p_6 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); :} 
  | _SYMB_37 PPattern:p_2 _SYMB_44 ListPatternPatternMatch:p_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); :}
  | _SYMB_38 ListVarPattern:p_2 _SYMB_36 PPattern1:p_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); :}
  | Var:p_1 _SYMB_3 ListPPattern:p_3 _SYMB_4  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); :}
  | PPattern2:p_1  {: RESULT = p_1; :}
;
PPattern ::= PPattern:p_1 _SYMB_10 PPattern1:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); :} 
  | PPattern1:p_1  {: RESULT = p_1; :}
;
ListPPattern ::=  /* empty */  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); :} 
  | PPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); :}
  | PPattern:p_1 _SYMB_11 ListPPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
CPattern ::= VarPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); :} 
  | ValPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); :}
  | _SYMB_12 PPattern3:p_2  {: RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); :}
;
ListCPattern ::=  /* empty */  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); :} 
  | CPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); :}
  | CPattern:p_1 _SYMB_11 ListCPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternBind ::= CPattern:p_1 _SYMB_13 CPattern:p_3  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); :} 
;
ListPatternBind ::= PatternBind:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); :} 
  | PatternBind:p_1 _SYMB_14 ListPatternBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternPatternMatch ::= PPattern:p_1 _SYMB_15 _SYMB_6 PPattern:p_4 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); :} 
;
ListPatternPatternMatch ::= PatternPatternMatch:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); :} 
  | PatternPatternMatch:p_1 ListPatternPatternMatch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ValPattern ::= Var:p_1 _SYMB_6 ListPPattern:p_3 _SYMB_7  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); :} 
  | _SYMB_21 ListPPattern:p_2 _SYMB_23  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); :}
  | _SYMB_43  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); :}
  | _SYMB_33  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); :}
  | _INTEGER_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); :}
  | _STRING_:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); :}
;
ListValPattern ::= ValPattern:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); :} 
  | ValPattern:p_1 _SYMB_11 ListValPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListVar ::= Var:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); :} 
  | Var:p_1 _SYMB_11 ListVar:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListName ::= Name:p_1  {: RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); :} 
  | Name:p_1 _SYMB_11 ListName:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

