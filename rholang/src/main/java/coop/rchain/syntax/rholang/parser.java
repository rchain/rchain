
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 07 14:39:09 PDT 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 07 14:39:09 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\007\000" +
    "\002\005\003\000\002\006\013\000\002\006\013\000\002" +
    "\006\011\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\013" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\004\000\002\012\005\000\002\012\007\000\002\013" +
    "\003\000\002\013\005\000\002\014\007\000\002\015\003" +
    "\000\002\015\004\000\002\016\010\000\002\017\003\000" +
    "\002\017\004\000\002\020\003\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\022\010\000\002\022\003\000\002\023\004\000" +
    "\002\023\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\003\000\002\030\003\000\002" +
    "\031\002\000\002\031\003\000\002\031\005\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\033\003" +
    "\000\002\033\003\000\002\034\002\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\005\000\002\036\004\000\002\036" +
    "\004\000\002\036\003\000\002\037\007\000\002\037\003" +
    "\000\002\040\011\000\002\040\006\000\002\040\006\000" +
    "\002\040\006\000\002\040\003\000\002\041\005\000\002" +
    "\041\003\000\002\042\002\000\002\042\003\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\004" +
    "\000\002\044\002\000\002\044\003\000\002\044\005\000" +
    "\002\045\005\000\002\046\003\000\002\046\005\000\002" +
    "\047\007\000\002\050\003\000\002\050\004\000\002\051" +
    "\006\000\002\051\005\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\052\003\000\002\052\005\000\002\053\003\000\002" +
    "\053\005\000\002\054\003\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\062\004\016\005\015\007\014\012\012\020" +
    "\006\024\005\026\004\037\050\042\036\044\034\045\033" +
    "\046\032\051\030\052\027\053\026\054\013\055\011\056" +
    "\010\057\007\061\025\062\053\063\024\064\051\066\017" +
    "\001\002\000\022\007\014\024\005\045\033\057\007\061" +
    "\025\063\024\064\051\066\073\001\002\000\062\002\uffd6" +
    "\004\uffd6\006\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016" +
    "\uffd6\017\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\047\uffd6\060\uffd6\001\002\000\040\004\016" +
    "\005\015\007\014\012\012\024\005\026\004\037\050\042" +
    "\036\045\033\057\007\061\025\062\053\063\024\064\051" +
    "\066\073\001\002\000\062\002\uffdd\004\uffdd\006\uffdd\010" +
    "\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\022\uffdd" +
    "\023\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\047\uffdd" +
    "\060\uffdd\001\002\000\004\007\356\001\002\000\004\007" +
    "\346\001\002\000\062\004\016\005\015\007\014\012\012" +
    "\020\006\024\005\026\004\037\050\042\036\044\034\045" +
    "\033\046\032\051\030\052\027\053\026\054\013\055\011" +
    "\056\010\057\007\061\025\062\053\063\024\064\051\066" +
    "\017\001\002\000\004\012\331\001\002\000\024\007\014" +
    "\024\005\026\004\045\033\057\007\061\025\063\024\064" +
    "\051\066\073\001\002\000\006\020\006\066\274\001\002" +
    "\000\006\020\006\066\274\001\002\000\062\002\uffd7\004" +
    "\uffd7\006\uffe9\007\322\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\040\uffd7\060\uffd7\001\002\000\034\002\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa" +
    "\022\ufffa\023\ufffa\040\ufffa\047\ufffa\060\ufffa\001\002\000" +
    "\030\002\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\016\ufff8" +
    "\017\ufff8\022\ufff8\023\ufff8\040\ufff8\060\ufff8\001\002\000" +
    "\030\002\uffee\010\uffee\011\uffee\013\uffee\014\uffee\016\uffee" +
    "\017\uffee\022\uffee\023\uffee\040\uffee\060\uffee\001\002\000" +
    "\004\002\000\001\002\000\062\002\uffda\004\uffda\006\uffda" +
    "\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\017\uffda\022" +
    "\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\047" +
    "\uffda\060\uffda\001\002\000\062\002\uffd8\004\uffd8\006\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\022" +
    "\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\047" +
    "\uffd8\060\uffd8\001\002\000\004\007\317\001\002\000\004" +
    "\066\312\001\002\000\062\004\016\005\015\007\014\012" +
    "\012\020\006\024\005\026\004\037\050\042\036\044\034" +
    "\045\033\046\032\051\030\052\027\053\026\054\013\055" +
    "\011\056\010\057\007\061\025\062\053\063\024\064\051" +
    "\066\017\001\002\000\062\002\uffdb\004\uffdb\006\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\022\uffdb" +
    "\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\047\uffdb" +
    "\060\uffdb\001\002\000\004\007\260\001\002\000\062\002" +
    "\uffdc\004\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\017\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\040\uffdc\047\uffdc\060\uffdc\001\002\000\004\066" +
    "\126\001\002\000\004\002\125\001\002\000\034\002\uffff" +
    "\006\uffff\010\uffff\011\uffff\013\uffff\014\uffff\016\uffff\017" +
    "\uffff\022\uffff\023\uffff\040\uffff\047\uffff\060\uffff\001\002" +
    "\000\034\002\ufffe\006\ufffe\010\ufffe\011\ufffe\013\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\022\ufffe\023\ufffe\040\ufffe\047\ufffe" +
    "\060\ufffe\001\002\000\062\002\uffd3\004\uffd3\006\uffd3\010" +
    "\uffd3\011\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\025\115\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\047\uffd3" +
    "\060\uffd3\001\002\000\060\002\uffd1\004\uffd1\006\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\047\uffd1\060\uffd1" +
    "\001\002\000\060\002\uffce\004\uffce\006\uffce\010\uffce\011" +
    "\uffce\013\uffce\014\uffce\016\uffce\017\uffce\022\uffce\023\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\047\uffce\060\uffce\001\002" +
    "\000\060\002\uffcb\004\105\006\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\026\uffcb" +
    "\027\104\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\040\uffcb\047\uffcb\060\uffcb\001\002\000\054" +
    "\002\uffc6\006\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\022\uffc6\023\uffc6\026\102\030\101\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\047" +
    "\uffc6\060\uffc6\001\002\000\050\002\uffc3\006\uffc3\010\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\031\075\032\074\033\077\034\076\035\uffc3\036\uffc3" +
    "\040\uffc3\047\uffc3\060\uffc3\001\002\000\040\002\uffc2\006" +
    "\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2" +
    "\022\uffc2\023\uffc2\035\071\036\070\040\uffc2\047\uffc2\060" +
    "\uffc2\001\002\000\004\006\064\001\002\000\062\004\016" +
    "\005\015\007\014\012\012\020\006\024\005\026\004\037" +
    "\050\042\036\044\034\045\033\046\032\051\030\052\027" +
    "\053\026\054\013\055\011\056\010\057\007\061\025\062" +
    "\053\063\024\064\051\066\017\001\002\000\062\002\uffd9" +
    "\004\uffd9\006\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016" +
    "\uffd9\017\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\040\uffd9\047\uffd9\060\uffd9\001\002\000\034\002\uffbe" +
    "\006\uffbe\010\uffbe\011\uffbe\013\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\022\uffbe\023\uffbe\040\uffbe\047\uffbe\060\uffbe\001\002" +
    "\000\034\002\uffbd\006\uffbd\010\uffbd\011\uffbd\013\uffbd\014" +
    "\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd\040\uffbd\047\uffbd" +
    "\060\uffbd\001\002\000\004\040\063\001\002\000\026\010" +
    "\uffec\011\uffec\013\uffec\014\uffec\016\uffec\017\uffec\022\uffec" +
    "\023\uffec\040\uffec\060\uffec\001\002\000\012\010\uffeb\016" +
    "\057\017\060\040\uffeb\001\002\000\062\004\016\005\015" +
    "\007\014\012\012\020\006\024\005\026\004\037\050\042" +
    "\036\044\034\045\033\046\032\051\030\052\027\053\026" +
    "\054\013\055\011\056\010\057\007\061\025\062\053\063" +
    "\024\064\051\066\017\001\002\000\062\004\016\005\015" +
    "\007\014\012\012\020\006\024\005\026\004\037\050\042" +
    "\036\044\034\045\033\046\032\051\030\052\027\053\026" +
    "\054\013\055\011\056\010\057\007\061\025\062\053\063" +
    "\024\064\051\066\017\001\002\000\006\010\uffea\040\uffea" +
    "\001\002\000\026\010\uffed\011\uffed\013\uffed\014\uffed\016" +
    "\uffed\017\uffed\022\uffed\023\uffed\040\uffed\060\uffed\001\002" +
    "\000\034\002\uffbc\006\uffbc\010\uffbc\011\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\017\uffbc\022\uffbc\023\uffbc\040\uffbc\047\uffbc" +
    "\060\uffbc\001\002\000\004\007\065\001\002\000\062\004" +
    "\016\005\015\007\014\012\012\020\006\024\005\026\004" +
    "\037\050\042\036\044\034\045\033\046\032\051\030\052" +
    "\027\053\026\054\013\055\011\056\010\057\007\061\025" +
    "\062\053\063\024\064\051\066\017\001\002\000\004\010" +
    "\067\001\002\000\030\002\ufff9\010\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\016\ufff9\017\ufff9\022\ufff9\023\ufff9\040\ufff9\060" +
    "\ufff9\001\002\000\024\007\014\024\005\026\004\045\033" +
    "\057\007\061\025\063\024\064\051\066\073\001\002\000" +
    "\024\007\014\024\005\026\004\045\033\057\007\061\025" +
    "\063\024\064\051\066\073\001\002\000\050\002\uffc5\006" +
    "\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\022\uffc5\023\uffc5\031\075\032\074\033\077\034\076\035" +
    "\uffc5\036\uffc5\040\uffc5\047\uffc5\060\uffc5\001\002\000\062" +
    "\002\uffd7\004\uffd7\006\uffd7\010\uffd7\011\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\040\uffd7\047\uffd7\060\uffd7\001\002\000\024" +
    "\007\014\024\005\026\004\045\033\057\007\061\025\063" +
    "\024\064\051\066\073\001\002\000\024\007\014\024\005" +
    "\026\004\045\033\057\007\061\025\063\024\064\051\066" +
    "\073\001\002\000\024\007\014\024\005\026\004\045\033" +
    "\057\007\061\025\063\024\064\051\066\073\001\002\000" +
    "\024\007\014\024\005\026\004\045\033\057\007\061\025" +
    "\063\024\064\051\066\073\001\002\000\054\002\uffc8\006" +
    "\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\022\uffc8\023\uffc8\026\102\030\101\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\040\uffc8\047\uffc8\060\uffc8" +
    "\001\002\000\024\007\014\024\005\026\004\045\033\057" +
    "\007\061\025\063\024\064\051\066\073\001\002\000\024" +
    "\007\014\024\005\026\004\045\033\057\007\061\025\063" +
    "\024\064\051\066\073\001\002\000\060\002\uffcc\004\105" +
    "\006\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\017" +
    "\uffcc\022\uffcc\023\uffcc\026\uffcc\027\104\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\047" +
    "\uffcc\060\uffcc\001\002\000\024\007\014\024\005\026\004" +
    "\045\033\057\007\061\025\063\024\064\051\066\073\001" +
    "\002\000\024\007\014\024\005\026\004\045\033\057\007" +
    "\061\025\063\024\064\051\066\073\001\002\000\060\002" +
    "\uffd0\004\uffd0\006\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\022\uffd0\023\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\047\uffd0\060\uffd0\001\002\000\060\002\uffcf\004" +
    "\uffcf\006\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf" +
    "\047\uffcf\060\uffcf\001\002\000\060\002\uffcd\004\105\006" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd" +
    "\022\uffcd\023\uffcd\026\uffcd\027\104\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\047\uffcd" +
    "\060\uffcd\001\002\000\054\002\uffc7\006\uffc7\010\uffc7\011" +
    "\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7" +
    "\026\102\030\101\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\040\uffc7\047\uffc7\060\uffc7\001\002\000\054" +
    "\002\uffca\006\uffca\010\uffca\011\uffca\013\uffca\014\uffca\016" +
    "\uffca\017\uffca\022\uffca\023\uffca\026\102\030\101\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\040\uffca\047" +
    "\uffca\060\uffca\001\002\000\054\002\uffc9\006\uffc9\010\uffc9" +
    "\011\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\026\102\030\101\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\040\uffc9\047\uffc9\060\uffc9\001\002\000" +
    "\050\002\uffc4\006\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4" +
    "\016\uffc4\017\uffc4\022\uffc4\023\uffc4\031\075\032\074\033" +
    "\077\034\076\035\uffc4\036\uffc4\040\uffc4\047\uffc4\060\uffc4" +
    "\001\002\000\004\066\116\001\002\000\004\007\117\001" +
    "\002\000\026\007\014\010\uffc1\024\005\026\004\045\033" +
    "\057\007\061\025\063\024\064\051\066\073\001\002\000" +
    "\006\010\uffc0\017\123\001\002\000\004\010\122\001\002" +
    "\000\060\002\uffd4\004\uffd4\006\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\014\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\047\uffd4\060\uffd4\001\002\000\026" +
    "\007\014\010\uffc1\024\005\026\004\045\033\057\007\061" +
    "\025\063\024\064\051\066\073\001\002\000\004\010\uffbf" +
    "\001\002\000\004\002\001\001\002\000\004\007\127\001" +
    "\002\000\026\010\uffa0\020\140\031\134\041\130\045\144" +
    "\057\136\061\137\063\141\064\142\066\143\001\002\000" +
    "\030\006\uffba\010\uffba\013\uffba\016\uffba\017\uffba\021\uffba" +
    "\022\uffba\023\uffba\033\uffba\050\uffba\060\uffba\001\002\000" +
    "\026\006\uffa3\010\uffa3\013\uffa3\016\uffa3\017\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\033\uffa3\060\uffa3\001\002\000\026\006" +
    "\uffa2\010\uffa2\013\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\033\uffa2\060\uffa2\001\002\000\006\010\uff9f\017" +
    "\256\001\002\000\044\004\162\005\161\007\160\020\140" +
    "\031\134\033\uffa6\041\130\042\151\045\144\046\146\051" +
    "\166\052\165\057\136\061\137\063\141\064\142\066\152" +
    "\001\002\000\004\010\247\001\002\000\026\006\uff95\010" +
    "\uff95\013\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\033\uff95\060\uff95\001\002\000\026\006\uff91\010\uff91\013" +
    "\uff91\016\uff91\017\uff91\021\uff91\022\uff91\023\uff91\033\uff91" +
    "\060\uff91\001\002\000\032\004\162\005\161\007\160\031" +
    "\134\041\130\042\151\045\144\057\136\061\137\063\141" +
    "\064\142\066\143\001\002\000\026\006\uff93\010\uff93\013" +
    "\uff93\016\uff93\017\uff93\021\uff93\022\uff93\023\uff93\033\uff93" +
    "\060\uff93\001\002\000\026\006\uff92\010\uff92\013\uff92\016" +
    "\uff92\017\uff92\021\uff92\022\uff92\023\uff92\033\uff92\060\uff92" +
    "\001\002\000\030\006\uffbb\010\uffbb\012\145\013\uffbb\016" +
    "\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\033\uffbb\060\uffbb" +
    "\001\002\000\026\006\uff94\010\uff94\013\uff94\016\uff94\017" +
    "\uff94\021\uff94\022\uff94\023\uff94\033\uff94\060\uff94\001\002" +
    "\000\044\004\162\005\161\007\160\013\uffa6\020\140\031" +
    "\134\041\130\042\151\045\144\046\146\051\166\052\165" +
    "\057\136\061\137\063\141\064\142\066\152\001\002\000" +
    "\004\007\230\001\002\000\004\013\227\001\002\000\022" +
    "\006\uffa3\010\uffb6\013\uffb6\016\uffb6\017\uffb6\023\uffb6\033" +
    "\uffb6\060\uffb6\001\002\000\026\006\uffb5\010\uffb5\013\uffb5" +
    "\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\033\uffb5\060" +
    "\uffb5\001\002\000\026\006\uffbb\007\224\010\uffbb\012\145" +
    "\013\uffbb\016\uffbb\017\uffbb\023\uffbb\033\uffbb\060\uffbb\001" +
    "\002\000\004\006\220\001\002\000\026\006\uffb0\010\uffb0" +
    "\013\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\033" +
    "\uffb0\060\uffb0\001\002\000\020\010\uffae\013\uffae\016\uffae" +
    "\017\uffae\023\uffae\033\uffae\060\uffae\001\002\000\020\010" +
    "\uffa9\013\uffa9\016\uffa9\017\uffa9\023\uffa9\033\uffa9\060\uffa9" +
    "\001\002\000\020\010\uffa7\013\uffa7\016\uffa7\017\uffa7\023" +
    "\uffa7\033\uffa7\060\uffa7\001\002\000\042\004\162\005\161" +
    "\007\160\020\140\031\134\041\130\042\151\045\144\046" +
    "\146\051\166\052\165\057\136\061\137\063\141\064\142" +
    "\066\152\001\002\000\024\020\140\031\134\041\130\045" +
    "\144\057\136\061\137\063\141\064\142\066\143\001\002" +
    "\000\024\020\140\031\134\041\130\045\144\057\136\061" +
    "\137\063\141\064\142\066\143\001\002\000\022\006\uffa2" +
    "\010\uffb4\013\uffb4\016\uffb4\017\uffb4\023\uffb4\033\uffb4\060" +
    "\uffb4\001\002\000\014\010\uffa5\013\uffa5\016\170\017\212" +
    "\033\uffa5\001\002\000\010\041\130\050\uffb9\066\204\001" +
    "\002\000\042\004\162\005\161\007\160\020\140\031\134" +
    "\041\130\042\151\045\144\046\146\051\166\052\165\057" +
    "\136\061\137\063\141\064\142\066\152\001\002\000\006" +
    "\016\170\060\171\001\002\000\042\004\162\005\161\007" +
    "\160\020\140\031\134\041\130\042\151\045\144\046\146" +
    "\051\166\052\165\057\136\061\137\063\141\064\142\066" +
    "\152\001\002\000\042\004\162\005\161\007\160\020\140" +
    "\031\134\041\130\042\151\045\144\046\146\051\166\052" +
    "\165\057\136\061\137\063\141\064\142\066\152\001\002" +
    "\000\060\004\162\005\161\007\160\010\uff99\013\uff99\016" +
    "\uff99\017\uff99\020\140\023\uff99\031\134\033\uff99\041\130" +
    "\042\151\045\144\046\146\051\166\052\165\057\136\060" +
    "\uff99\061\137\063\141\064\142\066\152\001\002\000\006" +
    "\016\170\023\175\001\002\000\020\010\uffac\013\uffac\016" +
    "\uffac\017\uffac\023\uffac\033\uffac\060\uffac\001\002\000\004" +
    "\012\176\001\002\000\042\004\162\005\161\007\160\020" +
    "\140\031\134\041\130\042\151\045\144\046\146\051\166" +
    "\052\165\057\136\061\137\063\141\064\142\066\152\001" +
    "\002\000\006\013\200\016\170\001\002\000\060\004\uff9a" +
    "\005\uff9a\007\uff9a\010\uff9a\013\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\023\uff9a\031\uff9a\033\uff9a\041\uff9a\042\uff9a\045\uff9a" +
    "\046\uff9a\051\uff9a\052\uff9a\057\uff9a\060\uff9a\061\uff9a\063" +
    "\uff9a\064\uff9a\066\uff9a\001\002\000\020\010\uff98\013\uff98" +
    "\016\uff98\017\uff98\023\uff98\033\uff98\060\uff98\001\002\000" +
    "\020\010\uffa8\013\uffa8\016\uffa8\017\uffa8\023\uffa8\033\uffa8" +
    "\060\uffa8\001\002\000\004\050\210\001\002\000\006\017" +
    "\uffbb\050\uffbb\001\002\000\006\017\206\050\uffb8\001\002" +
    "\000\010\041\130\050\uffb9\066\204\001\002\000\004\050" +
    "\uffb7\001\002\000\042\004\162\005\161\007\160\020\140" +
    "\031\134\041\130\042\151\045\144\046\146\051\166\052" +
    "\165\057\136\061\137\063\141\064\142\066\152\001\002" +
    "\000\020\010\uffab\013\uffab\016\uffab\017\uffab\023\uffab\033" +
    "\uffab\060\uffab\001\002\000\050\004\162\005\161\007\160" +
    "\010\uffa6\013\uffa6\020\140\031\134\033\uffa6\041\130\042" +
    "\151\045\144\046\146\051\166\052\165\057\136\061\137" +
    "\063\141\064\142\066\152\001\002\000\010\010\uffa4\013" +
    "\uffa4\033\uffa4\001\002\000\026\006\uffb2\010\uffb2\013\uffb2" +
    "\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\033\uffb2\060" +
    "\uffb2\001\002\000\026\006\uffb1\010\uffb1\013\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\033\uffb1\060\uffb1\001" +
    "\002\000\006\010\217\016\170\001\002\000\026\006\uffb3" +
    "\010\uffb3\013\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\033\uffb3\060\uffb3\001\002\000\004\007\221\001\002" +
    "\000\044\004\162\005\161\007\160\010\uffa6\020\140\031" +
    "\134\041\130\042\151\045\144\046\146\051\166\052\165" +
    "\057\136\061\137\063\141\064\142\066\152\001\002\000" +
    "\004\010\223\001\002\000\020\010\uffaf\013\uffaf\016\uffaf" +
    "\017\uffaf\023\uffaf\033\uffaf\060\uffaf\001\002\000\044\004" +
    "\162\005\161\007\160\010\uffa6\020\140\031\134\041\130" +
    "\042\151\045\144\046\146\051\166\052\165\057\136\061" +
    "\137\063\141\064\142\066\152\001\002\000\004\010\226" +
    "\001\002\000\020\010\uffaa\013\uffaa\016\uffaa\017\uffaa\023" +
    "\uffaa\033\uffaa\060\uffaa\001\002\000\026\006\uff97\010\uff97" +
    "\013\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97\033" +
    "\uff97\060\uff97\001\002\000\024\020\140\031\134\041\130" +
    "\045\144\057\136\061\137\063\141\064\142\066\143\001" +
    "\002\000\004\021\242\001\002\000\006\010\uff9c\022\240" +
    "\001\002\000\004\010\234\001\002\000\004\012\235\001" +
    "\002\000\042\004\162\005\161\007\160\020\140\031\134" +
    "\041\130\042\151\045\144\046\146\051\166\052\165\057" +
    "\136\061\137\063\141\064\142\066\152\001\002\000\006" +
    "\013\237\016\170\001\002\000\020\010\uffad\013\uffad\016" +
    "\uffad\017\uffad\023\uffad\033\uffad\060\uffad\001\002\000\024" +
    "\020\140\031\134\041\130\045\144\057\136\061\137\063" +
    "\141\064\142\066\143\001\002\000\004\010\uff9b\001\002" +
    "\000\024\020\140\031\134\041\130\045\144\057\136\061" +
    "\137\063\141\064\142\066\143\001\002\000\006\010\uff9d" +
    "\022\uff9d\001\002\000\026\006\uffb6\010\uffb6\013\uffb6\016" +
    "\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\033\uffb6\060\uffb6" +
    "\001\002\000\026\006\uffb4\010\uffb4\013\uffb4\016\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\033\uffb4\060\uffb4\001\002" +
    "\000\026\006\uffa1\010\uffa1\013\uffa1\016\uffa1\017\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\033\uffa1\060\uffa1\001\002\000\004" +
    "\015\250\001\002\000\004\012\251\001\002\000\062\004" +
    "\016\005\015\007\014\012\012\020\006\024\005\026\004" +
    "\037\050\042\036\044\034\045\033\046\032\051\030\052" +
    "\027\053\026\054\013\055\011\056\010\057\007\061\025" +
    "\062\053\063\024\064\051\066\017\001\002\000\006\013" +
    "\253\016\057\001\002\000\030\002\uffef\010\uffef\011\uffef" +
    "\013\uffef\014\uffef\016\uffef\017\uffef\022\uffef\023\uffef\040" +
    "\uffef\060\uffef\001\002\000\004\033\255\001\002\000\026" +
    "\006\uff96\010\uff96\013\uff96\016\uff96\017\uff96\021\uff96\022" +
    "\uff96\023\uff96\033\uff96\060\uff96\001\002\000\026\010\uffa0" +
    "\020\140\031\134\041\130\045\144\057\136\061\137\063" +
    "\141\064\142\066\143\001\002\000\004\010\uff9e\001\002" +
    "\000\024\020\140\031\134\041\130\045\144\057\136\061" +
    "\137\063\141\064\142\066\143\001\002\000\004\021\272" +
    "\001\002\000\004\010\266\001\002\000\010\010\uffe5\022" +
    "\264\023\uffe5\001\002\000\024\020\140\031\134\041\130" +
    "\045\144\057\136\061\137\063\141\064\142\066\143\001" +
    "\002\000\006\010\uffe4\023\uffe4\001\002\000\004\012\267" +
    "\001\002\000\062\004\016\005\015\007\014\012\012\020" +
    "\006\024\005\026\004\037\050\042\036\044\034\045\033" +
    "\046\032\051\030\052\027\053\026\054\013\055\011\056" +
    "\010\057\007\061\025\062\053\063\024\064\051\066\017" +
    "\001\002\000\006\013\271\016\057\001\002\000\030\002" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5" +
    "\022\ufff5\023\ufff5\040\ufff5\060\ufff5\001\002\000\006\020" +
    "\006\066\274\001\002\000\016\010\uffe7\011\uffe7\014\uffe7" +
    "\022\uffe7\023\uffe7\047\275\001\002\000\034\002\uffe9\006" +
    "\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9" +
    "\022\uffe9\023\uffe9\040\uffe9\047\uffe9\060\uffe9\001\002\000" +
    "\062\004\016\005\015\007\014\012\012\020\006\024\005" +
    "\026\004\037\050\042\036\044\034\045\033\046\032\051" +
    "\030\052\027\053\026\054\013\055\011\056\010\057\007" +
    "\061\025\062\053\063\024\064\051\066\017\001\002\000" +
    "\016\010\uffe6\011\uffe6\014\uffe6\016\057\022\uffe6\023\uffe6" +
    "\001\002\000\006\016\057\060\300\001\002\000\042\004" +
    "\162\005\161\007\160\020\140\031\134\041\130\042\151" +
    "\045\144\046\146\051\166\052\165\057\136\061\137\063" +
    "\141\064\142\066\152\001\002\000\070\002\uffe2\004\162" +
    "\005\161\007\160\010\uffe2\011\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\140\022\uffe2\023\uffe2\031\134\040\uffe2" +
    "\041\130\042\151\045\144\046\146\051\166\052\165\057" +
    "\136\060\uffe2\061\137\063\141\064\142\066\152\001\002" +
    "\000\030\002\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\016" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\040\ufff3\060\ufff3\001\002" +
    "\000\006\016\170\023\304\001\002\000\004\012\305\001" +
    "\002\000\062\004\016\005\015\007\014\012\012\020\006" +
    "\024\005\026\004\037\050\042\036\044\034\045\033\046" +
    "\032\051\030\052\027\053\026\054\013\055\011\056\010" +
    "\057\007\061\025\062\053\063\024\064\051\066\017\001" +
    "\002\000\006\013\307\016\057\001\002\000\070\002\uffe3" +
    "\004\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\031\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\045\uffe3\046\uffe3\051\uffe3\052" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3\064\uffe3\066\uffe3" +
    "\001\002\000\030\002\uffe1\010\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\022\uffe1\023\uffe1\040\uffe1\060\uffe1" +
    "\001\002\000\004\050\315\001\002\000\006\017\313\050" +
    "\uff8e\001\002\000\004\066\312\001\002\000\004\050\uff8d" +
    "\001\002\000\062\004\016\005\015\007\014\012\012\020" +
    "\006\024\005\026\004\037\050\042\036\044\034\045\033" +
    "\046\032\051\030\052\027\053\026\054\013\055\011\056" +
    "\010\057\007\061\025\062\053\063\024\064\051\066\017" +
    "\001\002\000\030\002\ufff2\010\ufff2\011\ufff2\013\ufff2\014" +
    "\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2\040\ufff2\060\ufff2" +
    "\001\002\000\062\004\016\005\015\007\014\012\012\020" +
    "\006\024\005\026\004\037\050\042\036\044\034\045\033" +
    "\046\032\051\030\052\027\053\026\054\013\055\011\056" +
    "\010\057\007\061\025\062\053\063\024\064\051\066\017" +
    "\001\002\000\006\010\321\016\057\001\002\000\030\002" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\022\ufff1\023\ufff1\040\ufff1\060\ufff1\001\002\000\062\004" +
    "\016\005\015\007\014\012\012\020\006\024\005\026\004" +
    "\037\050\042\036\044\034\045\033\046\032\051\030\052" +
    "\027\053\026\054\013\055\011\056\010\057\007\061\025" +
    "\062\053\063\024\064\051\066\017\001\002\000\004\010" +
    "\324\001\002\000\030\002\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\014\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0\040\ufff0\060" +
    "\ufff0\001\002\000\034\002\ufffc\006\ufffc\010\ufffc\011\ufffc" +
    "\013\ufffc\014\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\040" +
    "\ufffc\047\ufffc\060\ufffc\001\002\000\034\002\ufffb\006\ufffb" +
    "\010\ufffb\011\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb\022" +
    "\ufffb\023\ufffb\040\ufffb\047\ufffb\060\ufffb\001\002\000\004" +
    "\010\330\001\002\000\062\002\uffd5\004\uffd5\006\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\022\uffd5" +
    "\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\047\uffd5" +
    "\060\uffd5\001\002\000\004\043\333\001\002\000\004\013" +
    "\343\001\002\000\024\020\140\031\134\041\130\045\144" +
    "\057\136\061\137\063\141\064\142\066\143\001\002\000" +
    "\006\013\uffdf\043\333\001\002\000\004\013\uffde\001\002" +
    "\000\004\023\337\001\002\000\004\012\340\001\002\000" +
    "\062\004\016\005\015\007\014\012\012\020\006\024\005" +
    "\026\004\037\050\042\036\044\034\045\033\046\032\051" +
    "\030\052\027\053\026\054\013\055\011\056\010\057\007" +
    "\061\025\062\053\063\024\064\051\066\017\001\002\000" +
    "\006\013\342\016\057\001\002\000\006\013\uffe0\043\uffe0" +
    "\001\002\000\030\002\ufff4\010\ufff4\011\ufff4\013\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\040\ufff4\060\ufff4" +
    "\001\002\000\006\013\345\016\057\001\002\000\034\002" +
    "\ufffd\006\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\016\ufffd" +
    "\017\ufffd\022\ufffd\023\ufffd\040\ufffd\047\ufffd\060\ufffd\001" +
    "\002\000\024\020\140\031\134\041\130\045\144\057\136" +
    "\061\137\063\141\064\142\066\143\001\002\000\004\011" +
    "\350\001\002\000\024\020\140\031\134\041\130\045\144" +
    "\057\136\061\137\063\141\064\142\066\143\001\002\000" +
    "\004\010\352\001\002\000\004\012\353\001\002\000\062" +
    "\004\016\005\015\007\014\012\012\020\006\024\005\026" +
    "\004\037\050\042\036\044\034\045\033\046\032\051\030" +
    "\052\027\053\026\054\013\055\011\056\010\057\007\061" +
    "\025\062\053\063\024\064\051\066\017\001\002\000\006" +
    "\013\355\016\057\001\002\000\030\002\ufff7\010\ufff7\011" +
    "\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7" +
    "\040\ufff7\060\ufff7\001\002\000\024\020\140\031\134\041" +
    "\130\045\144\057\136\061\137\063\141\064\142\066\143" +
    "\001\002\000\004\014\360\001\002\000\024\020\140\031" +
    "\134\041\130\045\144\057\136\061\137\063\141\064\142" +
    "\066\143\001\002\000\004\010\362\001\002\000\004\012" +
    "\363\001\002\000\062\004\016\005\015\007\014\012\012" +
    "\020\006\024\005\026\004\037\050\042\036\044\034\045" +
    "\033\046\032\051\030\052\027\053\026\054\013\055\011" +
    "\056\010\057\007\061\025\062\053\063\024\064\051\066" +
    "\017\001\002\000\006\013\365\016\057\001\002\000\030" +
    "\002\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\016\ufff6\017" +
    "\ufff6\022\ufff6\023\ufff6\040\ufff6\060\ufff6\001\002\000\034" +
    "\002\uffe8\006\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\022\uffe8\023\uffe8\040\uffe8\047\uffe8\060\uffe8" +
    "\001\002\000\060\002\uffd2\004\uffd2\006\uffd2\010\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\022\uffd2\023\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\040\uffd2\047\uffd2\060\uffd2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\042\002\034\003\017\004\020\005\021\006" +
    "\022\011\046\020\030\021\037\022\040\023\041\024\042" +
    "\025\043\026\044\027\045\030\051\032\036\001\001\000" +
    "\010\020\030\021\037\022\366\001\001\000\002\001\001" +
    "\000\032\003\017\004\365\020\030\021\037\022\040\023" +
    "\041\024\042\025\043\026\044\027\045\030\051\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\017\004\020\005\021\006\054\007\343" +
    "\011\046\020\030\021\037\022\040\023\041\024\042\025" +
    "\043\026\044\027\045\030\051\032\036\001\001\000\002" +
    "\001\001\000\024\020\030\021\037\022\040\023\041\024" +
    "\042\025\043\026\044\027\045\030\326\001\001\000\004" +
    "\011\325\001\001\000\004\011\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\310\001\001\000\042\003\017" +
    "\004\020\005\021\006\054\007\276\011\046\020\030\021" +
    "\037\022\040\023\041\024\042\025\043\026\044\027\045" +
    "\030\051\032\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\017\004\020\005\021\006\054\007\055" +
    "\010\053\011\046\020\030\021\037\022\040\023\041\024" +
    "\042\025\043\026\044\027\045\030\051\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\017\004\020\005\021\006\061\011\046\020\030\021" +
    "\037\022\040\023\041\024\042\025\043\026\044\027\045" +
    "\030\051\032\036\001\001\000\044\003\017\004\020\005" +
    "\021\006\054\007\055\010\060\011\046\020\030\021\037" +
    "\022\040\023\041\024\042\025\043\026\044\027\045\030" +
    "\051\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\017\004" +
    "\020\005\021\006\054\007\055\010\065\011\046\020\030" +
    "\021\037\022\040\023\041\024\042\025\043\026\044\027" +
    "\045\030\051\032\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\030\021\037\022\040\023\041\024" +
    "\042\025\043\026\113\001\001\000\020\020\030\021\037" +
    "\022\040\023\041\024\042\025\043\026\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\030\021\037" +
    "\022\040\023\041\024\042\025\112\001\001\000\016\020" +
    "\030\021\037\022\040\023\041\024\042\025\111\001\001" +
    "\000\016\020\030\021\037\022\040\023\041\024\042\025" +
    "\110\001\001\000\016\020\030\021\037\022\040\023\041" +
    "\024\042\025\077\001\001\000\002\001\001\000\014\020" +
    "\030\021\037\022\040\023\041\024\107\001\001\000\014" +
    "\020\030\021\037\022\040\023\041\024\102\001\001\000" +
    "\002\001\001\000\012\020\030\021\037\022\040\023\106" +
    "\001\001\000\012\020\030\021\037\022\040\023\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\030\021\037\022\040\023\041\024\042\025\043\026" +
    "\044\027\045\030\117\031\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\030\021" +
    "\037\022\040\023\041\024\042\025\043\026\044\027\045" +
    "\030\117\031\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\130\043\132\044\134" +
    "\051\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\147\035\153" +
    "\036\154\037\155\040\156\041\163\042\253\043\152\051" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\243\035\153\036\245\051\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\147\035\153\036\154\037" +
    "\155\040\156\041\163\042\146\043\152\051\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\033\147\035\153\036\154\037\155\040\156" +
    "\041\215\043\152\051\162\001\001\000\010\033\130\043" +
    "\214\051\131\001\001\000\010\033\130\043\213\051\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\204\034\202\001\001\000\022\033\147\035\153\036\154" +
    "\037\155\040\156\041\166\043\152\051\162\001\001\000" +
    "\002\001\001\000\020\033\147\035\153\036\154\037\155" +
    "\040\201\043\152\051\162\001\001\000\026\033\147\035" +
    "\153\036\154\037\155\040\156\041\172\043\152\047\171" +
    "\050\173\051\162\001\001\000\026\033\147\035\153\036" +
    "\154\037\155\040\156\041\172\043\152\047\171\050\200" +
    "\051\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\033\147\035\153\036\154\037\155" +
    "\040\156\041\176\043\152\051\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\204\034\206\001\001\000\002\001\001\000\020" +
    "\033\147\035\153\036\154\037\155\040\210\043\152\051" +
    "\162\001\001\000\002\001\001\000\024\033\147\035\153" +
    "\036\154\037\155\040\156\041\163\042\212\043\152\051" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\033\147\035\153\036\154\037\155\040\156" +
    "\041\163\042\221\043\152\051\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\033\147\035\153\036\154" +
    "\037\155\040\156\041\163\042\224\043\152\051\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\130\043\230\045\231\046\232\051\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\033\147\035\153\036\154\037" +
    "\155\040\156\041\235\043\152\051\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\130\043\230\045" +
    "\231\046\240\051\131\001\001\000\002\001\001\000\010" +
    "\033\130\043\242\051\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\017\004\020\005" +
    "\021\006\054\007\251\011\046\020\030\021\037\022\040" +
    "\023\041\024\042\025\043\026\044\027\045\030\051\032" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\130\043\132\044" +
    "\256\051\131\001\001\000\002\001\001\000\014\012\262" +
    "\013\261\033\130\043\260\051\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\262" +
    "\013\264\033\130\043\260\051\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\017\004\020\005\021" +
    "\006\054\007\267\011\046\020\030\021\037\022\040\023" +
    "\041\024\042\025\043\026\044\027\045\030\051\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\017\004\020\005\021\006\054\007\275\011\046\020" +
    "\030\021\037\022\040\023\041\024\042\025\043\026\044" +
    "\027\045\030\051\032\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\300\015\301\033\147\035\153" +
    "\036\154\037\155\040\156\041\302\043\152\051\162\001" +
    "\001\000\026\014\300\015\307\033\147\035\153\036\154" +
    "\037\155\040\156\041\302\043\152\051\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\017\004\020\005\021\006\054\007\305\011\046\020" +
    "\030\021\037\022\040\023\041\024\042\025\043\026\044" +
    "\027\045\030\051\032\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\313\001\001\000\002\001\001\000" +
    "\040\003\017\004\020\005\021\006\315\011\046\020\030" +
    "\021\037\022\040\023\041\024\042\025\043\026\044\027" +
    "\045\030\051\032\036\001\001\000\002\001\001\000\042" +
    "\003\017\004\020\005\021\006\054\007\317\011\046\020" +
    "\030\021\037\022\040\023\041\024\042\025\043\026\044" +
    "\027\045\030\051\032\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\017\004\020\005\021\006\054" +
    "\007\055\010\322\011\046\020\030\021\037\022\040\023" +
    "\041\024\042\025\043\026\044\027\045\030\051\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\333\017\331\001\001\000\002\001\001\000" +
    "\014\012\262\013\335\033\130\043\260\051\131\001\001" +
    "\000\006\016\333\017\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\017\004\020" +
    "\005\021\006\054\007\340\011\046\020\030\021\037\022" +
    "\040\023\041\024\042\025\043\026\044\027\045\030\051" +
    "\032\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\346\033\130\043\260\051\131\001\001\000\002\001" +
    "\001\000\012\012\350\033\130\043\260\051\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\017\004" +
    "\020\005\021\006\054\007\353\011\046\020\030\021\037" +
    "\022\040\023\041\024\042\025\043\026\044\027\045\030" +
    "\051\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\356\033\130\043\260\051\131\001\001\000" +
    "\002\001\001\000\012\012\360\033\130\043\260\051\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\017\004\020\005\021\006\054\007\363\011\046\020\030" +
    "\021\037\022\040\023\041\024\042\025\043\026\044\027" +
    "\045\030\051\032\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ListName ::= Name _SYMB_11 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ListVar ::= Var _SYMB_11 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ListValPattern ::= ValPattern _SYMB_11 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ValPattern ::= _SYMB_33 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ValPattern ::= _SYMB_43 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ValPattern ::= _SYMB_21 ListPPattern _SYMB_23 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ValPattern ::= Var _SYMB_6 ListPPattern _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PatternPatternMatch ::= PPattern _SYMB_15 _SYMB_6 PPattern _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ListPatternBind ::= PatternBind _SYMB_14 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PatternBind ::= CPattern _SYMB_13 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ListCPattern ::= CPattern _SYMB_11 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CPattern ::= _SYMB_12 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListPPattern ::= PPattern _SYMB_11 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PPattern ::= PPattern _SYMB_10 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PPattern1 ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PPattern1 ::= _SYMB_38 ListVarPattern _SYMB_36 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PPattern1 ::= _SYMB_37 PPattern _SYMB_44 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PPattern1 ::= _SYMB_34 _SYMB_3 ListPatternBind _SYMB_4 _SYMB_6 PPattern _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PPattern2 ::= CPattern _SYMB_2 _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PPattern3 ::= _SYMB_1 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PPattern3 ::= _SYMB_0 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PPattern4 ::= _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PPattern4 ::= _SYMB_30 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListVarPattern ::= VarPattern _SYMB_11 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VarPattern ::= _SYMB_29 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Value ::= _SYMB_27 ListProc _SYMB_28 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Value ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListQuantity ::= Quantity _SYMB_11 ListQuantity 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListQuantity p_3 = (coop.rchain.syntax.rholang.Absyn.ListQuantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListQuantity ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListQuantity ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Quantity ::= Quantity1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Quantity1 ::= Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Quantity1 ::= Quantity1 _SYMB_26 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Quantity1 ::= Quantity1 _SYMB_25 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Quantity2 ::= Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Quantity2 ::= Quantity2 _SYMB_24 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Quantity2 ::= Quantity2 _SYMB_23 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Quantity2 ::= Quantity2 _SYMB_22 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Quantity2 ::= Quantity2 _SYMB_21 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Quantity3 ::= Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Quantity3 ::= Quantity3 _SYMB_18 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Quantity3 ::= Quantity3 _SYMB_20 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Quantity4 ::= Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Quantity4 ::= Quantity4 _SYMB_19 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Quantity4 ::= Quantity4 _SYMB_0 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMult(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Quantity5 ::= Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Quantity5 ::= _SYMB_18 Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Quantity6 ::= Quantity7 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Quantity6 ::= Quantity7 _SYMB_17 Var _SYMB_3 ListQuantity _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListQuantity p_5 = (coop.rchain.syntax.rholang.Absyn.ListQuantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDot(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Quantity7 ::= _SYMB_3 Quantity _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Quantity7 ::= _SYMB_16 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMap(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Quantity7 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Quantity7 ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Quantity7 ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity7 ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity7 ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RhoBool ::= _SYMB_33 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RhoBool ::= _SYMB_43 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CBranch ::= _SYMB_31 ListBind _SYMB_15 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PMBranch ::= PPattern _SYMB_15 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListBind ::= Bind _SYMB_14 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bind ::= CPattern _SYMB_13 Chan _SYMB_35 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bind ::= CPattern _SYMB_13 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Chan ::= _SYMB_12 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListProc ::= Proc _SYMB_11 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= Proc _SYMB_10 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc1 ::= _SYMB_32 Var _SYMB_3 ListCPattern _SYMB_4 _SYMB_9 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= _SYMB_39 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPrint(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_38 ListVar _SYMB_36 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_37 Proc _SYMB_44 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_40 _SYMB_6 ListCBranch _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_34 _SYMB_3 ListBind _SYMB_4 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_42 _SYMB_3 Bind _SYMB_8 Bind _SYMB_4 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc1 ::= _SYMB_41 _SYMB_3 Bind _SYMB_5 Bind _SYMB_4 _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc2 ::= Chan _SYMB_2 _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_1 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc3 ::= _SYMB_0 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= _SYMB_6 Proc _SYMB_7 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_30 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

